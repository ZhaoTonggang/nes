{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap ee0ecc2ff6fa7a127c62","webpack:///./src/utils.js","webpack:///./src/controller.js","webpack:///./src/tile.js","webpack:///./src/index.js","webpack:///./src/nes.js","webpack:///./src/cpu.js","webpack:///./src/ppu.js","webpack:///./src/papu.js","webpack:///./src/rom.js","webpack:///./src/mappers.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","copyArrayElements","src","srcPos","dest","destPos","length","copyArray","slice","fromJSON","obj","state","JSON_PROPERTIES","toJSON","Controller","Array","BUTTON_A","BUTTON_B","BUTTON_SELECT","BUTTON_START","BUTTON_UP","BUTTON_DOWN","BUTTON_LEFT","BUTTON_RIGHT","buttonDown","key","buttonUp","Tile","pix","fbIndex","tIndex","x","y","w","h","incX","incY","palIndex","tpri","initialized","opaque","setBuffer","scanline","setScanline","sline","b1","b2","render","buffer","srcx1","srcy1","srcx2","srcy2","dx","dy","palAdd","palette","flipHorizontal","flipVertical","pri","priTable","disableLeft8","isTransparent","NES","CPU","PPU","PAPU","ROM","opts","onFrameStart","onFrame","onFrameEnd","onAudioSample","onStatusUpdate","onBatteryRamWrite","preferredFrameRate","emulateSound","sampleRate","frameTime","ui","writeFrameStart","writeFrame","writeFrameEnd","updateStatus","cpu","ppu","papu","mmap","controllers","1","2","frame","bind","zapperMove","zapperFireDown","zapperFireUp","fpsFrameCount","romData","break","stop","reset","lastFpsTime","startFrame","cycles","FRAMELOOP","cyclesToHalt","emulate","clockFrameCounter","finalCurX","curX","requestEndFrame","spr0HitX","f_spVisibility","spr0HitY","setStatusFlag","STATUS_SPRITE0HIT","nmiCounter","startVBlank","endScanline","controller","button","zapperX","zapperY","zapperFired","getFPS","now","Date","fps","reloadROM","loadROM","data","rom","load","createMapper","setMirroring","getMirroringType","setFramerate","rate","setSampleRate","utils","nes","mem","REG_ACC","REG_X","REG_Y","REG_SP","REG_PC","REG_PC_NEW","REG_STATUS","F_CARRY","F_DECIMAL","F_INTERRUPT","F_INTERRUPT_NEW","F_OVERFLOW","F_SIGN","F_ZERO","F_NOTUSED","F_NOTUSED_NEW","F_BRK","F_BRK_NEW","opdata","crash","irqRequested","irqType","IRQ_NORMAL","IRQ_NMI","IRQ_RESET","j","k","setStatus","OpData","temp","add","doIrq","doNonMaskableInterrupt","doResetInterrupt","opinf","cycleCount","cycleAdd","addrMode","opaddr","addr","load16bit","write","push","pull","stackWrap","crashMessage","toString","val","requestIrq","type","value","pageCrossed","addr1","addr2","haltCycles","status","getStatus","st","setOp","INS_ADC","ADDR_IMM","ADDR_ZP","ADDR_ZPX","ADDR_ABS","ADDR_ABSX","ADDR_ABSY","ADDR_PREIDXIND","ADDR_POSTIDXIND","INS_AND","INS_ASL","ADDR_ACC","INS_BCC","ADDR_REL","INS_BCS","INS_BEQ","INS_BIT","INS_BMI","INS_BNE","INS_BPL","INS_BRK","ADDR_IMP","INS_BVC","INS_BVS","INS_CLC","INS_CLD","INS_CLI","INS_CLV","INS_CMP","INS_CPX","INS_CPY","INS_DEC","INS_DEX","INS_DEY","INS_EOR","INS_INC","INS_INX","INS_INY","INS_JMP","ADDR_INDABS","INS_JSR","INS_LDA","INS_LDX","ADDR_ZPY","INS_LDY","INS_LSR","INS_NOP","INS_ORA","INS_PHA","INS_PHP","INS_PLA","INS_PLP","INS_ROL","INS_ROR","INS_RTI","INS_RTS","INS_SBC","INS_SEC","INS_SED","INS_SEI","INS_STA","INS_STX","INS_STY","INS_TAX","INS_TAY","INS_TSX","INS_TXA","INS_TXS","INS_TYA","INS_ALR","INS_ANC","INS_ARR","INS_AXS","INS_LAX","INS_SAX","INS_DCP","INS_ISC","INS_RLA","INS_RRA","INS_SLO","INS_SRE","INS_SKB","INS_IGN","cycTable","instname","addrDesc","INS_DUMMY","inst","op","size","vramMem","spriteMem","vramAddress","vramTmpAddress","vramBufferedReadValue","firstWrite","sramAddress","currentMirroring","nmiOk","dummyCycleToggle","validTileData","scanlineAlreadyRendered","f_nmiOnVblank","f_spriteSize","f_bgPatternTable","f_spPatternTable","f_addrInc","f_nTblAddress","f_color","f_bgVisibility","f_spClipping","f_bgClipping","f_dispType","cntFV","cntV","cntH","cntVT","cntHT","regFV","regV","regH","regVT","regHT","regFH","regS","curNt","attrib","bgbuffer","pixrendered","scantile","lastRenderedScanline","sprX","sprY","sprTile","sprCol","vertFlip","horiFlip","bgPriority","hitSpr0","sprPalette","imgPalette","ptTile","ntable1","nameTable","vramMirrorTable","palTable","showSpr0Hit","clipToTvSizeH","clipToTvSizeV","STATUS_VRAMWRITE","STATUS_SLSPRITECOUNT","STATUS_VBLANK","NameTable","PaletteTable","loadNTSCPalette","updateControlReg1","updateControlReg2","mirroring","triggerRendering","defineMirrorRegion","HORIZONTAL_MIRRORING","VERTICAL_MIRRORING","SINGLESCREEN_MIRRORING","SINGLESCREEN_MIRRORING2","fromStart","toStart","renderFramePartially","endFrame","renderBgScanline","checkSprite0","clockIrqCounter","regsToAddress","cntsToAddress","bgColor","setEmphasis","updatePalettes","flag","readStatusRegister","tmp","writeSRAMAddress","address","sramLoad","sramWrite","spriteRamWriteUpdate","scrollWrite","writeVRAMAddress","latchAccess","vramLoad","mirroredLoad","cntsFromAddress","regsFromAddress","vramWrite","mirroredWrite","writeMem","sramDMA","baseAddress","incTileCounter","count","Error","startScan","scanCount","renderSpritesPartially","si","ei","destIndex","scan","baseTile","leftIndex","t","tpix","att","col","tscanoffset","targetBuffer","tile","getTileIndex","getAttrib","sx","startscan","scancount","bgPri","top","toffset","bufferIndex","tIndexAdd","patternWrite","nameTableWrite","attribTableWrite","getEntry","tileIndex","Math","floor","leftOver","index","writeAttrib","doNMI","isPixelWhite","width","height","tx","ty","attindex","basex","basey","sqy","sqx","curTable","emphTable","currentEmph","makeTables","loadPALPalette","r","g","b","rFactor","gFactor","bFactor","emph","getRed","getGreen","getBlue","getRgb","yiq","rgb","loadDefaultPalette","square1","ChannelSquare","square2","triangle","ChannelTriangle","noise","ChannelNoise","dmc","ChannelDM","frameIrqCounter","frameIrqCounterMax","initCounter","channelEnableValue","lengthLookup","dmcFreqLookup","noiseWavelengthLookup","square_table","tnd_table","frameIrqEnabled","frameIrqActive","frameClockNow","startedPlaying","recordOutput","initingHardware","masterFrameCounter","derivedFrameCounter","countSequence","sampleTimer","sampleTimerMax","sampleCount","triValue","smpSquare1","smpSquare2","smpTriangle","smpDmc","accCount","prevSampleL","prevSampleR","smpAccumL","smpAccumR","dacRange","dcValue","masterVolume","stereoPosLSquare1","stereoPosLSquare2","stereoPosLTriangle","stereoPosLNoise","stereoPosLDMC","stereoPosRSquare1","stereoPosRSquare2","stereoPosRTriangle","stereoPosRNoise","stereoPosRDMC","extraCycles","maxSample","minSample","enabled","volume","panning","setPanning","initLengthLookup","initDmcFrequencyLookup","initNoiseWavelengthLookup","initDACtables","writeReg","updateChannelEnable","resetCounter","readReg","getLengthStatus","getIrqStatus","irqGenerated","frameCounterTick","setEnabled","nCycles","maxCycles","isEnabled","shiftCounter","dmaFrequency","clockDmc","progTimerMax","progTimerCount","linearCounter","lengthCounter","triangleCounter","sampleValue","squareCounter","updateSampleValue","acc_c","accValue","shiftReg","randomMode","randomBit","accSample","sample","sampleCondition","clockLengthCounter","clockSweep","clockEnvDecay","clockLinearCounter","sq_index","tnd_index","smpNoise","sampleValueL","sampleValueR","smpDiffL","smpDiffR","getLengthMax","getDmcFrequency","getNoiseWaveLength","pos","updateStereoPos","setMasterVolume","ival","max_sqr","max_tnd","MODE_NORMAL","MODE_LOOP","MODE_IRQ","hasSample","playMode","dmaCounter","deltaCounter","playStartAddress","playAddress","playLength","playLengthCounter","reg4012","reg4013","dacLsb","endOfSample","nextSample","envDecayDisable","envDecayLoopEnable","lengthCounterEnable","envReset","shiftNow","rawNoisePeriod","envDecayRate","envDecayCounter","envVolume","dutyLookup","impLookup","sqr1","sweepActive","sweepCarry","updateSweepPeriod","sweepCounter","sweepCounterMax","sweepMode","sweepShiftAmount","dutyMode","sweepResult","vol","addrAdd","lcHalt","lcControl","lcLoadValue","updateSampleCondition","clockProgrammableTimer","clockTriangleGenerator","Mappers","mapperName","FOURSCREEN_MIRRORING","SINGLESCREEN_MIRRORING3","SINGLESCREEN_MIRRORING4","CHRROM_MIRRORING","header","vrom","vromTile","romCount","vromCount","batteryRam","trainer","fourScreen","mapperType","valid","v","indexOf","charCodeAt","foundError","offset","getMapperName","mapperSupported","0","joy1StrobeState","joy2StrobeState","joypadLastWrite","regWrite","writelow","regLoad","joy1Read","joy2Read","ret","loadPRGROM","loadCHRROM","loadBatteryRam","loadRomBank","loadVromBank","ram","bank","load32kRomBank","load8kVromBank","bank4kStart","load1kVromBank","bank1k","bank4k","bankoffset","baseIndex","load2kVromBank","bank2k","load8kRomBank","bank8k","bank16k","apply","regBuffer","regBufferCounter","oneScreenMirroring","prgSwitchingArea","prgSwitchingSize","vromSwitchingSize","romSelectionReg0","romSelectionReg1","romBankSelect","arguments","getRegNumber","setReg","reg","baseBank","switchLowHighPrgRom","oldSetting","switch16to32","switch32to16","CMD_SEL_2_1K_VROM_0000","CMD_SEL_2_1K_VROM_0800","CMD_SEL_1K_VROM_1000","CMD_SEL_1K_VROM_1400","CMD_SEL_1K_VROM_1800","CMD_SEL_1K_VROM_1C00","CMD_SEL_ROM_PAGE1","CMD_SEL_ROM_PAGE2","command","prgAddressSelect","chrAddressSelect","pageNumber","irqCounter","irqLatchValue","irqEnable","prgAddressChanged","executeCommand","cmd","arg","prg_size","chr_size","sram_we_a","sram_we_b","graphic_mode","nametable_mode","nametable_type","fill_chr","fill_pal","SetBank_SRAM","SetBank_CPU","chr_mode","chr_page","SetBank_PPU","split_control","split_scroll","split_page","irq_line","ClearIRQ","irq_enable","mult_a","mult_b","exWrite","irq_status","prgbank1","prgbank2"],"mappings":"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AAAuT,SAAA,SACAvT,KAAAuT,SAAA,SACAvT,KAAAuT,SAAA,SACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UACAvT,KAAAuT,SAAA,UAEAvT,KAAA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","file":"nesjs.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"nesjs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"nesjs\"] = factory();\n\telse\n\t\troot[\"nesjs\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ee0ecc2ff6fa7a127c62","module.exports = {\r\n\tcopyArrayElements: function(src, srcPos, dest, destPos, length) {\r\n\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\tdest[destPos + i] = src[srcPos + i];\r\n\t\t}\r\n\t},\r\n\r\n\tcopyArray: function(src) {\r\n\t\treturn src.slice(0);\r\n\t},\r\n\r\n\tfromJSON: function(obj, state) {\r\n\t\tfor (let i = 0; i < obj.JSON_PROPERTIES.length; i++) {\r\n\t\t\tobj[obj.JSON_PROPERTIES[i]] = state[obj.JSON_PROPERTIES[i]];\r\n\t\t}\r\n\t},\r\n\r\n\ttoJSON: function(obj) {\r\n\t\tlet state = {};\r\n\t\tfor (let i = 0; i < obj.JSON_PROPERTIES.length; i++) {\r\n\t\t\tstate[obj.JSON_PROPERTIES[i]] = obj[obj.JSON_PROPERTIES[i]];\r\n\t\t}\r\n\t\treturn state;\r\n\t},\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/utils.js\n// module id = 0\n// module chunks = 0 1","let Controller = function() {\r\n\tthis.state = new Array(8);\r\n\tfor (let i = 0; i < this.state.length; i++) {\r\n\t\tthis.state[i] = 0x40;\r\n\t}\r\n};\r\n\r\nController.BUTTON_A = 0;\r\nController.BUTTON_B = 1;\r\nController.BUTTON_SELECT = 2;\r\nController.BUTTON_START = 3;\r\nController.BUTTON_UP = 4;\r\nController.BUTTON_DOWN = 5;\r\nController.BUTTON_LEFT = 6;\r\nController.BUTTON_RIGHT = 7;\r\n\r\nController.prototype = {\r\n\tbuttonDown: function(key) {\r\n\t\tthis.state[key] = 0x41;\r\n\t},\r\n\r\n\tbuttonUp: function(key) {\r\n\t\tthis.state[key] = 0x40;\r\n\t},\r\n};\r\n\r\nmodule.exports = Controller;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller.js\n// module id = 1\n// module chunks = 0 1","let Tile = function() {\r\n\t// Tile data:\r\n\tthis.pix = new Array(64);\r\n\r\n\tthis.fbIndex = null;\r\n\tthis.tIndex = null;\r\n\tthis.x = null;\r\n\tthis.y = null;\r\n\tthis.w = null;\r\n\tthis.h = null;\r\n\tthis.incX = null;\r\n\tthis.incY = null;\r\n\tthis.palIndex = null;\r\n\tthis.tpri = null;\r\n\tthis.c = null;\r\n\tthis.initialized = false;\r\n\tthis.opaque = new Array(8);\r\n};\r\n\r\nTile.prototype = {\r\n\tsetBuffer: function(scanline) {\r\n\t\tfor (this.y = 0; this.y < 8; this.y++) {\r\n\t\t\tthis.setScanline(this.y, scanline[this.y], scanline[this.y + 8]);\r\n\t\t}\r\n\t},\r\n\r\n\tsetScanline: function(sline, b1, b2) {\r\n\t\tthis.initialized = true;\r\n\t\tthis.tIndex = sline << 3;\r\n\t\tfor (this.x = 0; this.x < 8; this.x++) {\r\n\t\t\tthis.pix[this.tIndex + this.x] =\r\n\t\t\t\t((b1 >> (7 - this.x)) & 1) + (((b2 >> (7 - this.x)) & 1) << 1);\r\n\t\t\tif (this.pix[this.tIndex + this.x] === 0) {\r\n\t\t\t\tthis.opaque[sline] = false;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\trender: function(\r\n\t\tbuffer,\r\n\t\tsrcx1,\r\n\t\tsrcy1,\r\n\t\tsrcx2,\r\n\t\tsrcy2,\r\n\t\tdx,\r\n\t\tdy,\r\n\t\tpalAdd,\r\n\t\tpalette,\r\n\t\tflipHorizontal,\r\n\t\tflipVertical,\r\n\t\tpri,\r\n\t\tpriTable,\r\n\t\tdisableLeft8 = false\r\n\t) {\r\n\t\tif (dx < -7 || dx >= 256 || dy < -7 || dy >= 240) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.w = srcx2 - srcx1;\r\n\t\tthis.h = srcy2 - srcy1;\r\n\r\n\t\tif (dx < 0) {\r\n\t\t\tsrcx1 -= dx;\r\n\t\t}\r\n\t\tif (dx + srcx2 >= 256) {\r\n\t\t\tsrcx2 = 256 - dx;\r\n\t\t}\r\n\r\n\t\tif (dy < 0) {\r\n\t\t\tsrcy1 -= dy;\r\n\t\t}\r\n\t\tif (dy + srcy2 >= 240) {\r\n\t\t\tsrcy2 = 240 - dy;\r\n\t\t}\r\n\r\n\t\tif (!flipHorizontal && !flipVertical) {\r\n\t\t\tthis.fbIndex = (dy << 8) + dx;\r\n\t\t\tthis.tIndex = 0;\r\n\t\t\tfor (this.y = 0; this.y < 8; this.y++) {\r\n\t\t\t\tfor (this.x = 0; this.x < 8; this.x++) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tthis.x >= srcx1 &&\r\n\t\t\t\t\t\tthis.x < srcx2 &&\r\n\t\t\t\t\t\tthis.y >= srcy1 &&\r\n\t\t\t\t\t\tthis.y < srcy2\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tthis.palIndex = this.pix[this.tIndex];\r\n\t\t\t\t\t\tthis.tpri = priTable[this.fbIndex];\r\n\t\t\t\t\t\tif (this.palIndex !== 0 && pri <= (this.tpri & 0xff) && (!disableLeft8 || this.fbIndex %\r\n\t\t\t\t\t\t\t\t256 >= 8)) {\r\n\t\t\t\t\t\t\t//console.log(\"Rendering upright tile to buffer\");\r\n\t\t\t\t\t\t\tbuffer[this.fbIndex] = palette[this.palIndex + palAdd];\r\n\t\t\t\t\t\t\tthis.tpri = (this.tpri & 0xf00) | pri;\r\n\t\t\t\t\t\t\tpriTable[this.fbIndex] = this.tpri;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.fbIndex++;\r\n\t\t\t\t\tthis.tIndex++;\r\n\t\t\t\t}\r\n\t\t\t\tthis.fbIndex -= 8;\r\n\t\t\t\tthis.fbIndex += 256;\r\n\t\t\t}\r\n\t\t} else if (flipHorizontal && !flipVertical) {\r\n\t\t\tthis.fbIndex = (dy << 8) + dx;\r\n\t\t\tthis.tIndex = 7;\r\n\t\t\tfor (this.y = 0; this.y < 8; this.y++) {\r\n\t\t\t\tfor (this.x = 0; this.x < 8; this.x++) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tthis.x >= srcx1 &&\r\n\t\t\t\t\t\tthis.x < srcx2 &&\r\n\t\t\t\t\t\tthis.y >= srcy1 &&\r\n\t\t\t\t\t\tthis.y < srcy2\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tthis.palIndex = this.pix[this.tIndex];\r\n\t\t\t\t\t\tthis.tpri = priTable[this.fbIndex];\r\n\t\t\t\t\t\tif (this.palIndex !== 0 && pri <= (this.tpri & 0xff) && (!disableLeft8 || this.fbIndex %\r\n\t\t\t\t\t\t\t\t256 >= 8)) {\r\n\t\t\t\t\t\t\tbuffer[this.fbIndex] = palette[this.palIndex + palAdd];\r\n\t\t\t\t\t\t\tthis.tpri = (this.tpri & 0xf00) | pri;\r\n\t\t\t\t\t\t\tpriTable[this.fbIndex] = this.tpri;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.fbIndex++;\r\n\t\t\t\t\tthis.tIndex--;\r\n\t\t\t\t}\r\n\t\t\t\tthis.fbIndex -= 8;\r\n\t\t\t\tthis.fbIndex += 256;\r\n\t\t\t\tthis.tIndex += 16;\r\n\t\t\t}\r\n\t\t} else if (flipVertical && !flipHorizontal) {\r\n\t\t\tthis.fbIndex = (dy << 8) + dx;\r\n\t\t\tthis.tIndex = 56;\r\n\t\t\tfor (this.y = 0; this.y < 8; this.y++) {\r\n\t\t\t\tfor (this.x = 0; this.x < 8; this.x++) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tthis.x >= srcx1 &&\r\n\t\t\t\t\t\tthis.x < srcx2 &&\r\n\t\t\t\t\t\tthis.y >= srcy1 &&\r\n\t\t\t\t\t\tthis.y < srcy2\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tthis.palIndex = this.pix[this.tIndex];\r\n\t\t\t\t\t\tthis.tpri = priTable[this.fbIndex];\r\n\t\t\t\t\t\tif (this.palIndex !== 0 && pri <= (this.tpri & 0xff) && (!disableLeft8 || this.fbIndex %\r\n\t\t\t\t\t\t\t\t256 >= 8)) {\r\n\t\t\t\t\t\t\tbuffer[this.fbIndex] = palette[this.palIndex + palAdd];\r\n\t\t\t\t\t\t\tthis.tpri = (this.tpri & 0xf00) | pri;\r\n\t\t\t\t\t\t\tpriTable[this.fbIndex] = this.tpri;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.fbIndex++;\r\n\t\t\t\t\tthis.tIndex++;\r\n\t\t\t\t}\r\n\t\t\t\tthis.fbIndex -= 8;\r\n\t\t\t\tthis.fbIndex += 256;\r\n\t\t\t\tthis.tIndex -= 16;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.fbIndex = (dy << 8) + dx;\r\n\t\t\tthis.tIndex = 63;\r\n\t\t\tfor (this.y = 0; this.y < 8; this.y++) {\r\n\t\t\t\tfor (this.x = 0; this.x < 8; this.x++) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tthis.x >= srcx1 &&\r\n\t\t\t\t\t\tthis.x < srcx2 &&\r\n\t\t\t\t\t\tthis.y >= srcy1 &&\r\n\t\t\t\t\t\tthis.y < srcy2\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tthis.palIndex = this.pix[this.tIndex];\r\n\t\t\t\t\t\tthis.tpri = priTable[this.fbIndex];\r\n\t\t\t\t\t\tif (this.palIndex !== 0 && pri <= (this.tpri & 0xff) && (!disableLeft8 || this.fbIndex %\r\n\t\t\t\t\t\t\t\t256 >= 8)) {\r\n\t\t\t\t\t\t\tbuffer[this.fbIndex] = palette[this.palIndex + palAdd];\r\n\t\t\t\t\t\t\tthis.tpri = (this.tpri & 0xf00) | pri;\r\n\t\t\t\t\t\t\tpriTable[this.fbIndex] = this.tpri;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.fbIndex++;\r\n\t\t\t\t\tthis.tIndex--;\r\n\t\t\t\t}\r\n\t\t\t\tthis.fbIndex -= 8;\r\n\t\t\t\tthis.fbIndex += 256;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tisTransparent: function(x, y) {\r\n\t\treturn this.pix[(y << 3) + x] === 0;\r\n\t},\r\n\r\n\ttoJSON: function() {\r\n\t\treturn {\r\n\t\t\topaque: this.opaque,\r\n\t\t\tpix: this.pix,\r\n\t\t};\r\n\t},\r\n\r\n\tfromJSON: function(s) {\r\n\t\tthis.opaque = s.opaque;\r\n\t\tthis.pix = s.pix;\r\n\t},\r\n};\r\n\r\nmodule.exports = Tile;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tile.js\n// module id = 2\n// module chunks = 0 1","module.exports = {\r\n\tController: require(\"./controller\"),\r\n\tNES: require(\"./nes\"),\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 3\n// module chunks = 0 1","let CPU = require(\"./cpu\");\r\nlet Controller = require(\"./controller\");\r\nlet PPU = require(\"./ppu\");\r\nlet PAPU = require(\"./papu\");\r\nlet ROM = require(\"./rom\");\r\n\r\nlet NES = function(opts) {\r\n\tthis.opts = {\r\n\t\tonFrameStart: function() {},\r\n\t\tonFrame: function() {},\r\n\t\tonFrameEnd: function() {},\r\n\t\tonAudioSample: null,\r\n\t\tonStatusUpdate: function() {},\r\n\t\tonBatteryRamWrite: function() {},\r\n\r\n\t\t// FIXME: not actually used except for in PAPU\r\n\t\tpreferredFrameRate: 60,\r\n\r\n\t\temulateSound: true,\r\n\t\tsampleRate: 48000, // Sound sample rate in hz\r\n\t};\r\n\tif (typeof opts !== \"undefined\") {\r\n\t\tlet key;\r\n\t\tfor (key in this.opts) {\r\n\t\t\tif (typeof opts[key] !== \"undefined\") {\r\n\t\t\t\tthis.opts[key] = opts[key];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tthis.frameTime = 1000 / this.opts.preferredFrameRate;\r\n\r\n\tthis.ui = {\r\n\t\twriteFrameStart: this.opts.onFrameStart,\r\n\t\twriteFrame: this.opts.onFrame,\r\n\t\twriteFrameEnd: this.opts.onFrameEnd,\r\n\t\tupdateStatus: this.opts.onStatusUpdate,\r\n\t};\r\n\tthis.cpu = new CPU(this);\r\n\tthis.ppu = new PPU(this);\r\n\tthis.papu = new PAPU(this);\r\n\tthis.mmap = null; // set in loadROM()\r\n\tthis.controllers = {\r\n\t\t1: new Controller(),\r\n\t\t2: new Controller(),\r\n\t};\r\n\r\n\tthis.ui.updateStatus(\"Ready to load a ROM.\");\r\n\r\n\tthis.frame = this.frame.bind(this);\r\n\tthis.buttonDown = this.buttonDown.bind(this);\r\n\tthis.buttonUp = this.buttonUp.bind(this);\r\n\tthis.zapperMove = this.zapperMove.bind(this);\r\n\tthis.zapperFireDown = this.zapperFireDown.bind(this);\r\n\tthis.zapperFireUp = this.zapperFireUp.bind(this);\r\n};\r\n\r\nNES.prototype = {\r\n\tfpsFrameCount: 0,\r\n\tromData: null,\r\n\tbreak: false,\r\n\r\n\t// Set break to true to stop frame loop.\r\n\tstop: function() {\r\n\t\tthis.break = true;\r\n\t},\r\n\r\n\t// Resets the system\r\n\treset: function() {\r\n\t\tif (this.mmap !== null) {\r\n\t\t\tthis.mmap.reset();\r\n\t\t}\r\n\r\n\t\tthis.cpu.reset();\r\n\t\tthis.ppu.reset();\r\n\t\tthis.papu.reset();\r\n\r\n\t\tthis.lastFpsTime = null;\r\n\t\tthis.fpsFrameCount = 0;\r\n\r\n\t\tthis.break = false;\r\n\t},\r\n\r\n\tframe: function() {\r\n\t\tthis.ppu.startFrame();\r\n\t\tlet cycles = 0;\r\n\t\tlet emulateSound = this.opts.emulateSound;\r\n\t\tlet cpu = this.cpu;\r\n\t\tlet ppu = this.ppu;\r\n\t\tlet papu = this.papu;\r\n\t\tFRAMELOOP: for (;;) {\r\n\t\t\tif (this.break) break;\r\n\t\t\tif (cpu.cyclesToHalt === 0) {\r\n\t\t\t\t// Execute a CPU instruction\r\n\t\t\t\tcycles = cpu.emulate();\r\n\t\t\t\tif (emulateSound) {\r\n\t\t\t\t\tpapu.clockFrameCounter(cycles);\r\n\t\t\t\t}\r\n\t\t\t\tcycles *= 3;\r\n\t\t\t} else {\r\n\t\t\t\tif (cpu.cyclesToHalt > 8) {\r\n\t\t\t\t\tcycles = 24;\r\n\t\t\t\t\tif (emulateSound) {\r\n\t\t\t\t\t\tpapu.clockFrameCounter(8);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcpu.cyclesToHalt -= 8;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcycles = cpu.cyclesToHalt * 3;\r\n\t\t\t\t\tif (emulateSound) {\r\n\t\t\t\t\t\tpapu.clockFrameCounter(cpu.cyclesToHalt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcpu.cyclesToHalt = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet finalCurX = ppu.curX + cycles;\r\n\t\t\tif (\r\n\t\t\t\t!ppu.requestEndFrame &&\r\n\t\t\t\tfinalCurX < 341 &&\r\n\t\t\t\t(ppu.spr0HitX < ppu.curX || ppu.spr0HitX >= finalCurX)\r\n\t\t\t) {\r\n\t\t\t\tppu.curX = finalCurX;\r\n\t\t\t\tcontinue FRAMELOOP;\r\n\t\t\t}\r\n\r\n\t\t\tfor (; cycles > 0; cycles--) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tppu.curX === ppu.spr0HitX &&\r\n\t\t\t\t\tppu.f_spVisibility === 1 &&\r\n\t\t\t\t\tppu.scanline - 21 === ppu.spr0HitY\r\n\t\t\t\t) {\r\n\t\t\t\t\t// Set sprite 0 hit flag:\r\n\t\t\t\t\tppu.setStatusFlag(ppu.STATUS_SPRITE0HIT, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ppu.requestEndFrame) {\r\n\t\t\t\t\tppu.nmiCounter--;\r\n\t\t\t\t\tif (ppu.nmiCounter === 0) {\r\n\t\t\t\t\t\tppu.requestEndFrame = false;\r\n\t\t\t\t\t\tppu.startVBlank();\r\n\t\t\t\t\t\tbreak FRAMELOOP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tppu.curX++;\r\n\t\t\t\tif (ppu.curX === 341) {\r\n\t\t\t\t\tppu.curX = 0;\r\n\t\t\t\t\tppu.endScanline();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.fpsFrameCount++;\r\n\t},\r\n\r\n\tbuttonDown: function(controller, button) {\r\n\t\tthis.controllers[controller].buttonDown(button);\r\n\t},\r\n\r\n\tbuttonUp: function(controller, button) {\r\n\t\tthis.controllers[controller].buttonUp(button);\r\n\t},\r\n\r\n\tzapperMove: function(x, y) {\r\n\t\tif (!this.mmap) return;\r\n\t\tthis.mmap.zapperX = x;\r\n\t\tthis.mmap.zapperY = y;\r\n\t},\r\n\r\n\tzapperFireDown: function() {\r\n\t\tif (!this.mmap) return;\r\n\t\tthis.mmap.zapperFired = true;\r\n\t},\r\n\r\n\tzapperFireUp: function() {\r\n\t\tif (!this.mmap) return;\r\n\t\tthis.mmap.zapperFired = false;\r\n\t},\r\n\r\n\tgetFPS: function() {\r\n\t\tlet now = +new Date();\r\n\t\tlet fps = null;\r\n\t\tif (this.lastFpsTime) {\r\n\t\t\tfps = this.fpsFrameCount / ((now - this.lastFpsTime) / 1000);\r\n\t\t}\r\n\t\tthis.fpsFrameCount = 0;\r\n\t\tthis.lastFpsTime = now;\r\n\t\treturn fps;\r\n\t},\r\n\r\n\treloadROM: function() {\r\n\t\tif (this.romData !== null) {\r\n\t\t\tthis.loadROM(this.romData);\r\n\t\t}\r\n\t},\r\n\r\n\t// Loads a ROM file into the CPU and PPU.\r\n\t// The ROM file is validated first.\r\n\tloadROM: function(data) {\r\n\t\t// Load ROM file:\r\n\t\tthis.rom = new ROM(this);\r\n\t\tthis.rom.load(data);\r\n\r\n\t\tthis.reset();\r\n\t\tthis.mmap = this.rom.createMapper();\r\n\t\tthis.mmap.loadROM();\r\n\t\tthis.ppu.setMirroring(this.rom.getMirroringType());\r\n\t\tthis.romData = data;\r\n\t},\r\n\r\n\tsetFramerate: function(rate) {\r\n\t\tthis.opts.preferredFrameRate = rate;\r\n\t\tthis.frameTime = 1000 / rate;\r\n\t\tthis.papu.setSampleRate(this.opts.sampleRate, false);\r\n\t},\r\n\r\n\ttoJSON: function() {\r\n\t\treturn {\r\n\t\t\t// romData: this.romData,\r\n\t\t\tcpu: this.cpu.toJSON(),\r\n\t\t\tmmap: this.mmap.toJSON(),\r\n\t\t\tppu: this.ppu.toJSON(),\r\n\t\t\tpapu: this.papu.toJSON(),\r\n\t\t};\r\n\t},\r\n\r\n\tfromJSON: function(s) {\r\n\t\tthis.reset();\r\n\t\t// this.romData = s.romData;\r\n\t\tthis.cpu.fromJSON(s.cpu);\r\n\t\tthis.mmap.fromJSON(s.mmap);\r\n\t\tthis.ppu.fromJSON(s.ppu);\r\n\t\tthis.papu.fromJSON(s.papu);\r\n\t},\r\n};\r\n\r\nmodule.exports = NES;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/nes.js\n// module id = 4\n// module chunks = 0 1","let utils = require(\"./utils\");\r\n\r\nlet CPU = function(nes) {\r\n\tthis.nes = nes;\r\n\r\n\t// Keep Chrome happy\r\n\tthis.mem = null;\r\n\tthis.REG_ACC = null;\r\n\tthis.REG_X = null;\r\n\tthis.REG_Y = null;\r\n\tthis.REG_SP = null;\r\n\tthis.REG_PC = null;\r\n\tthis.REG_PC_NEW = null;\r\n\tthis.REG_STATUS = null;\r\n\tthis.F_CARRY = null;\r\n\tthis.F_DECIMAL = null;\r\n\tthis.F_INTERRUPT = null;\r\n\tthis.F_INTERRUPT_NEW = null;\r\n\tthis.F_OVERFLOW = null;\r\n\tthis.F_SIGN = null;\r\n\tthis.F_ZERO = null;\r\n\tthis.F_NOTUSED = null;\r\n\tthis.F_NOTUSED_NEW = null;\r\n\tthis.F_BRK = null;\r\n\tthis.F_BRK_NEW = null;\r\n\tthis.opdata = null;\r\n\tthis.cyclesToHalt = null;\r\n\tthis.crash = null;\r\n\tthis.irqRequested = null;\r\n\tthis.irqType = null;\r\n\r\n\tthis.reset();\r\n};\r\n\r\nCPU.prototype = {\r\n\t// IRQ Types\r\n\tIRQ_NORMAL: 0,\r\n\tIRQ_NMI: 1,\r\n\tIRQ_RESET: 2,\r\n\r\n\treset: function() {\r\n\t\t// Main memory\r\n\t\tthis.mem = new Array(0x10000);\r\n\r\n\t\tfor (let i = 0; i < 0x2000; i++) {\r\n\t\t\tthis.mem[i] = 0xff;\r\n\t\t}\r\n\t\tfor (let p = 0; p < 4; p++) {\r\n\t\t\tlet j = p * 0x800;\r\n\t\t\tthis.mem[j + 0x008] = 0xf7;\r\n\t\t\tthis.mem[j + 0x009] = 0xef;\r\n\t\t\tthis.mem[j + 0x00a] = 0xdf;\r\n\t\t\tthis.mem[j + 0x00f] = 0xbf;\r\n\t\t}\r\n\t\tfor (let k = 0x2001; k < this.mem.length; k++) {\r\n\t\t\tthis.mem[k] = 0;\r\n\t\t}\r\n\r\n\t\t// CPU Registers:\r\n\t\tthis.REG_ACC = 0;\r\n\t\tthis.REG_X = 0;\r\n\t\tthis.REG_Y = 0;\r\n\t\t// Reset Stack pointer:\r\n\t\tthis.REG_SP = 0x01ff;\r\n\t\t// Reset Program counter:\r\n\t\tthis.REG_PC = 0x8000 - 1;\r\n\t\tthis.REG_PC_NEW = 0x8000 - 1;\r\n\t\t// Reset Status register:\r\n\t\tthis.REG_STATUS = 0x28;\r\n\r\n\t\tthis.setStatus(0x28);\r\n\r\n\t\t// Set flags:\r\n\t\tthis.F_CARRY = 0;\r\n\t\tthis.F_DECIMAL = 0;\r\n\t\tthis.F_INTERRUPT = 1;\r\n\t\tthis.F_INTERRUPT_NEW = 1;\r\n\t\tthis.F_OVERFLOW = 0;\r\n\t\tthis.F_SIGN = 0;\r\n\t\tthis.F_ZERO = 1;\r\n\r\n\t\tthis.F_NOTUSED = 1;\r\n\t\tthis.F_NOTUSED_NEW = 1;\r\n\t\tthis.F_BRK = 1;\r\n\t\tthis.F_BRK_NEW = 1;\r\n\r\n\t\tthis.opdata = new OpData().opdata;\r\n\t\tthis.cyclesToHalt = 0;\r\n\r\n\t\t// Reset crash flag:\r\n\t\tthis.crash = false;\r\n\r\n\t\t// Interrupt notification:\r\n\t\tthis.irqRequested = false;\r\n\t\tthis.irqType = null;\r\n\t},\r\n\r\n\t// Emulates a single CPU instruction, returns the number of cycles\r\n\temulate: function() {\r\n\t\tlet temp;\r\n\t\tlet add;\r\n\r\n\t\t// Check interrupts:\r\n\t\tif (this.irqRequested) {\r\n\t\t\ttemp =\r\n\t\t\t\tthis.F_CARRY |\r\n\t\t\t\t((this.F_ZERO === 0 ? 1 : 0) << 1) |\r\n\t\t\t\t(this.F_INTERRUPT << 2) |\r\n\t\t\t\t(this.F_DECIMAL << 3) |\r\n\t\t\t\t(this.F_BRK << 4) |\r\n\t\t\t\t(this.F_NOTUSED << 5) |\r\n\t\t\t\t(this.F_OVERFLOW << 6) |\r\n\t\t\t\t(this.F_SIGN << 7);\r\n\r\n\t\t\tthis.REG_PC_NEW = this.REG_PC;\r\n\t\t\tthis.F_INTERRUPT_NEW = this.F_INTERRUPT;\r\n\t\t\tswitch (this.irqType) {\r\n\t\t\t\tcase 0: {\r\n\t\t\t\t\t// Normal IRQ:\r\n\t\t\t\t\tif (this.F_INTERRUPT !== 0) {\r\n\t\t\t\t\t\t// console.log(\"Interrupt was masked.\");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.doIrq(temp);\r\n\t\t\t\t\t// console.log(\"Did normal IRQ. I=\"+this.F_INTERRUPT);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 1: {\r\n\t\t\t\t\t// NMI:\r\n\t\t\t\t\tthis.doNonMaskableInterrupt(temp);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 2: {\r\n\t\t\t\t\t// Reset:\r\n\t\t\t\t\tthis.doResetInterrupt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.REG_PC = this.REG_PC_NEW;\r\n\t\t\tthis.F_INTERRUPT = this.F_INTERRUPT_NEW;\r\n\t\t\tthis.F_BRK = this.F_BRK_NEW;\r\n\t\t\tthis.irqRequested = false;\r\n\t\t}\r\n\r\n\t\tif (null === this.nes.mmap) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet opinf = this.opdata[this.nes.mmap.load(this.REG_PC + 1)];\r\n\t\tlet cycleCount = opinf >> 24;\r\n\t\tlet cycleAdd = 0;\r\n\r\n\t\t// Find address mode:\r\n\t\tlet addrMode = (opinf >> 8) & 0xff;\r\n\r\n\t\t// Increment PC by number of op bytes:\r\n\t\tlet opaddr = this.REG_PC;\r\n\t\tthis.REG_PC += (opinf >> 16) & 0xff;\r\n\r\n\t\tlet addr = 0;\r\n\t\tswitch (addrMode) {\r\n\t\t\tcase 0: {\r\n\t\t\t\t// Zero Page mode. Use the address given after the opcode,\r\n\t\t\t\t// but without high byte.\r\n\t\t\t\taddr = this.load(opaddr + 2);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 1: {\r\n\t\t\t\t// Relative mode.\r\n\t\t\t\taddr = this.load(opaddr + 2);\r\n\t\t\t\tif (addr < 0x80) {\r\n\t\t\t\t\taddr += this.REG_PC;\r\n\t\t\t\t} else {\r\n\t\t\t\t\taddr += this.REG_PC - 256;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 2: {\r\n\t\t\t\t// Ignore. Address is implied in instruction.\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 3: {\r\n\t\t\t\t// Absolute mode. Use the two bytes following the opcode as\r\n\t\t\t\t// an address.\r\n\t\t\t\taddr = this.load16bit(opaddr + 2);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 4: {\r\n\t\t\t\t// Accumulator mode. The address is in the accumulator\r\n\t\t\t\t// register.\r\n\t\t\t\taddr = this.REG_ACC;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 5: {\r\n\t\t\t\t// Immediate mode. The value is given after the opcode.\r\n\t\t\t\taddr = this.REG_PC;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 6: {\r\n\t\t\t\t// Zero Page Indexed mode, X as index. Use the address given\r\n\t\t\t\t// after the opcode, then add the\r\n\t\t\t\t// X register to it to get the final address.\r\n\t\t\t\taddr = (this.load(opaddr + 2) + this.REG_X) & 0xff;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 7: {\r\n\t\t\t\t// Zero Page Indexed mode, Y as index. Use the address given\r\n\t\t\t\t// after the opcode, then add the\r\n\t\t\t\t// Y register to it to get the final address.\r\n\t\t\t\taddr = (this.load(opaddr + 2) + this.REG_Y) & 0xff;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 8: {\r\n\t\t\t\t// Absolute Indexed Mode, X as index. Same as zero page\r\n\t\t\t\t// indexed, but with the high byte.\r\n\t\t\t\taddr = this.load16bit(opaddr + 2);\r\n\t\t\t\tif ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\r\n\t\t\t\t\tcycleAdd = 1;\r\n\t\t\t\t}\r\n\t\t\t\taddr += this.REG_X;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 9: {\r\n\t\t\t\t// Absolute Indexed Mode, Y as index. Same as zero page\r\n\t\t\t\t// indexed, but with the high byte.\r\n\t\t\t\taddr = this.load16bit(opaddr + 2);\r\n\t\t\t\tif ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\r\n\t\t\t\t\tcycleAdd = 1;\r\n\t\t\t\t}\r\n\t\t\t\taddr += this.REG_Y;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 10: {\r\n\t\t\t\t// Pre-indexed Indirect mode. Find the 16-bit address\r\n\t\t\t\t// starting at the given location plus\r\n\t\t\t\t// the current X register. The value is the contents of that\r\n\t\t\t\t// address.\r\n\t\t\t\taddr = this.load(opaddr + 2);\r\n\t\t\t\tif ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\r\n\t\t\t\t\tcycleAdd = 1;\r\n\t\t\t\t}\r\n\t\t\t\taddr += this.REG_X;\r\n\t\t\t\taddr &= 0xff;\r\n\t\t\t\taddr = this.load16bit(addr);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 11: {\r\n\t\t\t\t// Post-indexed Indirect mode. Find the 16-bit address\r\n\t\t\t\t// contained in the given location\r\n\t\t\t\t// (and the one following). Add to that address the contents\r\n\t\t\t\t// of the Y register. Fetch the value\r\n\t\t\t\t// stored at that adress.\r\n\t\t\t\taddr = this.load16bit(this.load(opaddr + 2));\r\n\t\t\t\tif ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\r\n\t\t\t\t\tcycleAdd = 1;\r\n\t\t\t\t}\r\n\t\t\t\taddr += this.REG_Y;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 12: {\r\n\t\t\t\t// Indirect Absolute mode. Find the 16-bit address contained\r\n\t\t\t\t// at the given location.\r\n\t\t\t\taddr = this.load16bit(opaddr + 2); // Find op\r\n\t\t\t\tif (addr < 0x1fff) {\r\n\t\t\t\t\taddr =\r\n\t\t\t\t\t\tthis.mem[addr] +\r\n\t\t\t\t\t\t(this.mem[(addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)] <<\r\n\t\t\t\t\t\t\t8); // Read from address given in op\r\n\t\t\t\t} else {\r\n\t\t\t\t\taddr =\r\n\t\t\t\t\t\tthis.nes.mmap.load(addr) +\r\n\t\t\t\t\t\t(this.nes.mmap.load(\r\n\t\t\t\t\t\t\t\t(addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)\r\n\t\t\t\t\t\t\t) <<\r\n\t\t\t\t\t\t\t8);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Wrap around for addresses above 0xFFFF:\r\n\t\taddr &= 0xffff;\r\n\r\n\t\t// ----------------------------------------------------------------------------------------------------\r\n\t\t// Decode & execute instruction:\r\n\t\t// ----------------------------------------------------------------------------------------------------\r\n\r\n\t\t// This should be compiled to a jump table.\r\n\t\tswitch (opinf & 0xff) {\r\n\t\t\tcase 0: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * ADC *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Add with carry.\r\n\t\t\t\ttemp = this.REG_ACC + this.load(addr) + this.F_CARRY;\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\t((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\r\n\t\t\t\t\t((this.REG_ACC ^ temp) & 0x80) !== 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.F_OVERFLOW = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.F_OVERFLOW = 0;\r\n\t\t\t\t}\r\n\t\t\t\tthis.F_CARRY = temp > 255 ? 1 : 0;\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp & 0xff;\r\n\t\t\t\tthis.REG_ACC = temp & 255;\r\n\t\t\t\tcycleCount += cycleAdd;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 1: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * AND *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// AND memory with accumulator.\r\n\t\t\t\tthis.REG_ACC = this.REG_ACC & this.load(addr);\r\n\t\t\t\tthis.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_ACC;\r\n\t\t\t\tif (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 2: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * ASL *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Shift left one bit\r\n\t\t\t\tif (addrMode === 4) {\r\n\t\t\t\t\t// ADDR_ACC = 4\r\n\r\n\t\t\t\t\tthis.F_CARRY = (this.REG_ACC >> 7) & 1;\r\n\t\t\t\t\tthis.REG_ACC = (this.REG_ACC << 1) & 255;\r\n\t\t\t\t\tthis.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n\t\t\t\t\tthis.F_ZERO = this.REG_ACC;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttemp = this.load(addr);\r\n\t\t\t\t\tthis.F_CARRY = (temp >> 7) & 1;\r\n\t\t\t\t\ttemp = (temp << 1) & 255;\r\n\t\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\t\tthis.F_ZERO = temp;\r\n\t\t\t\t\tthis.write(addr, temp);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 3: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * BCC *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Branch on carry clear\r\n\t\t\t\tif (this.F_CARRY === 0) {\r\n\t\t\t\t\tcycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n\t\t\t\t\tthis.REG_PC = addr;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 4: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * BCS *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Branch on carry set\r\n\t\t\t\tif (this.F_CARRY === 1) {\r\n\t\t\t\t\tcycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n\t\t\t\t\tthis.REG_PC = addr;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 5: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * BEQ *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Branch on zero\r\n\t\t\t\tif (this.F_ZERO === 0) {\r\n\t\t\t\t\tcycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n\t\t\t\t\tthis.REG_PC = addr;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 6: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * BIT *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\ttemp = this.load(addr);\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_OVERFLOW = (temp >> 6) & 1;\r\n\t\t\t\ttemp &= this.REG_ACC;\r\n\t\t\t\tthis.F_ZERO = temp;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 7: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * BMI *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Branch on negative result\r\n\t\t\t\tif (this.F_SIGN === 1) {\r\n\t\t\t\t\tcycleCount++;\r\n\t\t\t\t\tthis.REG_PC = addr;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 8: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * BNE *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Branch on not zero\r\n\t\t\t\tif (this.F_ZERO !== 0) {\r\n\t\t\t\t\tcycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n\t\t\t\t\tthis.REG_PC = addr;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 9: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * BPL *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Branch on positive result\r\n\t\t\t\tif (this.F_SIGN === 0) {\r\n\t\t\t\t\tcycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n\t\t\t\t\tthis.REG_PC = addr;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 10: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * BRK *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\tthis.REG_PC += 2;\r\n\t\t\t\tthis.push((this.REG_PC >> 8) & 255);\r\n\t\t\t\tthis.push(this.REG_PC & 255);\r\n\t\t\t\tthis.F_BRK = 1;\r\n\r\n\t\t\t\tthis.push(\r\n\t\t\t\t\tthis.F_CARRY |\r\n\t\t\t\t\t((this.F_ZERO === 0 ? 1 : 0) << 1) |\r\n\t\t\t\t\t(this.F_INTERRUPT << 2) |\r\n\t\t\t\t\t(this.F_DECIMAL << 3) |\r\n\t\t\t\t\t(this.F_BRK << 4) |\r\n\t\t\t\t\t(this.F_NOTUSED << 5) |\r\n\t\t\t\t\t(this.F_OVERFLOW << 6) |\r\n\t\t\t\t\t(this.F_SIGN << 7)\r\n\t\t\t\t);\r\n\r\n\t\t\t\tthis.F_INTERRUPT = 1;\r\n\t\t\t\t//this.REG_PC = load(0xFFFE) | (load(0xFFFF) << 8);\r\n\t\t\t\tthis.REG_PC = this.load16bit(0xfffe);\r\n\t\t\t\tthis.REG_PC--;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 11: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * BVC *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Branch on overflow clear\r\n\t\t\t\tif (this.F_OVERFLOW === 0) {\r\n\t\t\t\t\tcycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n\t\t\t\t\tthis.REG_PC = addr;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 12: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * BVS *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Branch on overflow set\r\n\t\t\t\tif (this.F_OVERFLOW === 1) {\r\n\t\t\t\t\tcycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n\t\t\t\t\tthis.REG_PC = addr;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 13: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * CLC *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Clear carry flag\r\n\t\t\t\tthis.F_CARRY = 0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 14: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * CLD *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Clear decimal flag\r\n\t\t\t\tthis.F_DECIMAL = 0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 15: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * CLI *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Clear interrupt flag\r\n\t\t\t\tthis.F_INTERRUPT = 0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 16: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * CLV *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Clear overflow flag\r\n\t\t\t\tthis.F_OVERFLOW = 0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 17: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * CMP *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Compare memory and accumulator:\r\n\t\t\t\ttemp = this.REG_ACC - this.load(addr);\r\n\t\t\t\tthis.F_CARRY = temp >= 0 ? 1 : 0;\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp & 0xff;\r\n\t\t\t\tcycleCount += cycleAdd;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 18: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * CPX *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Compare memory and index X:\r\n\t\t\t\ttemp = this.REG_X - this.load(addr);\r\n\t\t\t\tthis.F_CARRY = temp >= 0 ? 1 : 0;\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp & 0xff;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 19: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * CPY *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Compare memory and index Y:\r\n\t\t\t\ttemp = this.REG_Y - this.load(addr);\r\n\t\t\t\tthis.F_CARRY = temp >= 0 ? 1 : 0;\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp & 0xff;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 20: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * DEC *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Decrement memory by one:\r\n\t\t\t\ttemp = (this.load(addr) - 1) & 0xff;\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp;\r\n\t\t\t\tthis.write(addr, temp);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 21: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * DEX *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Decrement index X by one:\r\n\t\t\t\tthis.REG_X = (this.REG_X - 1) & 0xff;\r\n\t\t\t\tthis.F_SIGN = (this.REG_X >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_X;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 22: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * DEY *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Decrement index Y by one:\r\n\t\t\t\tthis.REG_Y = (this.REG_Y - 1) & 0xff;\r\n\t\t\t\tthis.F_SIGN = (this.REG_Y >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_Y;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 23: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * EOR *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// XOR Memory with accumulator, store in accumulator:\r\n\t\t\t\tthis.REG_ACC = (this.load(addr) ^ this.REG_ACC) & 0xff;\r\n\t\t\t\tthis.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_ACC;\r\n\t\t\t\tcycleCount += cycleAdd;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 24: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * INC *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Increment memory by one:\r\n\t\t\t\ttemp = (this.load(addr) + 1) & 0xff;\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp;\r\n\t\t\t\tthis.write(addr, temp & 0xff);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 25: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * INX *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Increment index X by one:\r\n\t\t\t\tthis.REG_X = (this.REG_X + 1) & 0xff;\r\n\t\t\t\tthis.F_SIGN = (this.REG_X >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_X;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 26: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * INY *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Increment index Y by one:\r\n\t\t\t\tthis.REG_Y++;\r\n\t\t\t\tthis.REG_Y &= 0xff;\r\n\t\t\t\tthis.F_SIGN = (this.REG_Y >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_Y;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 27: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * JMP *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Jump to new location:\r\n\t\t\t\tthis.REG_PC = addr - 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 28: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * JSR *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Jump to new location, saving return address.\r\n\t\t\t\t// Push return address on stack:\r\n\t\t\t\tthis.push((this.REG_PC >> 8) & 255);\r\n\t\t\t\tthis.push(this.REG_PC & 255);\r\n\t\t\t\tthis.REG_PC = addr - 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 29: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * LDA *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Load accumulator with memory:\r\n\t\t\t\tthis.REG_ACC = this.load(addr);\r\n\t\t\t\tthis.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_ACC;\r\n\t\t\t\tcycleCount += cycleAdd;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 30: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * LDX *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Load index X with memory:\r\n\t\t\t\tthis.REG_X = this.load(addr);\r\n\t\t\t\tthis.F_SIGN = (this.REG_X >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_X;\r\n\t\t\t\tcycleCount += cycleAdd;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 31: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * LDY *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Load index Y with memory:\r\n\t\t\t\tthis.REG_Y = this.load(addr);\r\n\t\t\t\tthis.F_SIGN = (this.REG_Y >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_Y;\r\n\t\t\t\tcycleCount += cycleAdd;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 32: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * LSR *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Shift right one bit:\r\n\t\t\t\tif (addrMode === 4) {\r\n\t\t\t\t\t// ADDR_ACC\r\n\r\n\t\t\t\t\ttemp = this.REG_ACC & 0xff;\r\n\t\t\t\t\tthis.F_CARRY = temp & 1;\r\n\t\t\t\t\ttemp >>= 1;\r\n\t\t\t\t\tthis.REG_ACC = temp;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttemp = this.load(addr) & 0xff;\r\n\t\t\t\t\tthis.F_CARRY = temp & 1;\r\n\t\t\t\t\ttemp >>= 1;\r\n\t\t\t\t\tthis.write(addr, temp);\r\n\t\t\t\t}\r\n\t\t\t\tthis.F_SIGN = 0;\r\n\t\t\t\tthis.F_ZERO = temp;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 33: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * NOP *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// No OPeration.\r\n\t\t\t\t// Ignore.\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 34: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * ORA *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// OR memory with accumulator, store in accumulator.\r\n\t\t\t\ttemp = (this.load(addr) | this.REG_ACC) & 255;\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp;\r\n\t\t\t\tthis.REG_ACC = temp;\r\n\t\t\t\tif (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 35: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * PHA *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Push accumulator on stack\r\n\t\t\t\tthis.push(this.REG_ACC);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 36: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * PHP *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Push processor status on stack\r\n\t\t\t\tthis.F_BRK = 1;\r\n\t\t\t\tthis.push(\r\n\t\t\t\t\tthis.F_CARRY |\r\n\t\t\t\t\t((this.F_ZERO === 0 ? 1 : 0) << 1) |\r\n\t\t\t\t\t(this.F_INTERRUPT << 2) |\r\n\t\t\t\t\t(this.F_DECIMAL << 3) |\r\n\t\t\t\t\t(this.F_BRK << 4) |\r\n\t\t\t\t\t(this.F_NOTUSED << 5) |\r\n\t\t\t\t\t(this.F_OVERFLOW << 6) |\r\n\t\t\t\t\t(this.F_SIGN << 7)\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 37: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * PLA *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Pull accumulator from stack\r\n\t\t\t\tthis.REG_ACC = this.pull();\r\n\t\t\t\tthis.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_ACC;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 38: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * PLP *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Pull processor status from stack\r\n\t\t\t\ttemp = this.pull();\r\n\t\t\t\tthis.F_CARRY = temp & 1;\r\n\t\t\t\tthis.F_ZERO = ((temp >> 1) & 1) === 1 ? 0 : 1;\r\n\t\t\t\tthis.F_INTERRUPT = (temp >> 2) & 1;\r\n\t\t\t\tthis.F_DECIMAL = (temp >> 3) & 1;\r\n\t\t\t\tthis.F_BRK = (temp >> 4) & 1;\r\n\t\t\t\tthis.F_NOTUSED = (temp >> 5) & 1;\r\n\t\t\t\tthis.F_OVERFLOW = (temp >> 6) & 1;\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\r\n\t\t\t\tthis.F_NOTUSED = 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 39: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * ROL *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Rotate one bit left\r\n\t\t\t\tif (addrMode === 4) {\r\n\t\t\t\t\t// ADDR_ACC = 4\r\n\r\n\t\t\t\t\ttemp = this.REG_ACC;\r\n\t\t\t\t\tadd = this.F_CARRY;\r\n\t\t\t\t\tthis.F_CARRY = (temp >> 7) & 1;\r\n\t\t\t\t\ttemp = ((temp << 1) & 0xff) + add;\r\n\t\t\t\t\tthis.REG_ACC = temp;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttemp = this.load(addr);\r\n\t\t\t\t\tadd = this.F_CARRY;\r\n\t\t\t\t\tthis.F_CARRY = (temp >> 7) & 1;\r\n\t\t\t\t\ttemp = ((temp << 1) & 0xff) + add;\r\n\t\t\t\t\tthis.write(addr, temp);\r\n\t\t\t\t}\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 40: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * ROR *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Rotate one bit right\r\n\t\t\t\tif (addrMode === 4) {\r\n\t\t\t\t\t// ADDR_ACC = 4\r\n\r\n\t\t\t\t\tadd = this.F_CARRY << 7;\r\n\t\t\t\t\tthis.F_CARRY = this.REG_ACC & 1;\r\n\t\t\t\t\ttemp = (this.REG_ACC >> 1) + add;\r\n\t\t\t\t\tthis.REG_ACC = temp;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttemp = this.load(addr);\r\n\t\t\t\t\tadd = this.F_CARRY << 7;\r\n\t\t\t\t\tthis.F_CARRY = temp & 1;\r\n\t\t\t\t\ttemp = (temp >> 1) + add;\r\n\t\t\t\t\tthis.write(addr, temp);\r\n\t\t\t\t}\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 41: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * RTI *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Return from interrupt. Pull status and PC from stack.\r\n\r\n\t\t\t\ttemp = this.pull();\r\n\t\t\t\tthis.F_CARRY = temp & 1;\r\n\t\t\t\tthis.F_ZERO = ((temp >> 1) & 1) === 0 ? 1 : 0;\r\n\t\t\t\tthis.F_INTERRUPT = (temp >> 2) & 1;\r\n\t\t\t\tthis.F_DECIMAL = (temp >> 3) & 1;\r\n\t\t\t\tthis.F_BRK = (temp >> 4) & 1;\r\n\t\t\t\tthis.F_NOTUSED = (temp >> 5) & 1;\r\n\t\t\t\tthis.F_OVERFLOW = (temp >> 6) & 1;\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\r\n\t\t\t\tthis.REG_PC = this.pull();\r\n\t\t\t\tthis.REG_PC += this.pull() << 8;\r\n\t\t\t\tif (this.REG_PC === 0xffff) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis.REG_PC--;\r\n\t\t\t\tthis.F_NOTUSED = 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 42: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * RTS *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Return from subroutine. Pull PC from stack.\r\n\r\n\t\t\t\tthis.REG_PC = this.pull();\r\n\t\t\t\tthis.REG_PC += this.pull() << 8;\r\n\r\n\t\t\t\tif (this.REG_PC === 0xffff) {\r\n\t\t\t\t\treturn; // return from NSF play routine:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 43: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * SBC *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\ttemp = this.REG_ACC - this.load(addr) - (1 - this.F_CARRY);\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp & 0xff;\r\n\t\t\t\tif (\r\n\t\t\t\t\t((this.REG_ACC ^ temp) & 0x80) !== 0 &&\r\n\t\t\t\t\t((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.F_OVERFLOW = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.F_OVERFLOW = 0;\r\n\t\t\t\t}\r\n\t\t\t\tthis.F_CARRY = temp < 0 ? 0 : 1;\r\n\t\t\t\tthis.REG_ACC = temp & 0xff;\r\n\t\t\t\tif (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 44: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * SEC *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Set carry flag\r\n\t\t\t\tthis.F_CARRY = 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 45: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * SED *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Set decimal mode\r\n\t\t\t\tthis.F_DECIMAL = 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 46: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * SEI *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Set interrupt disable status\r\n\t\t\t\tthis.F_INTERRUPT = 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 47: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * STA *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Store accumulator in memory\r\n\t\t\t\tthis.write(addr, this.REG_ACC);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 48: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * STX *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Store index X in memory\r\n\t\t\t\tthis.write(addr, this.REG_X);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 49: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * STY *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Store index Y in memory:\r\n\t\t\t\tthis.write(addr, this.REG_Y);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 50: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * TAX *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Transfer accumulator to index X:\r\n\t\t\t\tthis.REG_X = this.REG_ACC;\r\n\t\t\t\tthis.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_ACC;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 51: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * TAY *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Transfer accumulator to index Y:\r\n\t\t\t\tthis.REG_Y = this.REG_ACC;\r\n\t\t\t\tthis.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_ACC;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 52: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * TSX *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Transfer stack pointer to index X:\r\n\t\t\t\tthis.REG_X = this.REG_SP - 0x0100;\r\n\t\t\t\tthis.F_SIGN = (this.REG_SP >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_X;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 53: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * TXA *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Transfer index X to accumulator:\r\n\t\t\t\tthis.REG_ACC = this.REG_X;\r\n\t\t\t\tthis.F_SIGN = (this.REG_X >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_X;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 54: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * TXS *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Transfer index X to stack pointer:\r\n\t\t\t\tthis.REG_SP = this.REG_X + 0x0100;\r\n\t\t\t\tthis.stackWrap();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 55: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * TYA *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Transfer index Y to accumulator:\r\n\t\t\t\tthis.REG_ACC = this.REG_Y;\r\n\t\t\t\tthis.F_SIGN = (this.REG_Y >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_Y;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 56: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * ALR *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Shift right one bit after ANDing:\r\n\t\t\t\ttemp = this.REG_ACC & this.load(addr);\r\n\t\t\t\tthis.F_CARRY = temp & 1;\r\n\t\t\t\tthis.REG_ACC = this.F_ZERO = temp >> 1;\r\n\t\t\t\tthis.F_SIGN = 0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 57: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * ANC *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// AND accumulator, setting carry to bit 7 result.\r\n\t\t\t\tthis.REG_ACC = this.F_ZERO = this.REG_ACC & this.load(addr);\r\n\t\t\t\tthis.F_CARRY = this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 58: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * ARR *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Rotate right one bit after ANDing:\r\n\t\t\t\ttemp = this.REG_ACC & this.load(addr);\r\n\t\t\t\tthis.REG_ACC = this.F_ZERO = (temp >> 1) + (this.F_CARRY << 7);\r\n\t\t\t\tthis.F_SIGN = this.F_CARRY;\r\n\t\t\t\tthis.F_CARRY = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_OVERFLOW = ((temp >> 7) ^ (temp >> 6)) & 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 59: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * AXS *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Set X to (X AND A) - value.\r\n\t\t\t\ttemp = (this.REG_X & this.REG_ACC) - this.load(addr);\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp & 0xff;\r\n\t\t\t\tif (\r\n\t\t\t\t\t((this.REG_X ^ temp) & 0x80) !== 0 &&\r\n\t\t\t\t\t((this.REG_X ^ this.load(addr)) & 0x80) !== 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.F_OVERFLOW = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.F_OVERFLOW = 0;\r\n\t\t\t\t}\r\n\t\t\t\tthis.F_CARRY = temp < 0 ? 0 : 1;\r\n\t\t\t\tthis.REG_X = temp & 0xff;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 60: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * LAX *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Load A and X with memory:\r\n\t\t\t\tthis.REG_ACC = this.REG_X = this.F_ZERO = this.load(addr);\r\n\t\t\t\tthis.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n\t\t\t\tcycleCount += cycleAdd;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 61: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * SAX *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Store A AND X in memory:\r\n\t\t\t\tthis.write(addr, this.REG_ACC & this.REG_X);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 62: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * DCP *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Decrement memory by one:\r\n\t\t\t\ttemp = (this.load(addr) - 1) & 0xff;\r\n\t\t\t\tthis.write(addr, temp);\r\n\r\n\t\t\t\t// Then compare with the accumulator:\r\n\t\t\t\ttemp = this.REG_ACC - temp;\r\n\t\t\t\tthis.F_CARRY = temp >= 0 ? 1 : 0;\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp & 0xff;\r\n\t\t\t\tif (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 63: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * ISC *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Increment memory by one:\r\n\t\t\t\ttemp = (this.load(addr) + 1) & 0xff;\r\n\t\t\t\tthis.write(addr, temp);\r\n\r\n\t\t\t\t// Then subtract from the accumulator:\r\n\t\t\t\ttemp = this.REG_ACC - temp - (1 - this.F_CARRY);\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp & 0xff;\r\n\t\t\t\tif (\r\n\t\t\t\t\t((this.REG_ACC ^ temp) & 0x80) !== 0 &&\r\n\t\t\t\t\t((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.F_OVERFLOW = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.F_OVERFLOW = 0;\r\n\t\t\t\t}\r\n\t\t\t\tthis.F_CARRY = temp < 0 ? 0 : 1;\r\n\t\t\t\tthis.REG_ACC = temp & 0xff;\r\n\t\t\t\tif (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 64: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * RLA *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Rotate one bit left\r\n\t\t\t\ttemp = this.load(addr);\r\n\t\t\t\tadd = this.F_CARRY;\r\n\t\t\t\tthis.F_CARRY = (temp >> 7) & 1;\r\n\t\t\t\ttemp = ((temp << 1) & 0xff) + add;\r\n\t\t\t\tthis.write(addr, temp);\r\n\r\n\t\t\t\t// Then AND with the accumulator.\r\n\t\t\t\tthis.REG_ACC = this.REG_ACC & temp;\r\n\t\t\t\tthis.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_ACC;\r\n\t\t\t\tif (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 65: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * RRA *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Rotate one bit right\r\n\t\t\t\ttemp = this.load(addr);\r\n\t\t\t\tadd = this.F_CARRY << 7;\r\n\t\t\t\tthis.F_CARRY = temp & 1;\r\n\t\t\t\ttemp = (temp >> 1) + add;\r\n\t\t\t\tthis.write(addr, temp);\r\n\r\n\t\t\t\t// Then add to the accumulator\r\n\t\t\t\ttemp = this.REG_ACC + this.load(addr) + this.F_CARRY;\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\t((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\r\n\t\t\t\t\t((this.REG_ACC ^ temp) & 0x80) !== 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.F_OVERFLOW = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.F_OVERFLOW = 0;\r\n\t\t\t\t}\r\n\t\t\t\tthis.F_CARRY = temp > 255 ? 1 : 0;\r\n\t\t\t\tthis.F_SIGN = (temp >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = temp & 0xff;\r\n\t\t\t\tthis.REG_ACC = temp & 255;\r\n\t\t\t\tif (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 66: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * SLO *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Shift one bit left\r\n\t\t\t\ttemp = this.load(addr);\r\n\t\t\t\tthis.F_CARRY = (temp >> 7) & 1;\r\n\t\t\t\ttemp = (temp << 1) & 255;\r\n\t\t\t\tthis.write(addr, temp);\r\n\r\n\t\t\t\t// Then OR with the accumulator.\r\n\t\t\t\tthis.REG_ACC = this.REG_ACC | temp;\r\n\t\t\t\tthis.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_ACC;\r\n\t\t\t\tif (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 67: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * SRE *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Shift one bit right\r\n\t\t\t\ttemp = this.load(addr) & 0xff;\r\n\t\t\t\tthis.F_CARRY = temp & 1;\r\n\t\t\t\ttemp >>= 1;\r\n\t\t\t\tthis.write(addr, temp);\r\n\r\n\t\t\t\t// Then XOR with the accumulator.\r\n\t\t\t\tthis.REG_ACC = this.REG_ACC ^ temp;\r\n\t\t\t\tthis.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n\t\t\t\tthis.F_ZERO = this.REG_ACC;\r\n\t\t\t\tif (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 68: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * SKB *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Do nothing\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 69: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * IGN *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\t// Do nothing but load.\r\n\t\t\t\t// TODO: Properly implement the double-reads.\r\n\t\t\t\tthis.load(addr);\r\n\t\t\t\tif (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tdefault: {\r\n\t\t\t\t// *******\r\n\t\t\t\t// * ??? *\r\n\t\t\t\t// *******\r\n\r\n\t\t\t\tthis.nes.stop();\r\n\t\t\t\tthis.nes.crashMessage =\r\n\t\t\t\t\t\"Game crashed, invalid opcode at address $\" + opaddr.toString(16);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} // end of switch\r\n\r\n\t\treturn cycleCount;\r\n\t},\r\n\r\n\tload: function(addr) {\r\n\t\tif (addr < 0x2000) {\r\n\t\t\treturn this.mem[addr & 0x7ff];\r\n\t\t} else {\r\n\t\t\treturn this.nes.mmap.load(addr);\r\n\t\t}\r\n\t},\r\n\r\n\tload16bit: function(addr) {\r\n\t\tif (addr < 0x1fff) {\r\n\t\t\treturn this.mem[addr & 0x7ff] | (this.mem[(addr + 1) & 0x7ff] << 8);\r\n\t\t} else {\r\n\t\t\treturn this.nes.mmap.load(addr) | (this.nes.mmap.load(addr + 1) << 8);\r\n\t\t}\r\n\t},\r\n\r\n\twrite: function(addr, val) {\r\n\t\tif (addr < 0x2000) {\r\n\t\t\tthis.mem[addr & 0x7ff] = val;\r\n\t\t} else {\r\n\t\t\tthis.nes.mmap.write(addr, val);\r\n\t\t}\r\n\t},\r\n\r\n\trequestIrq: function(type) {\r\n\t\tif (this.irqRequested) {\r\n\t\t\tif (type === this.IRQ_NORMAL) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// console.log(\"too fast irqs. type=\"+type);\r\n\t\t}\r\n\t\tthis.irqRequested = true;\r\n\t\tthis.irqType = type;\r\n\t},\r\n\r\n\tpush: function(value) {\r\n\t\tthis.nes.mmap.write(this.REG_SP, value);\r\n\t\tthis.REG_SP--;\r\n\t\tthis.REG_SP = 0x0100 | (this.REG_SP & 0xff);\r\n\t},\r\n\r\n\tstackWrap: function() {\r\n\t\tthis.REG_SP = 0x0100 | (this.REG_SP & 0xff);\r\n\t},\r\n\r\n\tpull: function() {\r\n\t\tthis.REG_SP++;\r\n\t\tthis.REG_SP = 0x0100 | (this.REG_SP & 0xff);\r\n\t\treturn this.nes.mmap.load(this.REG_SP);\r\n\t},\r\n\r\n\tpageCrossed: function(addr1, addr2) {\r\n\t\treturn (addr1 & 0xff00) !== (addr2 & 0xff00);\r\n\t},\r\n\r\n\thaltCycles: function(cycles) {\r\n\t\tthis.cyclesToHalt += cycles;\r\n\t},\r\n\r\n\tdoNonMaskableInterrupt: function(status) {\r\n\t\tif (null === this.nes.mmap) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif ((this.nes.mmap.load(0x2000) & 128) !== 0) {\r\n\t\t\t// Check whether VBlank Interrupts are enabled\r\n\r\n\t\t\tthis.REG_PC_NEW++;\r\n\t\t\tthis.push((this.REG_PC_NEW >> 8) & 0xff);\r\n\t\t\tthis.push(this.REG_PC_NEW & 0xff);\r\n\t\t\t//this.F_INTERRUPT_NEW = 1;\r\n\t\t\tthis.push(status);\r\n\r\n\t\t\tthis.REG_PC_NEW =\r\n\t\t\t\tthis.nes.mmap.load(0xfffa) | (this.nes.mmap.load(0xfffb) << 8);\r\n\t\t\tthis.REG_PC_NEW--;\r\n\t\t}\r\n\t},\r\n\r\n\tdoResetInterrupt: function() {\r\n\t\tthis.REG_PC_NEW =\r\n\t\t\tthis.nes.mmap.load(0xfffc) | (this.nes.mmap.load(0xfffd) << 8);\r\n\t\tthis.REG_PC_NEW--;\r\n\t},\r\n\r\n\tdoIrq: function(status) {\r\n\t\tthis.REG_PC_NEW++;\r\n\t\tthis.push((this.REG_PC_NEW >> 8) & 0xff);\r\n\t\tthis.push(this.REG_PC_NEW & 0xff);\r\n\t\tthis.push(status);\r\n\t\tthis.F_INTERRUPT_NEW = 1;\r\n\t\tthis.F_BRK_NEW = 0;\r\n\r\n\t\tthis.REG_PC_NEW =\r\n\t\t\tthis.nes.mmap.load(0xfffe) | (this.nes.mmap.load(0xffff) << 8);\r\n\t\tthis.REG_PC_NEW--;\r\n\t},\r\n\r\n\tgetStatus: function() {\r\n\t\treturn (\r\n\t\t\tthis.F_CARRY |\r\n\t\t\t(this.F_ZERO << 1) |\r\n\t\t\t(this.F_INTERRUPT << 2) |\r\n\t\t\t(this.F_DECIMAL << 3) |\r\n\t\t\t(this.F_BRK << 4) |\r\n\t\t\t(this.F_NOTUSED << 5) |\r\n\t\t\t(this.F_OVERFLOW << 6) |\r\n\t\t\t(this.F_SIGN << 7)\r\n\t\t);\r\n\t},\r\n\r\n\tsetStatus: function(st) {\r\n\t\tthis.F_CARRY = st & 1;\r\n\t\tthis.F_ZERO = (st >> 1) & 1;\r\n\t\tthis.F_INTERRUPT = (st >> 2) & 1;\r\n\t\tthis.F_DECIMAL = (st >> 3) & 1;\r\n\t\tthis.F_BRK = (st >> 4) & 1;\r\n\t\tthis.F_NOTUSED = (st >> 5) & 1;\r\n\t\tthis.F_OVERFLOW = (st >> 6) & 1;\r\n\t\tthis.F_SIGN = (st >> 7) & 1;\r\n\t},\r\n\r\n\tJSON_PROPERTIES: [\r\n\t\t\"mem\",\r\n\t\t\"cyclesToHalt\",\r\n\t\t\"irqRequested\",\r\n\t\t\"irqType\",\r\n\t\t// Registers\r\n\t\t\"REG_ACC\",\r\n\t\t\"REG_X\",\r\n\t\t\"REG_Y\",\r\n\t\t\"REG_SP\",\r\n\t\t\"REG_PC\",\r\n\t\t\"REG_PC_NEW\",\r\n\t\t\"REG_STATUS\",\r\n\t\t// Status\r\n\t\t\"F_CARRY\",\r\n\t\t\"F_DECIMAL\",\r\n\t\t\"F_INTERRUPT\",\r\n\t\t\"F_INTERRUPT_NEW\",\r\n\t\t\"F_OVERFLOW\",\r\n\t\t\"F_SIGN\",\r\n\t\t\"F_ZERO\",\r\n\t\t\"F_NOTUSED\",\r\n\t\t\"F_NOTUSED_NEW\",\r\n\t\t\"F_BRK\",\r\n\t\t\"F_BRK_NEW\",\r\n\t],\r\n\r\n\ttoJSON: function() {\r\n\t\treturn utils.toJSON(this);\r\n\t},\r\n\r\n\tfromJSON: function(s) {\r\n\t\tutils.fromJSON(this, s);\r\n\t},\r\n};\r\n\r\n// Generates and provides an array of details about instructions\r\nlet OpData = function() {\r\n\tthis.opdata = new Array(256);\r\n\r\n\t// Set all to invalid instruction (to detect crashes):\r\n\tfor (let i = 0; i < 256; i++) this.opdata[i] = 0xff;\r\n\r\n\t// Now fill in all valid opcodes:\r\n\r\n\t// ADC:\r\n\tthis.setOp(this.INS_ADC, 0x69, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_ADC, 0x65, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_ADC, 0x75, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_ADC, 0x6d, this.ADDR_ABS, 3, 4);\r\n\tthis.setOp(this.INS_ADC, 0x7d, this.ADDR_ABSX, 3, 4);\r\n\tthis.setOp(this.INS_ADC, 0x79, this.ADDR_ABSY, 3, 4);\r\n\tthis.setOp(this.INS_ADC, 0x61, this.ADDR_PREIDXIND, 2, 6);\r\n\tthis.setOp(this.INS_ADC, 0x71, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n\t// AND:\r\n\tthis.setOp(this.INS_AND, 0x29, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_AND, 0x25, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_AND, 0x35, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_AND, 0x2d, this.ADDR_ABS, 3, 4);\r\n\tthis.setOp(this.INS_AND, 0x3d, this.ADDR_ABSX, 3, 4);\r\n\tthis.setOp(this.INS_AND, 0x39, this.ADDR_ABSY, 3, 4);\r\n\tthis.setOp(this.INS_AND, 0x21, this.ADDR_PREIDXIND, 2, 6);\r\n\tthis.setOp(this.INS_AND, 0x31, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n\t// ASL:\r\n\tthis.setOp(this.INS_ASL, 0x0a, this.ADDR_ACC, 1, 2);\r\n\tthis.setOp(this.INS_ASL, 0x06, this.ADDR_ZP, 2, 5);\r\n\tthis.setOp(this.INS_ASL, 0x16, this.ADDR_ZPX, 2, 6);\r\n\tthis.setOp(this.INS_ASL, 0x0e, this.ADDR_ABS, 3, 6);\r\n\tthis.setOp(this.INS_ASL, 0x1e, this.ADDR_ABSX, 3, 7);\r\n\r\n\t// BCC:\r\n\tthis.setOp(this.INS_BCC, 0x90, this.ADDR_REL, 2, 2);\r\n\r\n\t// BCS:\r\n\tthis.setOp(this.INS_BCS, 0xb0, this.ADDR_REL, 2, 2);\r\n\r\n\t// BEQ:\r\n\tthis.setOp(this.INS_BEQ, 0xf0, this.ADDR_REL, 2, 2);\r\n\r\n\t// BIT:\r\n\tthis.setOp(this.INS_BIT, 0x24, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_BIT, 0x2c, this.ADDR_ABS, 3, 4);\r\n\r\n\t// BMI:\r\n\tthis.setOp(this.INS_BMI, 0x30, this.ADDR_REL, 2, 2);\r\n\r\n\t// BNE:\r\n\tthis.setOp(this.INS_BNE, 0xd0, this.ADDR_REL, 2, 2);\r\n\r\n\t// BPL:\r\n\tthis.setOp(this.INS_BPL, 0x10, this.ADDR_REL, 2, 2);\r\n\r\n\t// BRK:\r\n\tthis.setOp(this.INS_BRK, 0x00, this.ADDR_IMP, 1, 7);\r\n\r\n\t// BVC:\r\n\tthis.setOp(this.INS_BVC, 0x50, this.ADDR_REL, 2, 2);\r\n\r\n\t// BVS:\r\n\tthis.setOp(this.INS_BVS, 0x70, this.ADDR_REL, 2, 2);\r\n\r\n\t// CLC:\r\n\tthis.setOp(this.INS_CLC, 0x18, this.ADDR_IMP, 1, 2);\r\n\r\n\t// CLD:\r\n\tthis.setOp(this.INS_CLD, 0xd8, this.ADDR_IMP, 1, 2);\r\n\r\n\t// CLI:\r\n\tthis.setOp(this.INS_CLI, 0x58, this.ADDR_IMP, 1, 2);\r\n\r\n\t// CLV:\r\n\tthis.setOp(this.INS_CLV, 0xb8, this.ADDR_IMP, 1, 2);\r\n\r\n\t// CMP:\r\n\tthis.setOp(this.INS_CMP, 0xc9, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_CMP, 0xc5, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_CMP, 0xd5, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_CMP, 0xcd, this.ADDR_ABS, 3, 4);\r\n\tthis.setOp(this.INS_CMP, 0xdd, this.ADDR_ABSX, 3, 4);\r\n\tthis.setOp(this.INS_CMP, 0xd9, this.ADDR_ABSY, 3, 4);\r\n\tthis.setOp(this.INS_CMP, 0xc1, this.ADDR_PREIDXIND, 2, 6);\r\n\tthis.setOp(this.INS_CMP, 0xd1, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n\t// CPX:\r\n\tthis.setOp(this.INS_CPX, 0xe0, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_CPX, 0xe4, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_CPX, 0xec, this.ADDR_ABS, 3, 4);\r\n\r\n\t// CPY:\r\n\tthis.setOp(this.INS_CPY, 0xc0, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_CPY, 0xc4, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_CPY, 0xcc, this.ADDR_ABS, 3, 4);\r\n\r\n\t// DEC:\r\n\tthis.setOp(this.INS_DEC, 0xc6, this.ADDR_ZP, 2, 5);\r\n\tthis.setOp(this.INS_DEC, 0xd6, this.ADDR_ZPX, 2, 6);\r\n\tthis.setOp(this.INS_DEC, 0xce, this.ADDR_ABS, 3, 6);\r\n\tthis.setOp(this.INS_DEC, 0xde, this.ADDR_ABSX, 3, 7);\r\n\r\n\t// DEX:\r\n\tthis.setOp(this.INS_DEX, 0xca, this.ADDR_IMP, 1, 2);\r\n\r\n\t// DEY:\r\n\tthis.setOp(this.INS_DEY, 0x88, this.ADDR_IMP, 1, 2);\r\n\r\n\t// EOR:\r\n\tthis.setOp(this.INS_EOR, 0x49, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_EOR, 0x45, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_EOR, 0x55, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_EOR, 0x4d, this.ADDR_ABS, 3, 4);\r\n\tthis.setOp(this.INS_EOR, 0x5d, this.ADDR_ABSX, 3, 4);\r\n\tthis.setOp(this.INS_EOR, 0x59, this.ADDR_ABSY, 3, 4);\r\n\tthis.setOp(this.INS_EOR, 0x41, this.ADDR_PREIDXIND, 2, 6);\r\n\tthis.setOp(this.INS_EOR, 0x51, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n\t// INC:\r\n\tthis.setOp(this.INS_INC, 0xe6, this.ADDR_ZP, 2, 5);\r\n\tthis.setOp(this.INS_INC, 0xf6, this.ADDR_ZPX, 2, 6);\r\n\tthis.setOp(this.INS_INC, 0xee, this.ADDR_ABS, 3, 6);\r\n\tthis.setOp(this.INS_INC, 0xfe, this.ADDR_ABSX, 3, 7);\r\n\r\n\t// INX:\r\n\tthis.setOp(this.INS_INX, 0xe8, this.ADDR_IMP, 1, 2);\r\n\r\n\t// INY:\r\n\tthis.setOp(this.INS_INY, 0xc8, this.ADDR_IMP, 1, 2);\r\n\r\n\t// JMP:\r\n\tthis.setOp(this.INS_JMP, 0x4c, this.ADDR_ABS, 3, 3);\r\n\tthis.setOp(this.INS_JMP, 0x6c, this.ADDR_INDABS, 3, 5);\r\n\r\n\t// JSR:\r\n\tthis.setOp(this.INS_JSR, 0x20, this.ADDR_ABS, 3, 6);\r\n\r\n\t// LDA:\r\n\tthis.setOp(this.INS_LDA, 0xa9, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_LDA, 0xa5, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_LDA, 0xb5, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_LDA, 0xad, this.ADDR_ABS, 3, 4);\r\n\tthis.setOp(this.INS_LDA, 0xbd, this.ADDR_ABSX, 3, 4);\r\n\tthis.setOp(this.INS_LDA, 0xb9, this.ADDR_ABSY, 3, 4);\r\n\tthis.setOp(this.INS_LDA, 0xa1, this.ADDR_PREIDXIND, 2, 6);\r\n\tthis.setOp(this.INS_LDA, 0xb1, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n\t// LDX:\r\n\tthis.setOp(this.INS_LDX, 0xa2, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_LDX, 0xa6, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_LDX, 0xb6, this.ADDR_ZPY, 2, 4);\r\n\tthis.setOp(this.INS_LDX, 0xae, this.ADDR_ABS, 3, 4);\r\n\tthis.setOp(this.INS_LDX, 0xbe, this.ADDR_ABSY, 3, 4);\r\n\r\n\t// LDY:\r\n\tthis.setOp(this.INS_LDY, 0xa0, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_LDY, 0xa4, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_LDY, 0xb4, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_LDY, 0xac, this.ADDR_ABS, 3, 4);\r\n\tthis.setOp(this.INS_LDY, 0xbc, this.ADDR_ABSX, 3, 4);\r\n\r\n\t// LSR:\r\n\tthis.setOp(this.INS_LSR, 0x4a, this.ADDR_ACC, 1, 2);\r\n\tthis.setOp(this.INS_LSR, 0x46, this.ADDR_ZP, 2, 5);\r\n\tthis.setOp(this.INS_LSR, 0x56, this.ADDR_ZPX, 2, 6);\r\n\tthis.setOp(this.INS_LSR, 0x4e, this.ADDR_ABS, 3, 6);\r\n\tthis.setOp(this.INS_LSR, 0x5e, this.ADDR_ABSX, 3, 7);\r\n\r\n\t// NOP:\r\n\tthis.setOp(this.INS_NOP, 0x1a, this.ADDR_IMP, 1, 2);\r\n\tthis.setOp(this.INS_NOP, 0x3a, this.ADDR_IMP, 1, 2);\r\n\tthis.setOp(this.INS_NOP, 0x5a, this.ADDR_IMP, 1, 2);\r\n\tthis.setOp(this.INS_NOP, 0x7a, this.ADDR_IMP, 1, 2);\r\n\tthis.setOp(this.INS_NOP, 0xda, this.ADDR_IMP, 1, 2);\r\n\tthis.setOp(this.INS_NOP, 0xea, this.ADDR_IMP, 1, 2);\r\n\tthis.setOp(this.INS_NOP, 0xfa, this.ADDR_IMP, 1, 2);\r\n\r\n\t// ORA:\r\n\tthis.setOp(this.INS_ORA, 0x09, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_ORA, 0x05, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_ORA, 0x15, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_ORA, 0x0d, this.ADDR_ABS, 3, 4);\r\n\tthis.setOp(this.INS_ORA, 0x1d, this.ADDR_ABSX, 3, 4);\r\n\tthis.setOp(this.INS_ORA, 0x19, this.ADDR_ABSY, 3, 4);\r\n\tthis.setOp(this.INS_ORA, 0x01, this.ADDR_PREIDXIND, 2, 6);\r\n\tthis.setOp(this.INS_ORA, 0x11, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n\t// PHA:\r\n\tthis.setOp(this.INS_PHA, 0x48, this.ADDR_IMP, 1, 3);\r\n\r\n\t// PHP:\r\n\tthis.setOp(this.INS_PHP, 0x08, this.ADDR_IMP, 1, 3);\r\n\r\n\t// PLA:\r\n\tthis.setOp(this.INS_PLA, 0x68, this.ADDR_IMP, 1, 4);\r\n\r\n\t// PLP:\r\n\tthis.setOp(this.INS_PLP, 0x28, this.ADDR_IMP, 1, 4);\r\n\r\n\t// ROL:\r\n\tthis.setOp(this.INS_ROL, 0x2a, this.ADDR_ACC, 1, 2);\r\n\tthis.setOp(this.INS_ROL, 0x26, this.ADDR_ZP, 2, 5);\r\n\tthis.setOp(this.INS_ROL, 0x36, this.ADDR_ZPX, 2, 6);\r\n\tthis.setOp(this.INS_ROL, 0x2e, this.ADDR_ABS, 3, 6);\r\n\tthis.setOp(this.INS_ROL, 0x3e, this.ADDR_ABSX, 3, 7);\r\n\r\n\t// ROR:\r\n\tthis.setOp(this.INS_ROR, 0x6a, this.ADDR_ACC, 1, 2);\r\n\tthis.setOp(this.INS_ROR, 0x66, this.ADDR_ZP, 2, 5);\r\n\tthis.setOp(this.INS_ROR, 0x76, this.ADDR_ZPX, 2, 6);\r\n\tthis.setOp(this.INS_ROR, 0x6e, this.ADDR_ABS, 3, 6);\r\n\tthis.setOp(this.INS_ROR, 0x7e, this.ADDR_ABSX, 3, 7);\r\n\r\n\t// RTI:\r\n\tthis.setOp(this.INS_RTI, 0x40, this.ADDR_IMP, 1, 6);\r\n\r\n\t// RTS:\r\n\tthis.setOp(this.INS_RTS, 0x60, this.ADDR_IMP, 1, 6);\r\n\r\n\t// SBC:\r\n\tthis.setOp(this.INS_SBC, 0xe9, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_SBC, 0xe5, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_SBC, 0xf5, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_SBC, 0xed, this.ADDR_ABS, 3, 4);\r\n\tthis.setOp(this.INS_SBC, 0xfd, this.ADDR_ABSX, 3, 4);\r\n\tthis.setOp(this.INS_SBC, 0xf9, this.ADDR_ABSY, 3, 4);\r\n\tthis.setOp(this.INS_SBC, 0xe1, this.ADDR_PREIDXIND, 2, 6);\r\n\tthis.setOp(this.INS_SBC, 0xf1, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n\t// SEC:\r\n\tthis.setOp(this.INS_SEC, 0x38, this.ADDR_IMP, 1, 2);\r\n\r\n\t// SED:\r\n\tthis.setOp(this.INS_SED, 0xf8, this.ADDR_IMP, 1, 2);\r\n\r\n\t// SEI:\r\n\tthis.setOp(this.INS_SEI, 0x78, this.ADDR_IMP, 1, 2);\r\n\r\n\t// STA:\r\n\tthis.setOp(this.INS_STA, 0x85, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_STA, 0x95, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_STA, 0x8d, this.ADDR_ABS, 3, 4);\r\n\tthis.setOp(this.INS_STA, 0x9d, this.ADDR_ABSX, 3, 5);\r\n\tthis.setOp(this.INS_STA, 0x99, this.ADDR_ABSY, 3, 5);\r\n\tthis.setOp(this.INS_STA, 0x81, this.ADDR_PREIDXIND, 2, 6);\r\n\tthis.setOp(this.INS_STA, 0x91, this.ADDR_POSTIDXIND, 2, 6);\r\n\r\n\t// STX:\r\n\tthis.setOp(this.INS_STX, 0x86, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_STX, 0x96, this.ADDR_ZPY, 2, 4);\r\n\tthis.setOp(this.INS_STX, 0x8e, this.ADDR_ABS, 3, 4);\r\n\r\n\t// STY:\r\n\tthis.setOp(this.INS_STY, 0x84, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_STY, 0x94, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_STY, 0x8c, this.ADDR_ABS, 3, 4);\r\n\r\n\t// TAX:\r\n\tthis.setOp(this.INS_TAX, 0xaa, this.ADDR_IMP, 1, 2);\r\n\r\n\t// TAY:\r\n\tthis.setOp(this.INS_TAY, 0xa8, this.ADDR_IMP, 1, 2);\r\n\r\n\t// TSX:\r\n\tthis.setOp(this.INS_TSX, 0xba, this.ADDR_IMP, 1, 2);\r\n\r\n\t// TXA:\r\n\tthis.setOp(this.INS_TXA, 0x8a, this.ADDR_IMP, 1, 2);\r\n\r\n\t// TXS:\r\n\tthis.setOp(this.INS_TXS, 0x9a, this.ADDR_IMP, 1, 2);\r\n\r\n\t// TYA:\r\n\tthis.setOp(this.INS_TYA, 0x98, this.ADDR_IMP, 1, 2);\r\n\r\n\t// ALR:\r\n\tthis.setOp(this.INS_ALR, 0x4b, this.ADDR_IMM, 2, 2);\r\n\r\n\t// ANC:\r\n\tthis.setOp(this.INS_ANC, 0x0b, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_ANC, 0x2b, this.ADDR_IMM, 2, 2);\r\n\r\n\t// ARR:\r\n\tthis.setOp(this.INS_ARR, 0x6b, this.ADDR_IMM, 2, 2);\r\n\r\n\t// AXS:\r\n\tthis.setOp(this.INS_AXS, 0xcb, this.ADDR_IMM, 2, 2);\r\n\r\n\t// LAX:\r\n\tthis.setOp(this.INS_LAX, 0xa3, this.ADDR_PREIDXIND, 2, 6);\r\n\tthis.setOp(this.INS_LAX, 0xa7, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_LAX, 0xaf, this.ADDR_ABS, 3, 4);\r\n\tthis.setOp(this.INS_LAX, 0xb3, this.ADDR_POSTIDXIND, 2, 5);\r\n\tthis.setOp(this.INS_LAX, 0xb7, this.ADDR_ZPY, 2, 4);\r\n\tthis.setOp(this.INS_LAX, 0xbf, this.ADDR_ABSY, 3, 4);\r\n\r\n\t// SAX:\r\n\tthis.setOp(this.INS_SAX, 0x83, this.ADDR_PREIDXIND, 2, 6);\r\n\tthis.setOp(this.INS_SAX, 0x87, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_SAX, 0x8f, this.ADDR_ABS, 3, 4);\r\n\tthis.setOp(this.INS_SAX, 0x97, this.ADDR_ZPY, 2, 4);\r\n\r\n\t// DCP:\r\n\tthis.setOp(this.INS_DCP, 0xc3, this.ADDR_PREIDXIND, 2, 8);\r\n\tthis.setOp(this.INS_DCP, 0xc7, this.ADDR_ZP, 2, 5);\r\n\tthis.setOp(this.INS_DCP, 0xcf, this.ADDR_ABS, 3, 6);\r\n\tthis.setOp(this.INS_DCP, 0xd3, this.ADDR_POSTIDXIND, 2, 8);\r\n\tthis.setOp(this.INS_DCP, 0xd7, this.ADDR_ZPX, 2, 6);\r\n\tthis.setOp(this.INS_DCP, 0xdb, this.ADDR_ABSY, 3, 7);\r\n\tthis.setOp(this.INS_DCP, 0xdf, this.ADDR_ABSX, 3, 7);\r\n\r\n\t// ISC:\r\n\tthis.setOp(this.INS_ISC, 0xe3, this.ADDR_PREIDXIND, 2, 8);\r\n\tthis.setOp(this.INS_ISC, 0xe7, this.ADDR_ZP, 2, 5);\r\n\tthis.setOp(this.INS_ISC, 0xef, this.ADDR_ABS, 3, 6);\r\n\tthis.setOp(this.INS_ISC, 0xf3, this.ADDR_POSTIDXIND, 2, 8);\r\n\tthis.setOp(this.INS_ISC, 0xf7, this.ADDR_ZPX, 2, 6);\r\n\tthis.setOp(this.INS_ISC, 0xfb, this.ADDR_ABSY, 3, 7);\r\n\tthis.setOp(this.INS_ISC, 0xff, this.ADDR_ABSX, 3, 7);\r\n\r\n\t// RLA:\r\n\tthis.setOp(this.INS_RLA, 0x23, this.ADDR_PREIDXIND, 2, 8);\r\n\tthis.setOp(this.INS_RLA, 0x27, this.ADDR_ZP, 2, 5);\r\n\tthis.setOp(this.INS_RLA, 0x2f, this.ADDR_ABS, 3, 6);\r\n\tthis.setOp(this.INS_RLA, 0x33, this.ADDR_POSTIDXIND, 2, 8);\r\n\tthis.setOp(this.INS_RLA, 0x37, this.ADDR_ZPX, 2, 6);\r\n\tthis.setOp(this.INS_RLA, 0x3b, this.ADDR_ABSY, 3, 7);\r\n\tthis.setOp(this.INS_RLA, 0x3f, this.ADDR_ABSX, 3, 7);\r\n\r\n\t// RRA:\r\n\tthis.setOp(this.INS_RRA, 0x63, this.ADDR_PREIDXIND, 2, 8);\r\n\tthis.setOp(this.INS_RRA, 0x67, this.ADDR_ZP, 2, 5);\r\n\tthis.setOp(this.INS_RRA, 0x6f, this.ADDR_ABS, 3, 6);\r\n\tthis.setOp(this.INS_RRA, 0x73, this.ADDR_POSTIDXIND, 2, 8);\r\n\tthis.setOp(this.INS_RRA, 0x77, this.ADDR_ZPX, 2, 6);\r\n\tthis.setOp(this.INS_RRA, 0x7b, this.ADDR_ABSY, 3, 7);\r\n\tthis.setOp(this.INS_RRA, 0x7f, this.ADDR_ABSX, 3, 7);\r\n\r\n\t// SLO:\r\n\tthis.setOp(this.INS_SLO, 0x03, this.ADDR_PREIDXIND, 2, 8);\r\n\tthis.setOp(this.INS_SLO, 0x07, this.ADDR_ZP, 2, 5);\r\n\tthis.setOp(this.INS_SLO, 0x0f, this.ADDR_ABS, 3, 6);\r\n\tthis.setOp(this.INS_SLO, 0x13, this.ADDR_POSTIDXIND, 2, 8);\r\n\tthis.setOp(this.INS_SLO, 0x17, this.ADDR_ZPX, 2, 6);\r\n\tthis.setOp(this.INS_SLO, 0x1b, this.ADDR_ABSY, 3, 7);\r\n\tthis.setOp(this.INS_SLO, 0x1f, this.ADDR_ABSX, 3, 7);\r\n\r\n\t// SRE:\r\n\tthis.setOp(this.INS_SRE, 0x43, this.ADDR_PREIDXIND, 2, 8);\r\n\tthis.setOp(this.INS_SRE, 0x47, this.ADDR_ZP, 2, 5);\r\n\tthis.setOp(this.INS_SRE, 0x4f, this.ADDR_ABS, 3, 6);\r\n\tthis.setOp(this.INS_SRE, 0x53, this.ADDR_POSTIDXIND, 2, 8);\r\n\tthis.setOp(this.INS_SRE, 0x57, this.ADDR_ZPX, 2, 6);\r\n\tthis.setOp(this.INS_SRE, 0x5b, this.ADDR_ABSY, 3, 7);\r\n\tthis.setOp(this.INS_SRE, 0x5f, this.ADDR_ABSX, 3, 7);\r\n\r\n\t// SKB:\r\n\tthis.setOp(this.INS_SKB, 0x80, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_SKB, 0x82, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_SKB, 0x89, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_SKB, 0xc2, this.ADDR_IMM, 2, 2);\r\n\tthis.setOp(this.INS_SKB, 0xe2, this.ADDR_IMM, 2, 2);\r\n\r\n\t// SKB:\r\n\tthis.setOp(this.INS_IGN, 0x0c, this.ADDR_ABS, 3, 4);\r\n\tthis.setOp(this.INS_IGN, 0x1c, this.ADDR_ABSX, 3, 4);\r\n\tthis.setOp(this.INS_IGN, 0x3c, this.ADDR_ABSX, 3, 4);\r\n\tthis.setOp(this.INS_IGN, 0x5c, this.ADDR_ABSX, 3, 4);\r\n\tthis.setOp(this.INS_IGN, 0x7c, this.ADDR_ABSX, 3, 4);\r\n\tthis.setOp(this.INS_IGN, 0xdc, this.ADDR_ABSX, 3, 4);\r\n\tthis.setOp(this.INS_IGN, 0xfc, this.ADDR_ABSX, 3, 4);\r\n\tthis.setOp(this.INS_IGN, 0x04, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_IGN, 0x44, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_IGN, 0x64, this.ADDR_ZP, 2, 3);\r\n\tthis.setOp(this.INS_IGN, 0x14, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_IGN, 0x34, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_IGN, 0x54, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_IGN, 0x74, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_IGN, 0xd4, this.ADDR_ZPX, 2, 4);\r\n\tthis.setOp(this.INS_IGN, 0xf4, this.ADDR_ZPX, 2, 4);\r\n\r\n\t// prettier-ignore\r\n\tthis.cycTable = new Array(\r\n\t\t/*0x00*/\r\n\t\t7, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 4, 4, 6, 6,\r\n\t\t/*0x10*/\r\n\t\t2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,\r\n\t\t/*0x20*/\r\n\t\t6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 4, 4, 6, 6,\r\n\t\t/*0x30*/\r\n\t\t2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,\r\n\t\t/*0x40*/\r\n\t\t6, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 3, 4, 6, 6,\r\n\t\t/*0x50*/\r\n\t\t2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,\r\n\t\t/*0x60*/\r\n\t\t6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 5, 4, 6, 6,\r\n\t\t/*0x70*/\r\n\t\t2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,\r\n\t\t/*0x80*/\r\n\t\t2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4,\r\n\t\t/*0x90*/\r\n\t\t2, 6, 2, 6, 4, 4, 4, 4, 2, 5, 2, 5, 5, 5, 5, 5,\r\n\t\t/*0xA0*/\r\n\t\t2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4,\r\n\t\t/*0xB0*/\r\n\t\t2, 5, 2, 5, 4, 4, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4,\r\n\t\t/*0xC0*/\r\n\t\t2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6,\r\n\t\t/*0xD0*/\r\n\t\t2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,\r\n\t\t/*0xE0*/\r\n\t\t2, 6, 3, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6,\r\n\t\t/*0xF0*/\r\n\t\t2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7\r\n\t);\r\n\r\n\tthis.instname = new Array(70);\r\n\r\n\t// Instruction Names:\r\n\tthis.instname[0] = \"ADC\";\r\n\tthis.instname[1] = \"AND\";\r\n\tthis.instname[2] = \"ASL\";\r\n\tthis.instname[3] = \"BCC\";\r\n\tthis.instname[4] = \"BCS\";\r\n\tthis.instname[5] = \"BEQ\";\r\n\tthis.instname[6] = \"BIT\";\r\n\tthis.instname[7] = \"BMI\";\r\n\tthis.instname[8] = \"BNE\";\r\n\tthis.instname[9] = \"BPL\";\r\n\tthis.instname[10] = \"BRK\";\r\n\tthis.instname[11] = \"BVC\";\r\n\tthis.instname[12] = \"BVS\";\r\n\tthis.instname[13] = \"CLC\";\r\n\tthis.instname[14] = \"CLD\";\r\n\tthis.instname[15] = \"CLI\";\r\n\tthis.instname[16] = \"CLV\";\r\n\tthis.instname[17] = \"CMP\";\r\n\tthis.instname[18] = \"CPX\";\r\n\tthis.instname[19] = \"CPY\";\r\n\tthis.instname[20] = \"DEC\";\r\n\tthis.instname[21] = \"DEX\";\r\n\tthis.instname[22] = \"DEY\";\r\n\tthis.instname[23] = \"EOR\";\r\n\tthis.instname[24] = \"INC\";\r\n\tthis.instname[25] = \"INX\";\r\n\tthis.instname[26] = \"INY\";\r\n\tthis.instname[27] = \"JMP\";\r\n\tthis.instname[28] = \"JSR\";\r\n\tthis.instname[29] = \"LDA\";\r\n\tthis.instname[30] = \"LDX\";\r\n\tthis.instname[31] = \"LDY\";\r\n\tthis.instname[32] = \"LSR\";\r\n\tthis.instname[33] = \"NOP\";\r\n\tthis.instname[34] = \"ORA\";\r\n\tthis.instname[35] = \"PHA\";\r\n\tthis.instname[36] = \"PHP\";\r\n\tthis.instname[37] = \"PLA\";\r\n\tthis.instname[38] = \"PLP\";\r\n\tthis.instname[39] = \"ROL\";\r\n\tthis.instname[40] = \"ROR\";\r\n\tthis.instname[41] = \"RTI\";\r\n\tthis.instname[42] = \"RTS\";\r\n\tthis.instname[43] = \"SBC\";\r\n\tthis.instname[44] = \"SEC\";\r\n\tthis.instname[45] = \"SED\";\r\n\tthis.instname[46] = \"SEI\";\r\n\tthis.instname[47] = \"STA\";\r\n\tthis.instname[48] = \"STX\";\r\n\tthis.instname[49] = \"STY\";\r\n\tthis.instname[50] = \"TAX\";\r\n\tthis.instname[51] = \"TAY\";\r\n\tthis.instname[52] = \"TSX\";\r\n\tthis.instname[53] = \"TXA\";\r\n\tthis.instname[54] = \"TXS\";\r\n\tthis.instname[55] = \"TYA\";\r\n\tthis.instname[56] = \"ALR\";\r\n\tthis.instname[57] = \"ANC\";\r\n\tthis.instname[58] = \"ARR\";\r\n\tthis.instname[59] = \"AXS\";\r\n\tthis.instname[60] = \"LAX\";\r\n\tthis.instname[61] = \"SAX\";\r\n\tthis.instname[62] = \"DCP\";\r\n\tthis.instname[63] = \"ISC\";\r\n\tthis.instname[64] = \"RLA\";\r\n\tthis.instname[65] = \"RRA\";\r\n\tthis.instname[66] = \"SLO\";\r\n\tthis.instname[67] = \"SRE\";\r\n\tthis.instname[68] = \"SKB\";\r\n\tthis.instname[69] = \"IGN\";\r\n\r\n\tthis.addrDesc = new Array(\r\n\t\t\"Zero Page           \",\r\n\t\t\"Relative            \",\r\n\t\t\"Implied             \",\r\n\t\t\"Absolute            \",\r\n\t\t\"Accumulator         \",\r\n\t\t\"Immediate           \",\r\n\t\t\"Zero Page,X         \",\r\n\t\t\"Zero Page,Y         \",\r\n\t\t\"Absolute,X          \",\r\n\t\t\"Absolute,Y          \",\r\n\t\t\"Preindexed Indirect \",\r\n\t\t\"Postindexed Indirect\",\r\n\t\t\"Indirect Absolute   \"\r\n\t);\r\n};\r\n\r\nOpData.prototype = {\r\n\tINS_ADC: 0,\r\n\tINS_AND: 1,\r\n\tINS_ASL: 2,\r\n\r\n\tINS_BCC: 3,\r\n\tINS_BCS: 4,\r\n\tINS_BEQ: 5,\r\n\tINS_BIT: 6,\r\n\tINS_BMI: 7,\r\n\tINS_BNE: 8,\r\n\tINS_BPL: 9,\r\n\tINS_BRK: 10,\r\n\tINS_BVC: 11,\r\n\tINS_BVS: 12,\r\n\r\n\tINS_CLC: 13,\r\n\tINS_CLD: 14,\r\n\tINS_CLI: 15,\r\n\tINS_CLV: 16,\r\n\tINS_CMP: 17,\r\n\tINS_CPX: 18,\r\n\tINS_CPY: 19,\r\n\r\n\tINS_DEC: 20,\r\n\tINS_DEX: 21,\r\n\tINS_DEY: 22,\r\n\r\n\tINS_EOR: 23,\r\n\r\n\tINS_INC: 24,\r\n\tINS_INX: 25,\r\n\tINS_INY: 26,\r\n\r\n\tINS_JMP: 27,\r\n\tINS_JSR: 28,\r\n\r\n\tINS_LDA: 29,\r\n\tINS_LDX: 30,\r\n\tINS_LDY: 31,\r\n\tINS_LSR: 32,\r\n\r\n\tINS_NOP: 33,\r\n\r\n\tINS_ORA: 34,\r\n\r\n\tINS_PHA: 35,\r\n\tINS_PHP: 36,\r\n\tINS_PLA: 37,\r\n\tINS_PLP: 38,\r\n\r\n\tINS_ROL: 39,\r\n\tINS_ROR: 40,\r\n\tINS_RTI: 41,\r\n\tINS_RTS: 42,\r\n\r\n\tINS_SBC: 43,\r\n\tINS_SEC: 44,\r\n\tINS_SED: 45,\r\n\tINS_SEI: 46,\r\n\tINS_STA: 47,\r\n\tINS_STX: 48,\r\n\tINS_STY: 49,\r\n\r\n\tINS_TAX: 50,\r\n\tINS_TAY: 51,\r\n\tINS_TSX: 52,\r\n\tINS_TXA: 53,\r\n\tINS_TXS: 54,\r\n\tINS_TYA: 55,\r\n\r\n\tINS_ALR: 56,\r\n\tINS_ANC: 57,\r\n\tINS_ARR: 58,\r\n\tINS_AXS: 59,\r\n\tINS_LAX: 60,\r\n\tINS_SAX: 61,\r\n\tINS_DCP: 62,\r\n\tINS_ISC: 63,\r\n\tINS_RLA: 64,\r\n\tINS_RRA: 65,\r\n\tINS_SLO: 66,\r\n\tINS_SRE: 67,\r\n\tINS_SKB: 68,\r\n\tINS_IGN: 69,\r\n\r\n\tINS_DUMMY: 70, // dummy instruction used for 'halting' the processor some cycles\r\n\r\n\t// -------------------------------- //\r\n\r\n\t// Addressing modes:\r\n\tADDR_ZP: 0,\r\n\tADDR_REL: 1,\r\n\tADDR_IMP: 2,\r\n\tADDR_ABS: 3,\r\n\tADDR_ACC: 4,\r\n\tADDR_IMM: 5,\r\n\tADDR_ZPX: 6,\r\n\tADDR_ZPY: 7,\r\n\tADDR_ABSX: 8,\r\n\tADDR_ABSY: 9,\r\n\tADDR_PREIDXIND: 10,\r\n\tADDR_POSTIDXIND: 11,\r\n\tADDR_INDABS: 12,\r\n\r\n\tsetOp: function(inst, op, addr, size, cycles) {\r\n\t\tthis.opdata[op] =\r\n\t\t\t(inst & 0xff) |\r\n\t\t\t((addr & 0xff) << 8) |\r\n\t\t\t((size & 0xff) << 16) |\r\n\t\t\t((cycles & 0xff) << 24);\r\n\t},\r\n};\r\n\r\nmodule.exports = CPU;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/cpu.js\n// module id = 5\n// module chunks = 0 1","let Tile = require(\"./tile\");\r\nlet utils = require(\"./utils\");\r\n\r\nlet PPU = function(nes) {\r\n\tthis.nes = nes;\r\n\r\n\t// Keep Chrome happy\r\n\tthis.vramMem = null;\r\n\tthis.spriteMem = null;\r\n\tthis.vramAddress = null;\r\n\tthis.vramTmpAddress = null;\r\n\tthis.vramBufferedReadValue = null;\r\n\tthis.firstWrite = null;\r\n\tthis.sramAddress = null;\r\n\tthis.currentMirroring = null;\r\n\tthis.requestEndFrame = null;\r\n\tthis.nmiOk = null;\r\n\tthis.dummyCycleToggle = null;\r\n\tthis.validTileData = null;\r\n\tthis.nmiCounter = null;\r\n\tthis.scanlineAlreadyRendered = null;\r\n\tthis.f_nmiOnVblank = null;\r\n\tthis.f_spriteSize = null;\r\n\tthis.f_bgPatternTable = null;\r\n\tthis.f_spPatternTable = null;\r\n\tthis.f_addrInc = null;\r\n\tthis.f_nTblAddress = null;\r\n\tthis.f_color = null;\r\n\tthis.f_spVisibility = null;\r\n\tthis.f_bgVisibility = null;\r\n\tthis.f_spClipping = null;\r\n\tthis.f_bgClipping = null;\r\n\tthis.f_dispType = null;\r\n\tthis.cntFV = null;\r\n\tthis.cntV = null;\r\n\tthis.cntH = null;\r\n\tthis.cntVT = null;\r\n\tthis.cntHT = null;\r\n\tthis.regFV = null;\r\n\tthis.regV = null;\r\n\tthis.regH = null;\r\n\tthis.regVT = null;\r\n\tthis.regHT = null;\r\n\tthis.regFH = null;\r\n\tthis.regS = null;\r\n\tthis.curNt = null;\r\n\tthis.attrib = null;\r\n\tthis.buffer = null;\r\n\tthis.bgbuffer = null;\r\n\tthis.pixrendered = null;\r\n\r\n\tthis.validTileData = null;\r\n\tthis.scantile = null;\r\n\tthis.scanline = null;\r\n\tthis.lastRenderedScanline = null;\r\n\tthis.curX = null;\r\n\tthis.sprX = null;\r\n\tthis.sprY = null;\r\n\tthis.sprTile = null;\r\n\tthis.sprCol = null;\r\n\tthis.vertFlip = null;\r\n\tthis.horiFlip = null;\r\n\tthis.bgPriority = null;\r\n\tthis.spr0HitX = null;\r\n\tthis.spr0HitY = null;\r\n\tthis.hitSpr0 = null;\r\n\tthis.sprPalette = null;\r\n\tthis.imgPalette = null;\r\n\tthis.ptTile = null;\r\n\tthis.ntable1 = null;\r\n\tthis.currentMirroring = null;\r\n\tthis.nameTable = null;\r\n\tthis.vramMirrorTable = null;\r\n\tthis.palTable = null;\r\n\r\n\t// Rendering Options:\r\n\tthis.showSpr0Hit = false;\r\n\tthis.clipToTvSizeH = false;\r\n\tthis.clipToTvSizeV = false;\r\n\r\n\tthis.reset();\r\n};\r\n\r\nPPU.prototype = {\r\n\t// Status flags:\r\n\tSTATUS_VRAMWRITE: 4,\r\n\tSTATUS_SLSPRITECOUNT: 5,\r\n\tSTATUS_SPRITE0HIT: 6,\r\n\tSTATUS_VBLANK: 7,\r\n\r\n\treset: function() {\r\n\t\tlet i;\r\n\r\n\t\t// Memory\r\n\t\tthis.vramMem = new Array(0x8000);\r\n\t\tthis.spriteMem = new Array(0x100);\r\n\t\tfor (i = 0; i < this.vramMem.length; i++) {\r\n\t\t\tthis.vramMem[i] = 0;\r\n\t\t}\r\n\t\tfor (i = 0; i < this.spriteMem.length; i++) {\r\n\t\t\tthis.spriteMem[i] = 0;\r\n\t\t}\r\n\r\n\t\t// VRAM I/O:\r\n\t\tthis.vramAddress = null;\r\n\t\tthis.vramTmpAddress = null;\r\n\t\tthis.vramBufferedReadValue = 0;\r\n\t\tthis.firstWrite = true; // VRAM/Scroll Hi/Lo latch\r\n\r\n\t\t// SPR-RAM I/O:\r\n\t\tthis.sramAddress = 0; // 8-bit only.\r\n\r\n\t\tthis.currentMirroring = -1;\r\n\t\tthis.requestEndFrame = false;\r\n\t\tthis.nmiOk = false;\r\n\t\tthis.dummyCycleToggle = false;\r\n\t\tthis.validTileData = false;\r\n\t\tthis.nmiCounter = 0;\r\n\t\tthis.scanlineAlreadyRendered = null;\r\n\r\n\t\t// Control Flags Register 1:\r\n\t\tthis.f_nmiOnVblank = 0; // NMI on VBlank. 0=disable, 1=enable\r\n\t\tthis.f_spriteSize = 0; // Sprite size. 0=8x8, 1=8x16\r\n\t\tthis.f_bgPatternTable = 0; // Background Pattern Table address. 0=0x0000,1=0x1000\r\n\t\tthis.f_spPatternTable = 0; // Sprite Pattern Table address. 0=0x0000,1=0x1000\r\n\t\tthis.f_addrInc = 0; // PPU Address Increment. 0=1,1=32\r\n\t\tthis.f_nTblAddress = 0; // Name Table Address. 0=0x2000,1=0x2400,2=0x2800,3=0x2C00\r\n\r\n\t\t// Control Flags Register 2:\r\n\t\tthis.f_color = 0; // Background color. 0=black, 1=blue, 2=green, 4=red\r\n\t\tthis.f_spVisibility = 0; // Sprite visibility. 0=not displayed,1=displayed\r\n\t\tthis.f_bgVisibility = 0; // Background visibility. 0=Not Displayed,1=displayed\r\n\t\tthis.f_spClipping = 0; // Sprite clipping. 0=Sprites invisible in left 8-pixel column,1=No clipping\r\n\t\tthis.f_bgClipping = 0; // Background clipping. 0=BG invisible in left 8-pixel column, 1=No clipping\r\n\t\tthis.f_dispType = 0; // Display type. 0=color, 1=monochrome\r\n\r\n\t\t// Counters:\r\n\t\tthis.cntFV = 0;\r\n\t\tthis.cntV = 0;\r\n\t\tthis.cntH = 0;\r\n\t\tthis.cntVT = 0;\r\n\t\tthis.cntHT = 0;\r\n\r\n\t\t// Registers:\r\n\t\tthis.regFV = 0;\r\n\t\tthis.regV = 0;\r\n\t\tthis.regH = 0;\r\n\t\tthis.regVT = 0;\r\n\t\tthis.regHT = 0;\r\n\t\tthis.regFH = 0;\r\n\t\tthis.regS = 0;\r\n\r\n\t\t// These are temporary variables used in rendering and sound procedures.\r\n\t\t// Their states outside of those procedures can be ignored.\r\n\t\t// TODO: the use of this is a bit weird, investigate\r\n\t\tthis.curNt = null;\r\n\r\n\t\t// Variables used when rendering:\r\n\t\tthis.attrib = new Array(32);\r\n\t\tthis.buffer = new Array(256 * 240);\r\n\t\tthis.bgbuffer = new Array(256 * 240);\r\n\t\tthis.pixrendered = new Array(256 * 240);\r\n\r\n\t\tthis.validTileData = null;\r\n\r\n\t\tthis.scantile = new Array(32);\r\n\r\n\t\t// Initialize misc vars:\r\n\t\tthis.scanline = 0;\r\n\t\tthis.lastRenderedScanline = -1;\r\n\t\tthis.curX = 0;\r\n\r\n\t\t// Sprite data:\r\n\t\tthis.sprX = new Array(64); // X coordinate\r\n\t\tthis.sprY = new Array(64); // Y coordinate\r\n\t\tthis.sprTile = new Array(64); // Tile Index (into pattern table)\r\n\t\tthis.sprCol = new Array(64); // Upper two bits of color\r\n\t\tthis.vertFlip = new Array(64); // Vertical Flip\r\n\t\tthis.horiFlip = new Array(64); // Horizontal Flip\r\n\t\tthis.bgPriority = new Array(64); // Background priority\r\n\t\tthis.spr0HitX = 0; // Sprite #0 hit X coordinate\r\n\t\tthis.spr0HitY = 0; // Sprite #0 hit Y coordinate\r\n\t\tthis.hitSpr0 = false;\r\n\r\n\t\t// Palette data:\r\n\t\tthis.sprPalette = new Array(16);\r\n\t\tthis.imgPalette = new Array(16);\r\n\r\n\t\t// Create pattern table tile buffers:\r\n\t\tthis.ptTile = new Array(512);\r\n\t\tfor (i = 0; i < 512; i++) {\r\n\t\t\tthis.ptTile[i] = new Tile();\r\n\t\t}\r\n\r\n\t\t// Create nametable buffers:\r\n\t\t// Name table data:\r\n\t\tthis.ntable1 = new Array(4);\r\n\t\tthis.currentMirroring = -1;\r\n\t\tthis.nameTable = new Array(4);\r\n\t\tfor (i = 0; i < 4; i++) {\r\n\t\t\tthis.nameTable[i] = new NameTable(32, 32, \"Nt\" + i);\r\n\t\t}\r\n\r\n\t\t// Initialize mirroring lookup table:\r\n\t\tthis.vramMirrorTable = new Array(0x8000);\r\n\t\tfor (i = 0; i < 0x8000; i++) {\r\n\t\t\tthis.vramMirrorTable[i] = i;\r\n\t\t}\r\n\r\n\t\tthis.palTable = new PaletteTable();\r\n\t\tthis.palTable.loadNTSCPalette();\r\n\t\t//this.palTable.loadDefaultPalette();\r\n\r\n\t\tthis.updateControlReg1(0);\r\n\t\tthis.updateControlReg2(0);\r\n\t},\r\n\r\n\t// Sets Nametable mirroring.\r\n\tsetMirroring: function(mirroring) {\r\n\t\tif (mirroring === this.currentMirroring) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.currentMirroring = mirroring;\r\n\t\tthis.triggerRendering();\r\n\r\n\t\t// Remove mirroring:\r\n\t\tif (this.vramMirrorTable === null) {\r\n\t\t\tthis.vramMirrorTable = new Array(0x8000);\r\n\t\t}\r\n\t\tfor (let i = 0; i < 0x8000; i++) {\r\n\t\t\tthis.vramMirrorTable[i] = i;\r\n\t\t}\r\n\r\n\t\t// Palette mirroring:\r\n\t\tthis.defineMirrorRegion(0x3f20, 0x3f00, 0x20);\r\n\t\tthis.defineMirrorRegion(0x3f40, 0x3f00, 0x20);\r\n\t\tthis.defineMirrorRegion(0x3f80, 0x3f00, 0x20);\r\n\t\tthis.defineMirrorRegion(0x3fc0, 0x3f00, 0x20);\r\n\r\n\t\t// Additional mirroring:\r\n\t\tthis.defineMirrorRegion(0x3000, 0x2000, 0xf00);\r\n\t\tthis.defineMirrorRegion(0x4000, 0x0000, 0x4000);\r\n\r\n\t\tif (mirroring === this.nes.rom.HORIZONTAL_MIRRORING) {\r\n\t\t\t// Horizontal mirroring.\r\n\r\n\t\t\tthis.ntable1[0] = 0;\r\n\t\t\tthis.ntable1[1] = 0;\r\n\t\t\tthis.ntable1[2] = 1;\r\n\t\t\tthis.ntable1[3] = 1;\r\n\r\n\t\t\tthis.defineMirrorRegion(0x2400, 0x2000, 0x400);\r\n\t\t\tthis.defineMirrorRegion(0x2c00, 0x2800, 0x400);\r\n\t\t} else if (mirroring === this.nes.rom.VERTICAL_MIRRORING) {\r\n\t\t\t// Vertical mirroring.\r\n\r\n\t\t\tthis.ntable1[0] = 0;\r\n\t\t\tthis.ntable1[1] = 1;\r\n\t\t\tthis.ntable1[2] = 0;\r\n\t\t\tthis.ntable1[3] = 1;\r\n\r\n\t\t\tthis.defineMirrorRegion(0x2800, 0x2000, 0x400);\r\n\t\t\tthis.defineMirrorRegion(0x2c00, 0x2400, 0x400);\r\n\t\t} else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING) {\r\n\t\t\t// Single Screen mirroring\r\n\r\n\t\t\tthis.ntable1[0] = 0;\r\n\t\t\tthis.ntable1[1] = 0;\r\n\t\t\tthis.ntable1[2] = 0;\r\n\t\t\tthis.ntable1[3] = 0;\r\n\r\n\t\t\tthis.defineMirrorRegion(0x2400, 0x2000, 0x400);\r\n\t\t\tthis.defineMirrorRegion(0x2800, 0x2000, 0x400);\r\n\t\t\tthis.defineMirrorRegion(0x2c00, 0x2000, 0x400);\r\n\t\t} else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING2) {\r\n\t\t\tthis.ntable1[0] = 1;\r\n\t\t\tthis.ntable1[1] = 1;\r\n\t\t\tthis.ntable1[2] = 1;\r\n\t\t\tthis.ntable1[3] = 1;\r\n\r\n\t\t\tthis.defineMirrorRegion(0x2400, 0x2400, 0x400);\r\n\t\t\tthis.defineMirrorRegion(0x2800, 0x2400, 0x400);\r\n\t\t\tthis.defineMirrorRegion(0x2c00, 0x2400, 0x400);\r\n\t\t} else {\r\n\t\t\t// Assume Four-screen mirroring.\r\n\r\n\t\t\tthis.ntable1[0] = 0;\r\n\t\t\tthis.ntable1[1] = 1;\r\n\t\t\tthis.ntable1[2] = 2;\r\n\t\t\tthis.ntable1[3] = 3;\r\n\t\t}\r\n\t},\r\n\r\n\t// Define a mirrored area in the address lookup table.\r\n\t// Assumes the regions don't overlap.\r\n\t// The 'to' region is the region that is physically in memory.\r\n\tdefineMirrorRegion: function(fromStart, toStart, size) {\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tthis.vramMirrorTable[fromStart + i] = toStart + i;\r\n\t\t}\r\n\t},\r\n\r\n\tstartVBlank: function() {\r\n\t\t// Do NMI:\r\n\t\tthis.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\r\n\r\n\t\t// Make sure everything is rendered:\r\n\t\tif (this.lastRenderedScanline < 239) {\r\n\t\t\tthis.renderFramePartially(\r\n\t\t\t\tthis.lastRenderedScanline + 1,\r\n\t\t\t\t240 - this.lastRenderedScanline\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// End frame:\r\n\t\tthis.endFrame();\r\n\r\n\t\t// Reset scanline counter:\r\n\t\tthis.lastRenderedScanline = -1;\r\n\t},\r\n\r\n\tendScanline: function() {\r\n\t\tswitch (this.scanline) {\r\n\t\t\tcase 19:\r\n\t\t\t\t// Dummy scanline.\r\n\t\t\t\t// May be variable length:\r\n\t\t\t\tif (this.dummyCycleToggle) {\r\n\t\t\t\t\t// Remove dead cycle at end of scanline,\r\n\t\t\t\t\t// for next scanline:\r\n\t\t\t\t\tthis.curX = 1;\r\n\t\t\t\t\tthis.dummyCycleToggle = !this.dummyCycleToggle;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 20:\r\n\t\t\t\tthis.nes.ui.writeFrameStart(); // Start of frame: Where VBlank ends.\r\n\r\n\t\t\t\t// Clear VBlank flag:\r\n\t\t\t\tthis.setStatusFlag(this.STATUS_VBLANK, false);\r\n\r\n\t\t\t\t// Clear Sprite #0 hit flag:\r\n\t\t\t\tthis.setStatusFlag(this.STATUS_SPRITE0HIT, false);\r\n\t\t\t\tthis.hitSpr0 = false;\r\n\t\t\t\tthis.spr0HitX = -1;\r\n\t\t\t\tthis.spr0HitY = -1;\r\n\r\n\t\t\t\tif (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\r\n\t\t\t\t\t// Update counters:\r\n\t\t\t\t\tthis.cntFV = this.regFV;\r\n\t\t\t\t\tthis.cntV = this.regV;\r\n\t\t\t\t\tthis.cntH = this.regH;\r\n\t\t\t\t\tthis.cntVT = this.regVT;\r\n\t\t\t\t\tthis.cntHT = this.regHT;\r\n\r\n\t\t\t\t\tif (this.f_bgVisibility === 1) {\r\n\t\t\t\t\t\t// Render dummy scanline:\r\n\t\t\t\t\t\tthis.renderBgScanline(false, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.f_bgVisibility === 1 && this.f_spVisibility === 1) {\r\n\t\t\t\t\t// Check sprite 0 hit for first scanline:\r\n\t\t\t\t\tthis.checkSprite0(0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\r\n\t\t\t\t\t// Clock mapper IRQ Counter:\r\n\t\t\t\t\tthis.nes.mmap.clockIrqCounter();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 261:\r\n\t\t\t\t// Dead scanline, no rendering.\r\n\t\t\t\t// Set VINT:\r\n\t\t\t\tthis.setStatusFlag(this.STATUS_VBLANK, true);\r\n\t\t\t\tthis.requestEndFrame = true;\r\n\t\t\t\tthis.nmiCounter = 9;\r\n\r\n\t\t\t\t// Wrap around:\r\n\t\t\t\tthis.scanline = -1; // will be incremented to 0\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tif (this.scanline >= 21 && this.scanline <= 260) {\r\n\t\t\t\t\t// Render normally:\r\n\t\t\t\t\tif (this.f_bgVisibility === 1) {\r\n\t\t\t\t\t\tif (!this.scanlineAlreadyRendered) {\r\n\t\t\t\t\t\t\t// update scroll:\r\n\t\t\t\t\t\t\tthis.cntHT = this.regHT;\r\n\t\t\t\t\t\t\tthis.cntH = this.regH;\r\n\t\t\t\t\t\t\tthis.renderBgScanline(true, this.scanline + 1 - 21);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.scanlineAlreadyRendered = false;\r\n\r\n\t\t\t\t\t\t// Check for sprite 0 (next scanline):\r\n\t\t\t\t\t\tif (!this.hitSpr0 && this.f_spVisibility === 1) {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tthis.sprX[0] >= -7 &&\r\n\t\t\t\t\t\t\t\tthis.sprX[0] < 256 &&\r\n\t\t\t\t\t\t\t\tthis.sprY[0] + 1 <= this.scanline - 20 &&\r\n\t\t\t\t\t\t\t\tthis.sprY[0] + 1 + (this.f_spriteSize === 0 ? 8 : 16) >=\r\n\t\t\t\t\t\t\t\tthis.scanline - 20\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tif (this.checkSprite0(this.scanline - 20)) {\r\n\t\t\t\t\t\t\t\t\tthis.hitSpr0 = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\r\n\t\t\t\t\t\t// Clock mapper IRQ Counter:\r\n\t\t\t\t\t\tthis.nes.mmap.clockIrqCounter();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.scanline++;\r\n\t\tthis.regsToAddress();\r\n\t\tthis.cntsToAddress();\r\n\t},\r\n\r\n\tstartFrame: function() {\r\n\t\t// Set background color:\r\n\t\tlet bgColor = 0;\r\n\r\n\t\tif (this.f_dispType === 0) {\r\n\t\t\t// Color display.\r\n\t\t\t// f_color determines color emphasis.\r\n\t\t\t// Use first entry of image palette as BG color.\r\n\t\t\tbgColor = this.imgPalette[0];\r\n\t\t} else {\r\n\t\t\t// Monochrome display.\r\n\t\t\t// f_color determines the bg color.\r\n\t\t\tswitch (this.f_color) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t// Black\r\n\t\t\t\t\tbgColor = 0x00000;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\t// Green\r\n\t\t\t\t\tbgColor = 0x00ff00;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t// Blue\r\n\t\t\t\t\tbgColor = 0xff0000;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\t// Invalid. Use black.\r\n\t\t\t\t\tbgColor = 0x000000;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t// Red\r\n\t\t\t\t\tbgColor = 0x0000ff;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// Invalid. Use black.\r\n\t\t\t\t\tbgColor = 0x0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet buffer = this.buffer;\r\n\t\tlet i;\r\n\t\tfor (i = 0; i < 256 * 240; i++) {\r\n\t\t\tbuffer[i] = bgColor;\r\n\t\t}\r\n\t\tlet pixrendered = this.pixrendered;\r\n\t\tfor (i = 0; i < pixrendered.length; i++) {\r\n\t\t\tpixrendered[i] = 65;\r\n\t\t}\r\n\t},\r\n\r\n\tendFrame: function() {\r\n\t\tlet i, x, y;\r\n\t\tlet buffer = this.buffer;\r\n\r\n\t\t// Draw spr#0 hit coordinates:\r\n\t\tif (this.showSpr0Hit) {\r\n\t\t\t// Spr 0 position:\r\n\t\t\tif (\r\n\t\t\t\tthis.sprX[0] >= 0 &&\r\n\t\t\t\tthis.sprX[0] < 256 &&\r\n\t\t\t\tthis.sprY[0] >= 0 &&\r\n\t\t\t\tthis.sprY[0] < 240\r\n\t\t\t) {\r\n\t\t\t\tfor (i = 0; i < 256; i++) {\r\n\t\t\t\t\tbuffer[(this.sprY[0] << 8) + i] = 0xff5555;\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = 0; i < 240; i++) {\r\n\t\t\t\t\tbuffer[(i << 8) + this.sprX[0]] = 0xff5555;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Hit position:\r\n\t\t\tif (\r\n\t\t\t\tthis.spr0HitX >= 0 &&\r\n\t\t\t\tthis.spr0HitX < 256 &&\r\n\t\t\t\tthis.spr0HitY >= 0 &&\r\n\t\t\t\tthis.spr0HitY < 240\r\n\t\t\t) {\r\n\t\t\t\tfor (i = 0; i < 256; i++) {\r\n\t\t\t\t\tbuffer[(this.spr0HitY << 8) + i] = 0x55ff55;\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = 0; i < 240; i++) {\r\n\t\t\t\t\tbuffer[(i << 8) + this.spr0HitX] = 0x55ff55;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.clipToTvSizeH) {\r\n\t\t\t// Clip left 8-pixels column:\r\n\t\t\tfor (y = 0; y < 240; y++) {\r\n\t\t\t\tfor (x = 0; x < 8; x++) {\r\n\t\t\t\t\tbuffer[(y << 8) + x] = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.clipToTvSizeH) {\r\n\t\t\t// Clip right 8-pixels column too:\r\n\t\t\tfor (y = 0; y < 240; y++) {\r\n\t\t\t\tfor (x = 0; x < 8; x++) {\r\n\t\t\t\t\tbuffer[(y << 8) + 255 - x] = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Clip top and bottom 8 pixels:\r\n\t\tif (this.clipToTvSizeV) {\r\n\t\t\tfor (y = 0; y < 8; y++) {\r\n\t\t\t\tfor (x = 0; x < 256; x++) {\r\n\t\t\t\t\tbuffer[(y << 8) + x] = 0;\r\n\t\t\t\t\tbuffer[((239 - y) << 8) + x] = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.nes.ui.writeFrame(buffer);\r\n\t},\r\n\r\n\tupdateControlReg1: function(value) {\r\n\t\tthis.triggerRendering();\r\n\r\n\t\tthis.f_nmiOnVblank = (value >> 7) & 1;\r\n\t\tthis.f_spriteSize = (value >> 5) & 1;\r\n\t\tthis.f_bgPatternTable = (value >> 4) & 1;\r\n\t\tthis.f_spPatternTable = (value >> 3) & 1;\r\n\t\tthis.f_addrInc = (value >> 2) & 1;\r\n\t\tthis.f_nTblAddress = value & 3;\r\n\r\n\t\tthis.regV = (value >> 1) & 1;\r\n\t\tthis.regH = value & 1;\r\n\t\tthis.regS = (value >> 4) & 1;\r\n\t},\r\n\r\n\tupdateControlReg2: function(value) {\r\n\t\tthis.triggerRendering();\r\n\r\n\t\tthis.f_color = (value >> 5) & 7;\r\n\t\tthis.f_spVisibility = (value >> 4) & 1;\r\n\t\tthis.f_bgVisibility = (value >> 3) & 1;\r\n\t\tthis.f_spClipping = (value >> 2) & 1;\r\n\t\tthis.f_bgClipping = (value >> 1) & 1;\r\n\t\tthis.f_dispType = value & 1;\r\n\r\n\t\tif (this.f_dispType === 0) {\r\n\t\t\tthis.palTable.setEmphasis(this.f_color);\r\n\t\t}\r\n\t\tthis.updatePalettes();\r\n\t},\r\n\r\n\tsetStatusFlag: function(flag, value) {\r\n\t\tlet n = 1 << flag;\r\n\t\tthis.nes.cpu.mem[0x2002] =\r\n\t\t\t(this.nes.cpu.mem[0x2002] & (255 - n)) | (value ? n : 0);\r\n\t},\r\n\r\n\t// CPU Register $2002:\r\n\t// Read the Status Register.\r\n\treadStatusRegister: function() {\r\n\t\tlet tmp = this.nes.cpu.mem[0x2002];\r\n\r\n\t\t// Reset scroll & VRAM Address toggle:\r\n\t\tthis.firstWrite = true;\r\n\r\n\t\t// Clear VBlank flag:\r\n\t\tthis.setStatusFlag(this.STATUS_VBLANK, false);\r\n\r\n\t\t// Fetch status data:\r\n\t\treturn tmp;\r\n\t},\r\n\r\n\t// CPU Register $2003:\r\n\t// Write the SPR-RAM address that is used for sramWrite (Register 0x2004 in CPU memory map)\r\n\twriteSRAMAddress: function(address) {\r\n\t\tthis.sramAddress = address;\r\n\t},\r\n\r\n\t// CPU Register $2004 (R):\r\n\t// Read from SPR-RAM (Sprite RAM).\r\n\t// The address should be set first.\r\n\tsramLoad: function() {\r\n\t\t/*short tmp = sprMem.load(sramAddress);\r\n\t\t    sramAddress++; // Increment address\r\n\t\t    sramAddress%=0x100;\r\n\t\t    return tmp;*/\r\n\t\treturn this.spriteMem[this.sramAddress];\r\n\t},\r\n\r\n\t// CPU Register $2004 (W):\r\n\t// Write to SPR-RAM (Sprite RAM).\r\n\t// The address should be set first.\r\n\tsramWrite: function(value) {\r\n\t\tthis.spriteMem[this.sramAddress] = value;\r\n\t\tthis.spriteRamWriteUpdate(this.sramAddress, value);\r\n\t\tthis.sramAddress++; // Increment address\r\n\t\tthis.sramAddress %= 0x100;\r\n\t},\r\n\r\n\t// CPU Register $2005:\r\n\t// Write to scroll registers.\r\n\t// The first write is the vertical offset, the second is the\r\n\t// horizontal offset:\r\n\tscrollWrite: function(value) {\r\n\t\tthis.triggerRendering();\r\n\r\n\t\tif (this.firstWrite) {\r\n\t\t\t// First write, horizontal scroll:\r\n\t\t\tthis.regHT = (value >> 3) & 31;\r\n\t\t\tthis.regFH = value & 7;\r\n\t\t} else {\r\n\t\t\t// Second write, vertical scroll:\r\n\t\t\tthis.regFV = value & 7;\r\n\t\t\tthis.regVT = (value >> 3) & 31;\r\n\t\t}\r\n\t\tthis.firstWrite = !this.firstWrite;\r\n\t},\r\n\r\n\t// CPU Register $2006:\r\n\t// Sets the adress used when reading/writing from/to VRAM.\r\n\t// The first write sets the high byte, the second the low byte.\r\n\twriteVRAMAddress: function(address) {\r\n\t\tif (this.firstWrite) {\r\n\t\t\tthis.regFV = (address >> 4) & 3;\r\n\t\t\tthis.regV = (address >> 3) & 1;\r\n\t\t\tthis.regH = (address >> 2) & 1;\r\n\t\t\tthis.regVT = (this.regVT & 7) | ((address & 3) << 3);\r\n\t\t} else {\r\n\t\t\tthis.triggerRendering();\r\n\r\n\t\t\tthis.regVT = (this.regVT & 24) | ((address >> 5) & 7);\r\n\t\t\tthis.regHT = address & 31;\r\n\r\n\t\t\tthis.cntFV = this.regFV;\r\n\t\t\tthis.cntV = this.regV;\r\n\t\t\tthis.cntH = this.regH;\r\n\t\t\tthis.cntVT = this.regVT;\r\n\t\t\tthis.cntHT = this.regHT;\r\n\r\n\t\t\tthis.checkSprite0(this.scanline - 20);\r\n\t\t}\r\n\r\n\t\tthis.firstWrite = !this.firstWrite;\r\n\r\n\t\t// Invoke mapper latch:\r\n\t\tthis.cntsToAddress();\r\n\t\tif (this.vramAddress < 0x2000) {\r\n\t\t\tthis.nes.mmap.latchAccess(this.vramAddress);\r\n\t\t}\r\n\t},\r\n\r\n\t// CPU Register $2007(R):\r\n\t// Read from PPU memory. The address should be set first.\r\n\tvramLoad: function() {\r\n\t\tlet tmp;\r\n\r\n\t\tthis.cntsToAddress();\r\n\t\tthis.regsToAddress();\r\n\r\n\t\t// If address is in range 0x0000-0x3EFF, return buffered values:\r\n\t\tif (this.vramAddress <= 0x3eff) {\r\n\t\t\ttmp = this.vramBufferedReadValue;\r\n\r\n\t\t\t// Update buffered value:\r\n\t\t\tif (this.vramAddress < 0x2000) {\r\n\t\t\t\tthis.vramBufferedReadValue = this.vramMem[this.vramAddress];\r\n\t\t\t} else {\r\n\t\t\t\tthis.vramBufferedReadValue = this.mirroredLoad(this.vramAddress);\r\n\t\t\t}\r\n\r\n\t\t\t// Mapper latch access:\r\n\t\t\tif (this.vramAddress < 0x2000) {\r\n\t\t\t\tthis.nes.mmap.latchAccess(this.vramAddress);\r\n\t\t\t}\r\n\r\n\t\t\t// Increment by either 1 or 32, depending on d2 of Control Register 1:\r\n\t\t\tthis.vramAddress += this.f_addrInc === 1 ? 32 : 1;\r\n\r\n\t\t\tthis.cntsFromAddress();\r\n\t\t\tthis.regsFromAddress();\r\n\r\n\t\t\treturn tmp; // Return the previous buffered value.\r\n\t\t}\r\n\r\n\t\t// No buffering in this mem range. Read normally.\r\n\t\ttmp = this.mirroredLoad(this.vramAddress);\r\n\r\n\t\t// Increment by either 1 or 32, depending on d2 of Control Register 1:\r\n\t\tthis.vramAddress += this.f_addrInc === 1 ? 32 : 1;\r\n\r\n\t\tthis.cntsFromAddress();\r\n\t\tthis.regsFromAddress();\r\n\r\n\t\treturn tmp;\r\n\t},\r\n\r\n\t// CPU Register $2007(W):\r\n\t// Write to PPU memory. The address should be set first.\r\n\tvramWrite: function(value) {\r\n\t\tthis.triggerRendering();\r\n\t\tthis.cntsToAddress();\r\n\t\tthis.regsToAddress();\r\n\r\n\t\tif (this.vramAddress >= 0x2000) {\r\n\t\t\t// Mirroring is used.\r\n\t\t\tthis.mirroredWrite(this.vramAddress, value);\r\n\t\t} else {\r\n\t\t\t// Write normally.\r\n\t\t\tthis.writeMem(this.vramAddress, value);\r\n\r\n\t\t\t// Invoke mapper latch:\r\n\t\t\tthis.nes.mmap.latchAccess(this.vramAddress);\r\n\t\t}\r\n\r\n\t\t// Increment by either 1 or 32, depending on d2 of Control Register 1:\r\n\t\tthis.vramAddress += this.f_addrInc === 1 ? 32 : 1;\r\n\t\tthis.regsFromAddress();\r\n\t\tthis.cntsFromAddress();\r\n\t},\r\n\r\n\t// CPU Register $4014:\r\n\t// Write 256 bytes of main memory\r\n\t// into Sprite RAM.\r\n\tsramDMA: function(value) {\r\n\t\tlet baseAddress = value * 0x100;\r\n\t\tlet data;\r\n\t\tfor (let i = this.sramAddress; i < 256; i++) {\r\n\t\t\tdata = this.nes.cpu.mem[baseAddress + i];\r\n\t\t\tthis.spriteMem[i] = data;\r\n\t\t\tthis.spriteRamWriteUpdate(i, data);\r\n\t\t}\r\n\r\n\t\tthis.nes.cpu.haltCycles(513);\r\n\t},\r\n\r\n\t// Updates the scroll registers from a new VRAM address.\r\n\tregsFromAddress: function() {\r\n\t\tlet address = (this.vramTmpAddress >> 8) & 0xff;\r\n\t\tthis.regFV = (address >> 4) & 7;\r\n\t\tthis.regV = (address >> 3) & 1;\r\n\t\tthis.regH = (address >> 2) & 1;\r\n\t\tthis.regVT = (this.regVT & 7) | ((address & 3) << 3);\r\n\r\n\t\taddress = this.vramTmpAddress & 0xff;\r\n\t\tthis.regVT = (this.regVT & 24) | ((address >> 5) & 7);\r\n\t\tthis.regHT = address & 31;\r\n\t},\r\n\r\n\t// Updates the scroll registers from a new VRAM address.\r\n\tcntsFromAddress: function() {\r\n\t\tlet address = (this.vramAddress >> 8) & 0xff;\r\n\t\tthis.cntFV = (address >> 4) & 3;\r\n\t\tthis.cntV = (address >> 3) & 1;\r\n\t\tthis.cntH = (address >> 2) & 1;\r\n\t\tthis.cntVT = (this.cntVT & 7) | ((address & 3) << 3);\r\n\r\n\t\taddress = this.vramAddress & 0xff;\r\n\t\tthis.cntVT = (this.cntVT & 24) | ((address >> 5) & 7);\r\n\t\tthis.cntHT = address & 31;\r\n\t},\r\n\r\n\tregsToAddress: function() {\r\n\t\tlet b1 = (this.regFV & 7) << 4;\r\n\t\tb1 |= (this.regV & 1) << 3;\r\n\t\tb1 |= (this.regH & 1) << 2;\r\n\t\tb1 |= (this.regVT >> 3) & 3;\r\n\r\n\t\tlet b2 = (this.regVT & 7) << 5;\r\n\t\tb2 |= this.regHT & 31;\r\n\r\n\t\tthis.vramTmpAddress = ((b1 << 8) | b2) & 0x7fff;\r\n\t},\r\n\r\n\tcntsToAddress: function() {\r\n\t\tlet b1 = (this.cntFV & 7) << 4;\r\n\t\tb1 |= (this.cntV & 1) << 3;\r\n\t\tb1 |= (this.cntH & 1) << 2;\r\n\t\tb1 |= (this.cntVT >> 3) & 3;\r\n\r\n\t\tlet b2 = (this.cntVT & 7) << 5;\r\n\t\tb2 |= this.cntHT & 31;\r\n\r\n\t\tthis.vramAddress = ((b1 << 8) | b2) & 0x7fff;\r\n\t},\r\n\r\n\tincTileCounter: function(count) {\r\n\t\tfor (let i = count; i !== 0; i--) {\r\n\t\t\tthis.cntHT++;\r\n\t\t\tif (this.cntHT === 32) {\r\n\t\t\t\tthis.cntHT = 0;\r\n\t\t\t\tthis.cntVT++;\r\n\t\t\t\tif (this.cntVT >= 30) {\r\n\t\t\t\t\tthis.cntH++;\r\n\t\t\t\t\tif (this.cntH === 2) {\r\n\t\t\t\t\t\tthis.cntH = 0;\r\n\t\t\t\t\t\tthis.cntV++;\r\n\t\t\t\t\t\tif (this.cntV === 2) {\r\n\t\t\t\t\t\t\tthis.cntV = 0;\r\n\t\t\t\t\t\t\tthis.cntFV++;\r\n\t\t\t\t\t\t\tthis.cntFV &= 0x7;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t// Reads from memory, taking into account\r\n\t// mirroring/mapping of address ranges.\r\n\tmirroredLoad: function(address) {\r\n\t\treturn this.vramMem[this.vramMirrorTable[address]];\r\n\t},\r\n\r\n\t// Writes to memory, taking into account\r\n\t// mirroring/mapping of address ranges.\r\n\tmirroredWrite: function(address, value) {\r\n\t\tif (address >= 0x3f00 && address < 0x3f20) {\r\n\t\t\t// Palette write mirroring.\r\n\t\t\tif (address === 0x3f00 || address === 0x3f10) {\r\n\t\t\t\tthis.writeMem(0x3f00, value);\r\n\t\t\t\tthis.writeMem(0x3f10, value);\r\n\t\t\t} else if (address === 0x3f04 || address === 0x3f14) {\r\n\t\t\t\tthis.writeMem(0x3f04, value);\r\n\t\t\t\tthis.writeMem(0x3f14, value);\r\n\t\t\t} else if (address === 0x3f08 || address === 0x3f18) {\r\n\t\t\t\tthis.writeMem(0x3f08, value);\r\n\t\t\t\tthis.writeMem(0x3f18, value);\r\n\t\t\t} else if (address === 0x3f0c || address === 0x3f1c) {\r\n\t\t\t\tthis.writeMem(0x3f0c, value);\r\n\t\t\t\tthis.writeMem(0x3f1c, value);\r\n\t\t\t} else {\r\n\t\t\t\tthis.writeMem(address, value);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Use lookup table for mirrored address:\r\n\t\t\tif (address < this.vramMirrorTable.length) {\r\n\t\t\t\tthis.writeMem(this.vramMirrorTable[address], value);\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Invalid VRAM address: \" + address.toString(16));\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\ttriggerRendering: function() {\r\n\t\tif (this.scanline >= 21 && this.scanline <= 260) {\r\n\t\t\t// Render sprites, and combine:\r\n\t\t\tthis.renderFramePartially(\r\n\t\t\t\tthis.lastRenderedScanline + 1,\r\n\t\t\t\tthis.scanline - 21 - this.lastRenderedScanline\r\n\t\t\t);\r\n\r\n\t\t\t// Set last rendered scanline:\r\n\t\t\tthis.lastRenderedScanline = this.scanline - 21;\r\n\t\t}\r\n\t},\r\n\r\n\trenderFramePartially: function(startScan, scanCount) {\r\n\t\tif (this.f_spVisibility === 1) {\r\n\t\t\tthis.renderSpritesPartially(startScan, scanCount, true);\r\n\t\t}\r\n\r\n\t\tif (this.f_bgVisibility === 1) {\r\n\t\t\tlet si = startScan << 8;\r\n\t\t\tlet ei = (startScan + scanCount) << 8;\r\n\t\t\tif (ei > 0xf000) {\r\n\t\t\t\tei = 0xf000;\r\n\t\t\t}\r\n\t\t\tlet buffer = this.buffer;\r\n\t\t\tlet bgbuffer = this.bgbuffer;\r\n\t\t\tlet pixrendered = this.pixrendered;\r\n\t\t\tfor (let destIndex = si; destIndex < ei; destIndex++) {\r\n\t\t\t\tif (pixrendered[destIndex] > 0xff) {\r\n\t\t\t\t\tbuffer[destIndex] = bgbuffer[destIndex];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.f_spVisibility === 1) {\r\n\t\t\tthis.renderSpritesPartially(startScan, scanCount, false);\r\n\t\t}\r\n\r\n\t\tthis.validTileData = false;\r\n\t},\r\n\r\n\trenderBgScanline: function(bgbuffer, scan) {\r\n\t\tlet baseTile = this.regS === 0 ? 0 : 256;\r\n\t\tlet leftIndex = (scan << 8);\r\n\t\tlet destIndex = leftIndex - this.regFH;\r\n\r\n\t\tthis.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\r\n\r\n\t\tthis.cntHT = this.regHT;\r\n\t\tthis.cntH = this.regH;\r\n\t\tthis.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\r\n\r\n\t\tif (scan < 240 && scan - this.cntFV >= 0) {\r\n\t\t\tlet tscanoffset = this.cntFV << 3;\r\n\t\t\tlet scantile = this.scantile;\r\n\t\t\tlet attrib = this.attrib;\r\n\t\t\tlet ptTile = this.ptTile;\r\n\t\t\tlet nameTable = this.nameTable;\r\n\t\t\tlet imgPalette = this.imgPalette;\r\n\t\t\tlet pixrendered = this.pixrendered;\r\n\t\t\tlet targetBuffer = bgbuffer ? this.bgbuffer : this.buffer;\r\n\r\n\t\t\tlet t, tpix, att, col;\r\n\r\n\t\t\tfor (let tile = 0; tile < 33; tile++) {\r\n\t\t\t\tif (scan >= 0) {\r\n\t\t\t\t\t// Fetch tile & attrib data:\r\n\t\t\t\t\tif (this.validTileData) {\r\n\t\t\t\t\t\t// Get data from array:\r\n\t\t\t\t\t\tt = scantile[tile];\r\n\t\t\t\t\t\tif (typeof t === \"undefined\") {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttpix = t.pix;\r\n\t\t\t\t\t\tatt = attrib[tile];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Fetch data:\r\n\t\t\t\t\t\tt =\r\n\t\t\t\t\t\t\tptTile[\r\n\t\t\t\t\t\t\t\tbaseTile +\r\n\t\t\t\t\t\t\t\tnameTable[this.curNt].getTileIndex(this.cntHT, this.cntVT)\r\n\t\t\t\t\t\t\t];\r\n\t\t\t\t\t\tif (typeof t === \"undefined\") {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttpix = t.pix;\r\n\t\t\t\t\t\tatt = nameTable[this.curNt].getAttrib(this.cntHT, this.cntVT);\r\n\t\t\t\t\t\tscantile[tile] = t;\r\n\t\t\t\t\t\tattrib[tile] = att;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Render tile scanline:\r\n\t\t\t\t\tlet sx = 0;\r\n\t\t\t\t\tlet x = (tile << 3) - this.regFH;\r\n\r\n\t\t\t\t\t//if (x > -8 && x < 0) {\r\n\t\t\t\t\t//  x += 256;\r\n\t\t\t\t\t//}\r\n\r\n\t\t\t\t\tif (x > -8) {\r\n\t\t\t\t\t\tif (x < 0) {\r\n\t\t\t\t\t\t\tdestIndex -= x;\r\n\t\t\t\t\t\t\tsx = -x;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (t.opaque[this.cntFV]) {\r\n\t\t\t\t\t\t\tfor (; sx < 8; sx++) {\r\n\t\t\t\t\t\t\t\tif (x + sx >= 256) continue;\r\n\r\n\t\t\t\t\t\t\t\ttargetBuffer[destIndex] =\r\n\t\t\t\t\t\t\t\t\timgPalette[tpix[tscanoffset + sx] + att];\r\n\t\t\t\t\t\t\t\tpixrendered[destIndex] |= 256;\r\n\t\t\t\t\t\t\t\tdestIndex++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfor (; sx < 8; sx++) {\r\n\t\t\t\t\t\t\t\tif (x + sx >= 256) continue;\r\n\r\n\t\t\t\t\t\t\t\tcol = tpix[tscanoffset + sx];\r\n\t\t\t\t\t\t\t\tif (col !== 0) {\r\n\t\t\t\t\t\t\t\t\ttargetBuffer[destIndex] = imgPalette[col + att];\r\n\t\t\t\t\t\t\t\t\tpixrendered[destIndex] |= 256;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tdestIndex++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Increase Horizontal Tile Counter:\r\n\t\t\t\tif (++this.cntHT === 32) {\r\n\t\t\t\t\tthis.cntHT = 0;\r\n\t\t\t\t\tthis.cntH++;\r\n\t\t\t\t\tthis.cntH %= 2;\r\n\t\t\t\t\tthis.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Tile data for one row should now have been fetched,\r\n\t\t\t// so the data in the array is valid.\r\n\t\t\tthis.validTileData = true;\r\n\r\n\t\t\t// Lastly, block out first 8 horizontal pixels of bg if bgClipping is set:\r\n\t\t\tlet bgColor = this.imgPalette[0];\r\n\t\t\tif (this.f_bgClipping === 0) {\r\n\t\t\t\t// Clip left 8-pixels column:\r\n\t\t\t\tfor (let x = 0; x < 8; x++) {\r\n\t\t\t\t\ttargetBuffer[leftIndex + x] = bgColor;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// update vertical scroll:\r\n\t\tthis.cntFV++;\r\n\t\tif (this.cntFV === 8) {\r\n\t\t\tthis.cntFV = 0;\r\n\t\t\tthis.cntVT++;\r\n\t\t\tif (this.cntVT === 30) {\r\n\t\t\t\tthis.cntVT = 0;\r\n\t\t\t\tthis.cntV++;\r\n\t\t\t\tthis.cntV %= 2;\r\n\t\t\t\tthis.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\r\n\t\t\t} else if (this.cntVT === 32) {\r\n\t\t\t\tthis.cntVT = 0;\r\n\t\t\t}\r\n\r\n\t\t\t// Invalidate fetched data:\r\n\t\t\tthis.validTileData = false;\r\n\t\t}\r\n\t},\r\n\r\n\trenderSpritesPartially: function(startscan, scancount, bgPri) {\r\n\t\tif (this.f_spVisibility === 1) {\r\n\t\t\tfor (let i = 0; i < 64; i++) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.bgPriority[i] === bgPri &&\r\n\t\t\t\t\tthis.sprX[i] >= 0 &&\r\n\t\t\t\t\tthis.sprX[i] < 256 &&\r\n\t\t\t\t\tthis.sprY[i] + 8 >= startscan &&\r\n\t\t\t\t\tthis.sprY[i] < startscan + scancount\r\n\t\t\t\t) {\r\n\t\t\t\t\t// Show sprite.\r\n\t\t\t\t\tif (this.f_spriteSize === 0) {\r\n\t\t\t\t\t\t// 8x8 sprites\r\n\r\n\t\t\t\t\t\tthis.srcy1 = 0;\r\n\t\t\t\t\t\tthis.srcy2 = 8;\r\n\r\n\t\t\t\t\t\tif (this.sprY[i] < startscan) {\r\n\t\t\t\t\t\t\tthis.srcy1 = startscan - this.sprY[i] - 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.sprY[i] + 8 > startscan + scancount) {\r\n\t\t\t\t\t\t\tthis.srcy2 = startscan + scancount - this.sprY[i] + 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.f_spPatternTable === 0) {\r\n\t\t\t\t\t\t\tthis.ptTile[this.sprTile[i]].render(\r\n\t\t\t\t\t\t\t\tthis.buffer,\r\n\t\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\t\tthis.srcy1,\r\n\t\t\t\t\t\t\t\t8,\r\n\t\t\t\t\t\t\t\tthis.srcy2,\r\n\t\t\t\t\t\t\t\tthis.sprX[i],\r\n\t\t\t\t\t\t\t\tthis.sprY[i] + 1,\r\n\t\t\t\t\t\t\t\tthis.sprCol[i],\r\n\t\t\t\t\t\t\t\tthis.sprPalette,\r\n\t\t\t\t\t\t\t\tthis.horiFlip[i],\r\n\t\t\t\t\t\t\t\tthis.vertFlip[i],\r\n\t\t\t\t\t\t\t\ti,\r\n\t\t\t\t\t\t\t\tthis.pixrendered,\r\n\t\t\t\t\t\t\t\tthis.f_spClipping === 0\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.ptTile[this.sprTile[i] + 256].render(\r\n\t\t\t\t\t\t\t\tthis.buffer,\r\n\t\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\t\tthis.srcy1,\r\n\t\t\t\t\t\t\t\t8,\r\n\t\t\t\t\t\t\t\tthis.srcy2,\r\n\t\t\t\t\t\t\t\tthis.sprX[i],\r\n\t\t\t\t\t\t\t\tthis.sprY[i] + 1,\r\n\t\t\t\t\t\t\t\tthis.sprCol[i],\r\n\t\t\t\t\t\t\t\tthis.sprPalette,\r\n\t\t\t\t\t\t\t\tthis.horiFlip[i],\r\n\t\t\t\t\t\t\t\tthis.vertFlip[i],\r\n\t\t\t\t\t\t\t\ti,\r\n\t\t\t\t\t\t\t\tthis.pixrendered,\r\n\t\t\t\t\t\t\t\tthis.f_spClipping === 0\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 8x16 sprites\r\n\t\t\t\t\t\tlet top = this.sprTile[i];\r\n\t\t\t\t\t\tif ((top & 1) !== 0) {\r\n\t\t\t\t\t\t\ttop = this.sprTile[i] - 1 + 256;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet srcy1 = 0;\r\n\t\t\t\t\t\tlet srcy2 = 8;\r\n\r\n\t\t\t\t\t\tif (this.sprY[i] < startscan) {\r\n\t\t\t\t\t\t\tsrcy1 = startscan - this.sprY[i] - 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.sprY[i] + 8 > startscan + scancount) {\r\n\t\t\t\t\t\t\tsrcy2 = startscan + scancount - this.sprY[i];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis.ptTile[top + (this.vertFlip[i] ? 1 : 0)].render(\r\n\t\t\t\t\t\t\tthis.buffer,\r\n\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\tsrcy1,\r\n\t\t\t\t\t\t\t8,\r\n\t\t\t\t\t\t\tsrcy2,\r\n\t\t\t\t\t\t\tthis.sprX[i],\r\n\t\t\t\t\t\t\tthis.sprY[i] + 1,\r\n\t\t\t\t\t\t\tthis.sprCol[i],\r\n\t\t\t\t\t\t\tthis.sprPalette,\r\n\t\t\t\t\t\t\tthis.horiFlip[i],\r\n\t\t\t\t\t\t\tthis.vertFlip[i],\r\n\t\t\t\t\t\t\ti,\r\n\t\t\t\t\t\t\tthis.pixrendered,\r\n\t\t\t\t\t\t\tthis.f_spClipping === 0\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tsrcy1 = 0;\r\n\t\t\t\t\t\tsrcy2 = 8;\r\n\r\n\t\t\t\t\t\tif (this.sprY[i] + 8 < startscan) {\r\n\t\t\t\t\t\t\tsrcy1 = startscan - (this.sprY[i] + 8 + 1);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.sprY[i] + 16 > startscan + scancount) {\r\n\t\t\t\t\t\t\tsrcy2 = startscan + scancount - (this.sprY[i] + 8);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis.ptTile[top + (this.vertFlip[i] ? 0 : 1)].render(\r\n\t\t\t\t\t\t\tthis.buffer,\r\n\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\tsrcy1,\r\n\t\t\t\t\t\t\t8,\r\n\t\t\t\t\t\t\tsrcy2,\r\n\t\t\t\t\t\t\tthis.sprX[i],\r\n\t\t\t\t\t\t\tthis.sprY[i] + 1 + 8,\r\n\t\t\t\t\t\t\tthis.sprCol[i],\r\n\t\t\t\t\t\t\tthis.sprPalette,\r\n\t\t\t\t\t\t\tthis.horiFlip[i],\r\n\t\t\t\t\t\t\tthis.vertFlip[i],\r\n\t\t\t\t\t\t\ti,\r\n\t\t\t\t\t\t\tthis.pixrendered,\r\n\t\t\t\t\t\t\tthis.f_spClipping === 0\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tcheckSprite0: function(scan) {\r\n\t\tthis.spr0HitX = -1;\r\n\t\tthis.spr0HitY = -1;\r\n\r\n\t\tlet toffset;\r\n\t\tlet tIndexAdd = this.f_spPatternTable === 0 ? 0 : 256;\r\n\t\tlet x, y, t, i;\r\n\t\tlet bufferIndex;\r\n\r\n\t\tx = this.sprX[0];\r\n\t\ty = this.sprY[0] + 1;\r\n\r\n\t\tif (this.f_spriteSize === 0) {\r\n\t\t\t// 8x8 sprites.\r\n\r\n\t\t\t// Check range:\r\n\t\t\tif (y <= scan && y + 8 > scan && x >= -7 && x < 256) {\r\n\t\t\t\t// Sprite is in range.\r\n\t\t\t\t// Draw scanline:\r\n\t\t\t\tt = this.ptTile[this.sprTile[0] + tIndexAdd];\r\n\r\n\t\t\t\tif (this.vertFlip[0]) {\r\n\t\t\t\t\ttoffset = 7 - (scan - y);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttoffset = scan - y;\r\n\t\t\t\t}\r\n\t\t\t\ttoffset *= 8;\r\n\r\n\t\t\t\tbufferIndex = scan * 256 + x;\r\n\t\t\t\tif (this.horiFlip[0]) {\r\n\t\t\t\t\tfor (i = 7; i >= 0; i--) {\r\n\t\t\t\t\t\tif (x >= 0 && x < 256) {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tbufferIndex >= 0 &&\r\n\t\t\t\t\t\t\t\tbufferIndex < 61440 &&\r\n\t\t\t\t\t\t\t\tthis.pixrendered[bufferIndex] !== 0\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tif (t.pix[toffset + i] !== 0) {\r\n\t\t\t\t\t\t\t\t\tthis.spr0HitX = bufferIndex % 256;\r\n\t\t\t\t\t\t\t\t\tthis.spr0HitY = scan;\r\n\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tx++;\r\n\t\t\t\t\t\tbufferIndex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (i = 0; i < 8; i++) {\r\n\t\t\t\t\t\tif (x >= 0 && x < 256) {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tbufferIndex >= 0 &&\r\n\t\t\t\t\t\t\t\tbufferIndex < 61440 &&\r\n\t\t\t\t\t\t\t\tthis.pixrendered[bufferIndex] !== 0\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tif (t.pix[toffset + i] !== 0) {\r\n\t\t\t\t\t\t\t\t\tthis.spr0HitX = bufferIndex % 256;\r\n\t\t\t\t\t\t\t\t\tthis.spr0HitY = scan;\r\n\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tx++;\r\n\t\t\t\t\t\tbufferIndex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// 8x16 sprites:\r\n\r\n\t\t\t// Check range:\r\n\t\t\tif (y <= scan && y + 16 > scan && x >= -7 && x < 256) {\r\n\t\t\t\t// Sprite is in range.\r\n\t\t\t\t// Draw scanline:\r\n\r\n\t\t\t\tif (this.vertFlip[0]) {\r\n\t\t\t\t\ttoffset = 15 - (scan - y);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttoffset = scan - y;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (toffset < 8) {\r\n\t\t\t\t\t// first half of sprite.\r\n\t\t\t\t\tt = this.ptTile[\r\n\t\t\t\t\t\tthis.sprTile[0] +\r\n\t\t\t\t\t\t(this.vertFlip[0] ? 1 : 0) +\r\n\t\t\t\t\t\t((this.sprTile[0] & 1) !== 0 ? 255 : 0)\r\n\t\t\t\t\t];\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// second half of sprite.\r\n\t\t\t\t\tt = this.ptTile[\r\n\t\t\t\t\t\tthis.sprTile[0] +\r\n\t\t\t\t\t\t(this.vertFlip[0] ? 0 : 1) +\r\n\t\t\t\t\t\t((this.sprTile[0] & 1) !== 0 ? 255 : 0)\r\n\t\t\t\t\t];\r\n\t\t\t\t\tif (this.vertFlip[0]) {\r\n\t\t\t\t\t\ttoffset = 15 - toffset;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttoffset -= 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ttoffset *= 8;\r\n\r\n\t\t\t\tbufferIndex = scan * 256 + x;\r\n\t\t\t\tif (this.horiFlip[0]) {\r\n\t\t\t\t\tfor (i = 7; i >= 0; i--) {\r\n\t\t\t\t\t\tif (x >= 0 && x < 256) {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tbufferIndex >= 0 &&\r\n\t\t\t\t\t\t\t\tbufferIndex < 61440 &&\r\n\t\t\t\t\t\t\t\tthis.pixrendered[bufferIndex] !== 0\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tif (t.pix[toffset + i] !== 0) {\r\n\t\t\t\t\t\t\t\t\tthis.spr0HitX = bufferIndex % 256;\r\n\t\t\t\t\t\t\t\t\tthis.spr0HitY = scan;\r\n\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tx++;\r\n\t\t\t\t\t\tbufferIndex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (i = 0; i < 8; i++) {\r\n\t\t\t\t\t\tif (x >= 0 && x < 256) {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tbufferIndex >= 0 &&\r\n\t\t\t\t\t\t\t\tbufferIndex < 61440 &&\r\n\t\t\t\t\t\t\t\tthis.pixrendered[bufferIndex] !== 0\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tif (t.pix[toffset + i] !== 0) {\r\n\t\t\t\t\t\t\t\t\tthis.spr0HitX = bufferIndex % 256;\r\n\t\t\t\t\t\t\t\t\tthis.spr0HitY = scan;\r\n\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tx++;\r\n\t\t\t\t\t\tbufferIndex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t},\r\n\r\n\t// This will write to PPU memory, and\r\n\t// update internally buffered data\r\n\t// appropriately.\r\n\twriteMem: function(address, value) {\r\n\t\tthis.vramMem[address] = value;\r\n\r\n\t\t// Update internally buffered data:\r\n\t\tif (address < 0x2000) {\r\n\t\t\tthis.vramMem[address] = value;\r\n\t\t\tthis.patternWrite(address, value);\r\n\t\t} else if (address >= 0x2000 && address < 0x23c0) {\r\n\t\t\tthis.nameTableWrite(this.ntable1[0], address - 0x2000, value);\r\n\t\t} else if (address >= 0x23c0 && address < 0x2400) {\r\n\t\t\tthis.attribTableWrite(this.ntable1[0], address - 0x23c0, value);\r\n\t\t} else if (address >= 0x2400 && address < 0x27c0) {\r\n\t\t\tthis.nameTableWrite(this.ntable1[1], address - 0x2400, value);\r\n\t\t} else if (address >= 0x27c0 && address < 0x2800) {\r\n\t\t\tthis.attribTableWrite(this.ntable1[1], address - 0x27c0, value);\r\n\t\t} else if (address >= 0x2800 && address < 0x2bc0) {\r\n\t\t\tthis.nameTableWrite(this.ntable1[2], address - 0x2800, value);\r\n\t\t} else if (address >= 0x2bc0 && address < 0x2c00) {\r\n\t\t\tthis.attribTableWrite(this.ntable1[2], address - 0x2bc0, value);\r\n\t\t} else if (address >= 0x2c00 && address < 0x2fc0) {\r\n\t\t\tthis.nameTableWrite(this.ntable1[3], address - 0x2c00, value);\r\n\t\t} else if (address >= 0x2fc0 && address < 0x3000) {\r\n\t\t\tthis.attribTableWrite(this.ntable1[3], address - 0x2fc0, value);\r\n\t\t} else if (address >= 0x3f00 && address < 0x3f20) {\r\n\t\t\tthis.updatePalettes();\r\n\t\t}\r\n\t},\r\n\r\n\t// Reads data from $3f00 to $f20\r\n\t// into the two buffered palettes.\r\n\tupdatePalettes: function() {\r\n\t\tlet i;\r\n\r\n\t\tfor (i = 0; i < 16; i++) {\r\n\t\t\tif (this.f_dispType === 0) {\r\n\t\t\t\tthis.imgPalette[i] = this.palTable.getEntry(\r\n\t\t\t\t\tthis.vramMem[0x3f00 + i] & 63\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tthis.imgPalette[i] = this.palTable.getEntry(\r\n\t\t\t\t\tthis.vramMem[0x3f00 + i] & 32\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (i = 0; i < 16; i++) {\r\n\t\t\tif (this.f_dispType === 0) {\r\n\t\t\t\tthis.sprPalette[i] = this.palTable.getEntry(\r\n\t\t\t\t\tthis.vramMem[0x3f10 + i] & 63\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tthis.sprPalette[i] = this.palTable.getEntry(\r\n\t\t\t\t\tthis.vramMem[0x3f10 + i] & 32\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t// Updates the internal pattern\r\n\t// table buffers with this new byte.\r\n\t// In vNES, there is a version of this with 4 arguments which isn't used.\r\n\tpatternWrite: function(address, value) {\r\n\t\tlet tileIndex = Math.floor(address / 16);\r\n\t\tlet leftOver = address % 16;\r\n\t\tif (leftOver < 8) {\r\n\t\t\tthis.ptTile[tileIndex].setScanline(\r\n\t\t\t\tleftOver,\r\n\t\t\t\tvalue,\r\n\t\t\t\tthis.vramMem[address + 8]\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tthis.ptTile[tileIndex].setScanline(\r\n\t\t\t\tleftOver - 8,\r\n\t\t\t\tthis.vramMem[address - 8],\r\n\t\t\t\tvalue\r\n\t\t\t);\r\n\t\t}\r\n\t},\r\n\r\n\t// Updates the internal name table buffers\r\n\t// with this new byte.\r\n\tnameTableWrite: function(index, address, value) {\r\n\t\tthis.nameTable[index].tile[address] = value;\r\n\r\n\t\t// Update Sprite #0 hit:\r\n\t\t//updateSpr0Hit();\r\n\t\tthis.checkSprite0(this.scanline - 20);\r\n\t},\r\n\r\n\t// Updates the internal pattern\r\n\t// table buffers with this new attribute\r\n\t// table byte.\r\n\tattribTableWrite: function(index, address, value) {\r\n\t\tthis.nameTable[index].writeAttrib(address, value);\r\n\t},\r\n\r\n\t// Updates the internally buffered sprite\r\n\t// data with this new byte of info.\r\n\tspriteRamWriteUpdate: function(address, value) {\r\n\t\tlet tIndex = Math.floor(address / 4);\r\n\r\n\t\tif (tIndex === 0) {\r\n\t\t\t//updateSpr0Hit();\r\n\t\t\tthis.checkSprite0(this.scanline - 20);\r\n\t\t}\r\n\r\n\t\tif (address % 4 === 0) {\r\n\t\t\t// Y coordinate\r\n\t\t\tthis.sprY[tIndex] = value;\r\n\t\t} else if (address % 4 === 1) {\r\n\t\t\t// Tile index\r\n\t\t\tthis.sprTile[tIndex] = value;\r\n\t\t} else if (address % 4 === 2) {\r\n\t\t\t// Attributes\r\n\t\t\tthis.vertFlip[tIndex] = (value & 0x80) !== 0;\r\n\t\t\tthis.horiFlip[tIndex] = (value & 0x40) !== 0;\r\n\t\t\tthis.bgPriority[tIndex] = (value & 0x20) !== 0;\r\n\t\t\tthis.sprCol[tIndex] = (value & 3) << 2;\r\n\t\t} else if (address % 4 === 3) {\r\n\t\t\t// X coordinate\r\n\t\t\tthis.sprX[tIndex] = value;\r\n\t\t}\r\n\t},\r\n\r\n\tdoNMI: function() {\r\n\t\t// Set VBlank flag:\r\n\t\tthis.setStatusFlag(this.STATUS_VBLANK, true);\r\n\t\t//nes.getCpu().doNonMaskableInterrupt();\r\n\t\tthis.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\r\n\t},\r\n\r\n\tisPixelWhite: function(x, y) {\r\n\t\tthis.triggerRendering();\r\n\t\treturn this.nes.ppu.buffer[(y << 8) + x] === 0xffffff;\r\n\t},\r\n\r\n\tJSON_PROPERTIES: [\r\n\t\t// Memory\r\n\t\t\"vramMem\",\r\n\t\t\"spriteMem\",\r\n\t\t// Counters\r\n\t\t\"cntFV\",\r\n\t\t\"cntV\",\r\n\t\t\"cntH\",\r\n\t\t\"cntVT\",\r\n\t\t\"cntHT\",\r\n\t\t// Registers\r\n\t\t\"regFV\",\r\n\t\t\"regV\",\r\n\t\t\"regH\",\r\n\t\t\"regVT\",\r\n\t\t\"regHT\",\r\n\t\t\"regFH\",\r\n\t\t\"regS\",\r\n\t\t// VRAM addr\r\n\t\t\"vramAddress\",\r\n\t\t\"vramTmpAddress\",\r\n\t\t// Control/Status registers\r\n\t\t\"f_nmiOnVblank\",\r\n\t\t\"f_spriteSize\",\r\n\t\t\"f_bgPatternTable\",\r\n\t\t\"f_spPatternTable\",\r\n\t\t\"f_addrInc\",\r\n\t\t\"f_nTblAddress\",\r\n\t\t\"f_color\",\r\n\t\t\"f_spVisibility\",\r\n\t\t\"f_bgVisibility\",\r\n\t\t\"f_spClipping\",\r\n\t\t\"f_bgClipping\",\r\n\t\t\"f_dispType\",\r\n\t\t// VRAM I/O\r\n\t\t\"vramBufferedReadValue\",\r\n\t\t\"firstWrite\",\r\n\t\t// Mirroring\r\n\t\t\"currentMirroring\",\r\n\t\t\"vramMirrorTable\",\r\n\t\t\"ntable1\",\r\n\t\t// SPR-RAM I/O\r\n\t\t\"sramAddress\",\r\n\t\t// Sprites. Most sprite data is rebuilt from spriteMem\r\n\t\t\"hitSpr0\",\r\n\t\t// Palettes\r\n\t\t\"sprPalette\",\r\n\t\t\"imgPalette\",\r\n\t\t// Rendering progression\r\n\t\t\"curX\",\r\n\t\t\"scanline\",\r\n\t\t\"lastRenderedScanline\",\r\n\t\t\"curNt\",\r\n\t\t\"scantile\",\r\n\t\t// Used during rendering\r\n\t\t\"attrib\",\r\n\t\t\"buffer\",\r\n\t\t\"bgbuffer\",\r\n\t\t\"pixrendered\",\r\n\t\t// Misc\r\n\t\t\"requestEndFrame\",\r\n\t\t\"nmiOk\",\r\n\t\t\"dummyCycleToggle\",\r\n\t\t\"nmiCounter\",\r\n\t\t\"validTileData\",\r\n\t\t\"scanlineAlreadyRendered\",\r\n\t],\r\n\r\n\ttoJSON: function() {\r\n\t\tlet i;\r\n\t\tlet state = utils.toJSON(this);\r\n\r\n\t\tstate.nameTable = [];\r\n\t\tfor (i = 0; i < this.nameTable.length; i++) {\r\n\t\t\tstate.nameTable[i] = this.nameTable[i].toJSON();\r\n\t\t}\r\n\r\n\t\tstate.ptTile = [];\r\n\t\tfor (i = 0; i < this.ptTile.length; i++) {\r\n\t\t\tstate.ptTile[i] = this.ptTile[i].toJSON();\r\n\t\t}\r\n\r\n\t\treturn state;\r\n\t},\r\n\r\n\tfromJSON: function(state) {\r\n\t\tlet i;\r\n\r\n\t\tutils.fromJSON(this, state);\r\n\r\n\t\tfor (i = 0; i < this.nameTable.length; i++) {\r\n\t\t\tthis.nameTable[i].fromJSON(state.nameTable[i]);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < this.ptTile.length; i++) {\r\n\t\t\tthis.ptTile[i].fromJSON(state.ptTile[i]);\r\n\t\t}\r\n\r\n\t\t// Sprite data:\r\n\t\tfor (i = 0; i < this.spriteMem.length; i++) {\r\n\t\t\tthis.spriteRamWriteUpdate(i, this.spriteMem[i]);\r\n\t\t}\r\n\t},\r\n};\r\n\r\nlet NameTable = function(width, height, name) {\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\tthis.name = name;\r\n\r\n\tthis.tile = new Array(width * height);\r\n\tthis.attrib = new Array(width * height);\r\n\tfor (let i = 0; i < width * height; i++) {\r\n\t\tthis.tile[i] = 0;\r\n\t\tthis.attrib[i] = 0;\r\n\t}\r\n};\r\n\r\nNameTable.prototype = {\r\n\tgetTileIndex: function(x, y) {\r\n\t\treturn this.tile[y * this.width + x];\r\n\t},\r\n\r\n\tgetAttrib: function(x, y) {\r\n\t\treturn this.attrib[y * this.width + x];\r\n\t},\r\n\r\n\twriteAttrib: function(index, value) {\r\n\t\tlet basex = (index % 8) * 4;\r\n\t\tlet basey = Math.floor(index / 8) * 4;\r\n\t\tlet add;\r\n\t\tlet tx, ty;\r\n\t\tlet attindex;\r\n\r\n\t\tfor (let sqy = 0; sqy < 2; sqy++) {\r\n\t\t\tfor (let sqx = 0; sqx < 2; sqx++) {\r\n\t\t\t\tadd = (value >> (2 * (sqy * 2 + sqx))) & 3;\r\n\t\t\t\tfor (let y = 0; y < 2; y++) {\r\n\t\t\t\t\tfor (let x = 0; x < 2; x++) {\r\n\t\t\t\t\t\ttx = basex + sqx * 2 + x;\r\n\t\t\t\t\t\tty = basey + sqy * 2 + y;\r\n\t\t\t\t\t\tattindex = ty * this.width + tx;\r\n\t\t\t\t\t\tthis.attrib[attindex] = (add << 2) & 12;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\ttoJSON: function() {\r\n\t\treturn {\r\n\t\t\ttile: this.tile,\r\n\t\t\tattrib: this.attrib,\r\n\t\t};\r\n\t},\r\n\r\n\tfromJSON: function(s) {\r\n\t\tthis.tile = s.tile;\r\n\t\tthis.attrib = s.attrib;\r\n\t},\r\n};\r\n\r\nlet PaletteTable = function() {\r\n\tthis.curTable = new Array(64);\r\n\tthis.emphTable = new Array(8);\r\n\tthis.currentEmph = -1;\r\n};\r\n\r\nPaletteTable.prototype = {\r\n\treset: function() {\r\n\t\tthis.setEmphasis(0);\r\n\t},\r\n\r\n\tloadNTSCPalette: function() {\r\n\t\t// prettier-ignore\r\n\t\t//this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\r\n\t\tthis.curTable = [\r\n\t\t\t0x656565, 0x9B2B00, 0xC00E11, 0xBC003F, 0x8F0066, 0x45007B, 0x000179, 0x001C60,\r\n\t\t\t0x003836, 0x004F08, 0x005A00, 0x025700, 0x554500, 0x000000, 0x000000, 0x000000,\r\n\t\t\t0xAEAEAE, 0xF56107, 0xFF3B3E, 0xFF1D7C, 0xE50EAF, 0x8313CB, 0x152ACB, 0x004DA7,\r\n\t\t\t0x00726F, 0x009132, 0x009F00, 0x2A9B00, 0x988400, 0x000000, 0x000000, 0x000000,\r\n\t\t\t0xFFFFFF, 0xFFB156, 0xFF8B8E, 0xFF6CCC, 0xFF5DFF, 0xD462FF, 0x6479FF, 0x069DF8,\r\n\t\t\t0x00C3C0, 0x00E281, 0x16F14D, 0x7AEC30, 0xEAD534, 0x4E4E4E, 0x000000, 0x000000,\r\n\t\t\t0xFFFFFF, 0xFFDFBA, 0xFFD0D1, 0xFFC3EB, 0xFFBDFF, 0xFFBFFF, 0xC0C8FF, 0x99D7FC,\r\n\t\t\t0x84E7E5, 0x87F3CC, 0xA0F9B6, 0xC9F8AA, 0xF7EEAC, 0xB7B7B7, 0x000000, 0x000000\r\n\t\t];\r\n\t\tthis.makeTables();\r\n\t\tthis.setEmphasis(0);\r\n\t},\r\n\r\n\tloadPALPalette: function() {\r\n\t\t// prettier-ignore\r\n\t\tthis.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840,\r\n\t\t\t0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7,\r\n\t\t\t0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03,\r\n\t\t\t0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981,\r\n\t\t\t0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E,\r\n\t\t\t0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF,\r\n\t\t\t0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8,\r\n\t\t\t0x000000, 0x000000\r\n\t\t];\r\n\t\tthis.makeTables();\r\n\t\tthis.setEmphasis(0);\r\n\t},\r\n\r\n\tmakeTables: function() {\r\n\t\tlet r, g, b, col, i, rFactor, gFactor, bFactor;\r\n\r\n\t\t// Calculate a table for each possible emphasis setting:\r\n\t\tfor (let emph = 0; emph < 8; emph++) {\r\n\t\t\t// Determine color component factors:\r\n\t\t\trFactor = 1.0;\r\n\t\t\tgFactor = 1.0;\r\n\t\t\tbFactor = 1.0;\r\n\r\n\t\t\tif ((emph & 1) !== 0) {\r\n\t\t\t\trFactor = 0.75;\r\n\t\t\t\tbFactor = 0.75;\r\n\t\t\t}\r\n\t\t\tif ((emph & 2) !== 0) {\r\n\t\t\t\trFactor = 0.75;\r\n\t\t\t\tgFactor = 0.75;\r\n\t\t\t}\r\n\t\t\tif ((emph & 4) !== 0) {\r\n\t\t\t\tgFactor = 0.75;\r\n\t\t\t\tbFactor = 0.75;\r\n\t\t\t}\r\n\r\n\t\t\tthis.emphTable[emph] = new Array(64);\r\n\r\n\t\t\t// Calculate table:\r\n\t\t\tfor (i = 0; i < 64; i++) {\r\n\t\t\t\tcol = this.curTable[i];\r\n\t\t\t\tr = Math.floor(this.getRed(col) * rFactor);\r\n\t\t\t\tg = Math.floor(this.getGreen(col) * gFactor);\r\n\t\t\t\tb = Math.floor(this.getBlue(col) * bFactor);\r\n\t\t\t\tthis.emphTable[emph][i] = this.getRgb(r, g, b);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tsetEmphasis: function(emph) {\r\n\t\tif (emph !== this.currentEmph) {\r\n\t\t\tthis.currentEmph = emph;\r\n\t\t\tfor (let i = 0; i < 64; i++) {\r\n\t\t\t\tthis.curTable[i] = this.emphTable[emph][i];\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tgetEntry: function(yiq) {\r\n\t\treturn this.curTable[yiq];\r\n\t},\r\n\r\n\tgetRed: function(rgb) {\r\n\t\treturn (rgb >> 16) & 0xff;\r\n\t},\r\n\r\n\tgetGreen: function(rgb) {\r\n\t\treturn (rgb >> 8) & 0xff;\r\n\t},\r\n\r\n\tgetBlue: function(rgb) {\r\n\t\treturn rgb & 0xff;\r\n\t},\r\n\r\n\tgetRgb: function(r, g, b) {\r\n\t\treturn (r << 16) | (g << 8) | b;\r\n\t},\r\n\r\n\tloadDefaultPalette: function() {\r\n\t\tthis.curTable[0] = this.getRgb(117, 117, 117);\r\n\t\tthis.curTable[1] = this.getRgb(39, 27, 143);\r\n\t\tthis.curTable[2] = this.getRgb(0, 0, 171);\r\n\t\tthis.curTable[3] = this.getRgb(71, 0, 159);\r\n\t\tthis.curTable[4] = this.getRgb(143, 0, 119);\r\n\t\tthis.curTable[5] = this.getRgb(171, 0, 19);\r\n\t\tthis.curTable[6] = this.getRgb(167, 0, 0);\r\n\t\tthis.curTable[7] = this.getRgb(127, 11, 0);\r\n\t\tthis.curTable[8] = this.getRgb(67, 47, 0);\r\n\t\tthis.curTable[9] = this.getRgb(0, 71, 0);\r\n\t\tthis.curTable[10] = this.getRgb(0, 81, 0);\r\n\t\tthis.curTable[11] = this.getRgb(0, 63, 23);\r\n\t\tthis.curTable[12] = this.getRgb(27, 63, 95);\r\n\t\tthis.curTable[13] = this.getRgb(0, 0, 0);\r\n\t\tthis.curTable[14] = this.getRgb(0, 0, 0);\r\n\t\tthis.curTable[15] = this.getRgb(0, 0, 0);\r\n\t\tthis.curTable[16] = this.getRgb(188, 188, 188);\r\n\t\tthis.curTable[17] = this.getRgb(0, 115, 239);\r\n\t\tthis.curTable[18] = this.getRgb(35, 59, 239);\r\n\t\tthis.curTable[19] = this.getRgb(131, 0, 243);\r\n\t\tthis.curTable[20] = this.getRgb(191, 0, 191);\r\n\t\tthis.curTable[21] = this.getRgb(231, 0, 91);\r\n\t\tthis.curTable[22] = this.getRgb(219, 43, 0);\r\n\t\tthis.curTable[23] = this.getRgb(203, 79, 15);\r\n\t\tthis.curTable[24] = this.getRgb(139, 115, 0);\r\n\t\tthis.curTable[25] = this.getRgb(0, 151, 0);\r\n\t\tthis.curTable[26] = this.getRgb(0, 171, 0);\r\n\t\tthis.curTable[27] = this.getRgb(0, 147, 59);\r\n\t\tthis.curTable[28] = this.getRgb(0, 131, 139);\r\n\t\tthis.curTable[29] = this.getRgb(0, 0, 0);\r\n\t\tthis.curTable[30] = this.getRgb(0, 0, 0);\r\n\t\tthis.curTable[31] = this.getRgb(0, 0, 0);\r\n\t\tthis.curTable[32] = this.getRgb(255, 255, 255);\r\n\t\tthis.curTable[33] = this.getRgb(63, 191, 255);\r\n\t\tthis.curTable[34] = this.getRgb(95, 151, 255);\r\n\t\tthis.curTable[35] = this.getRgb(167, 139, 253);\r\n\t\tthis.curTable[36] = this.getRgb(247, 123, 255);\r\n\t\tthis.curTable[37] = this.getRgb(255, 119, 183);\r\n\t\tthis.curTable[38] = this.getRgb(255, 119, 99);\r\n\t\tthis.curTable[39] = this.getRgb(255, 155, 59);\r\n\t\tthis.curTable[40] = this.getRgb(243, 191, 63);\r\n\t\tthis.curTable[41] = this.getRgb(131, 211, 19);\r\n\t\tthis.curTable[42] = this.getRgb(79, 223, 75);\r\n\t\tthis.curTable[43] = this.getRgb(88, 248, 152);\r\n\t\tthis.curTable[44] = this.getRgb(0, 235, 219);\r\n\t\tthis.curTable[45] = this.getRgb(0, 0, 0);\r\n\t\tthis.curTable[46] = this.getRgb(0, 0, 0);\r\n\t\tthis.curTable[47] = this.getRgb(0, 0, 0);\r\n\t\tthis.curTable[48] = this.getRgb(255, 255, 255);\r\n\t\tthis.curTable[49] = this.getRgb(171, 231, 255);\r\n\t\tthis.curTable[50] = this.getRgb(199, 215, 255);\r\n\t\tthis.curTable[51] = this.getRgb(215, 203, 255);\r\n\t\tthis.curTable[52] = this.getRgb(255, 199, 255);\r\n\t\tthis.curTable[53] = this.getRgb(255, 199, 219);\r\n\t\tthis.curTable[54] = this.getRgb(255, 191, 179);\r\n\t\tthis.curTable[55] = this.getRgb(255, 219, 171);\r\n\t\tthis.curTable[56] = this.getRgb(255, 231, 163);\r\n\t\tthis.curTable[57] = this.getRgb(227, 255, 163);\r\n\t\tthis.curTable[58] = this.getRgb(171, 243, 191);\r\n\t\tthis.curTable[59] = this.getRgb(179, 255, 207);\r\n\t\tthis.curTable[60] = this.getRgb(159, 255, 243);\r\n\t\tthis.curTable[61] = this.getRgb(0, 0, 0);\r\n\t\tthis.curTable[62] = this.getRgb(0, 0, 0);\r\n\t\tthis.curTable[63] = this.getRgb(0, 0, 0);\r\n\r\n\t\tthis.makeTables();\r\n\t\tthis.setEmphasis(0);\r\n\t},\r\n};\r\n\r\nmodule.exports = PPU;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ppu.js\n// module id = 6\n// module chunks = 0 1","let utils = require(\"./utils\");\r\n\r\nlet CPU_FREQ_NTSC = 1789772.5; //1789772.72727272d;\r\n// let CPU_FREQ_PAL = 1773447.4;\r\n\r\nlet PAPU = function(nes) {\r\n\tthis.nes = nes;\r\n\r\n\tthis.square1 = new ChannelSquare(this, true);\r\n\tthis.square2 = new ChannelSquare(this, false);\r\n\tthis.triangle = new ChannelTriangle(this);\r\n\tthis.noise = new ChannelNoise(this);\r\n\tthis.dmc = new ChannelDM(this);\r\n\r\n\tthis.frameIrqCounter = null;\r\n\tthis.frameIrqCounterMax = 4;\r\n\tthis.initCounter = 2048;\r\n\tthis.channelEnableValue = null;\r\n\r\n\tthis.sampleRate = 44100;\r\n\r\n\tthis.lengthLookup = null;\r\n\tthis.dmcFreqLookup = null;\r\n\tthis.noiseWavelengthLookup = null;\r\n\tthis.square_table = null;\r\n\tthis.tnd_table = null;\r\n\r\n\tthis.frameIrqEnabled = false;\r\n\tthis.frameIrqActive = null;\r\n\tthis.frameClockNow = null;\r\n\tthis.startedPlaying = false;\r\n\tthis.recordOutput = false;\r\n\tthis.initingHardware = false;\r\n\r\n\tthis.masterFrameCounter = null;\r\n\tthis.derivedFrameCounter = null;\r\n\tthis.countSequence = null;\r\n\tthis.sampleTimer = null;\r\n\tthis.frameTime = null;\r\n\tthis.sampleTimerMax = null;\r\n\tthis.sampleCount = null;\r\n\tthis.triValue = 0;\r\n\r\n\tthis.smpSquare1 = null;\r\n\tthis.smpSquare2 = null;\r\n\tthis.smpTriangle = null;\r\n\tthis.smpDmc = null;\r\n\tthis.accCount = null;\r\n\r\n\t// DC removal vars:\r\n\tthis.prevSampleL = 0;\r\n\tthis.prevSampleR = 0;\r\n\tthis.smpAccumL = 0;\r\n\tthis.smpAccumR = 0;\r\n\r\n\t// DAC range:\r\n\tthis.dacRange = 0;\r\n\tthis.dcValue = 0;\r\n\r\n\t// Master volume:\r\n\tthis.masterVolume = 256;\r\n\r\n\t// Stereo positioning:\r\n\tthis.stereoPosLSquare1 = null;\r\n\tthis.stereoPosLSquare2 = null;\r\n\tthis.stereoPosLTriangle = null;\r\n\tthis.stereoPosLNoise = null;\r\n\tthis.stereoPosLDMC = null;\r\n\tthis.stereoPosRSquare1 = null;\r\n\tthis.stereoPosRSquare2 = null;\r\n\tthis.stereoPosRTriangle = null;\r\n\tthis.stereoPosRNoise = null;\r\n\tthis.stereoPosRDMC = null;\r\n\r\n\tthis.extraCycles = null;\r\n\r\n\tthis.maxSample = null;\r\n\tthis.minSample = null;\r\n\r\n\t// Mixing:\r\n\tthis.enabled = [true, true, true, true, true];\r\n\tthis.volume = [1.15, 1.15, 1.0, 1.0, 1.0];\r\n\tthis.panning = [128, 128, 128, 128, 128];\r\n\tthis.setPanning(this.panning);\r\n\r\n\t// Initialize lookup tables:\r\n\tthis.initLengthLookup();\r\n\tthis.initDmcFrequencyLookup();\r\n\tthis.initNoiseWavelengthLookup();\r\n\tthis.initDACtables();\r\n\r\n\t// Init sound registers:\r\n\tfor (let i = 0; i < 0x14; i++) {\r\n\t\tif (i === 0x10) {\r\n\t\t\tthis.writeReg(0x4010, 0x10);\r\n\t\t} else {\r\n\t\t\tthis.writeReg(0x4000 + i, 0);\r\n\t\t}\r\n\t}\r\n\r\n\tthis.reset();\r\n};\r\n\r\nPAPU.prototype = {\r\n\treset: function() {\r\n\t\tthis.sampleRate = this.nes.opts.sampleRate;\r\n\t\tthis.sampleTimerMax = Math.floor(\r\n\t\t\t(1024.0 * CPU_FREQ_NTSC * this.nes.opts.preferredFrameRate) /\r\n\t\t\t(this.sampleRate * 60.0)\r\n\t\t);\r\n\r\n\t\tthis.frameTime = Math.floor(\r\n\t\t\t(14915.0 * this.nes.opts.preferredFrameRate) / 60.0\r\n\t\t);\r\n\r\n\t\tthis.sampleTimer = 0;\r\n\r\n\t\tthis.updateChannelEnable(0);\r\n\t\tthis.masterFrameCounter = 0;\r\n\t\tthis.derivedFrameCounter = 0;\r\n\t\tthis.countSequence = 0;\r\n\t\tthis.sampleCount = 0;\r\n\t\tthis.initCounter = 2048;\r\n\t\tthis.frameIrqEnabled = false;\r\n\t\tthis.initingHardware = false;\r\n\r\n\t\tthis.resetCounter();\r\n\r\n\t\tthis.square1.reset();\r\n\t\tthis.square2.reset();\r\n\t\tthis.triangle.reset();\r\n\t\tthis.noise.reset();\r\n\t\tthis.dmc.reset();\r\n\r\n\t\tthis.accCount = 0;\r\n\t\tthis.smpSquare1 = 0;\r\n\t\tthis.smpSquare2 = 0;\r\n\t\tthis.smpTriangle = 0;\r\n\t\tthis.smpDmc = 0;\r\n\r\n\t\tthis.frameIrqEnabled = false;\r\n\t\tthis.frameIrqCounterMax = 4;\r\n\r\n\t\tthis.channelEnableValue = 0xff;\r\n\t\tthis.startedPlaying = false;\r\n\t\tthis.prevSampleL = 0;\r\n\t\tthis.prevSampleR = 0;\r\n\t\tthis.smpAccumL = 0;\r\n\t\tthis.smpAccumR = 0;\r\n\r\n\t\tthis.maxSample = -500000;\r\n\t\tthis.minSample = 500000;\r\n\t},\r\n\r\n\t// eslint-disable-next-line no-unused-vars\r\n\treadReg: function(address) {\r\n\t\t// Read 0x4015:\r\n\t\tlet tmp = 0;\r\n\t\ttmp |= this.square1.getLengthStatus();\r\n\t\ttmp |= this.square2.getLengthStatus() << 1;\r\n\t\ttmp |= this.triangle.getLengthStatus() << 2;\r\n\t\ttmp |= this.noise.getLengthStatus() << 3;\r\n\t\ttmp |= this.dmc.getLengthStatus() << 4;\r\n\t\ttmp |= (this.frameIrqActive && this.frameIrqEnabled ? 1 : 0) << 6;\r\n\t\ttmp |= this.dmc.getIrqStatus() << 7;\r\n\r\n\t\tthis.frameIrqActive = false;\r\n\t\tthis.dmc.irqGenerated = false;\r\n\r\n\t\treturn tmp & 0xffff;\r\n\t},\r\n\r\n\twriteReg: function(address, value) {\r\n\t\tif (address >= 0x4000 && address < 0x4004) {\r\n\t\t\t// Square Wave 1 Control\r\n\t\t\tthis.square1.writeReg(address, value);\r\n\t\t\t// console.log(\"Square Write\");\r\n\t\t} else if (address >= 0x4004 && address < 0x4008) {\r\n\t\t\t// Square 2 Control\r\n\t\t\tthis.square2.writeReg(address, value);\r\n\t\t} else if (address >= 0x4008 && address < 0x400c) {\r\n\t\t\t// Triangle Control\r\n\t\t\tthis.triangle.writeReg(address, value);\r\n\t\t} else if (address >= 0x400c && address <= 0x400f) {\r\n\t\t\t// Noise Control\r\n\t\t\tthis.noise.writeReg(address, value);\r\n\t\t} else if (address === 0x4010) {\r\n\t\t\t// DMC Play mode & DMA frequency\r\n\t\t\tthis.dmc.writeReg(address, value);\r\n\t\t} else if (address === 0x4011) {\r\n\t\t\t// DMC Delta Counter\r\n\t\t\tthis.dmc.writeReg(address, value);\r\n\t\t} else if (address === 0x4012) {\r\n\t\t\t// DMC Play code starting address\r\n\t\t\tthis.dmc.writeReg(address, value);\r\n\t\t} else if (address === 0x4013) {\r\n\t\t\t// DMC Play code length\r\n\t\t\tthis.dmc.writeReg(address, value);\r\n\t\t} else if (address === 0x4015) {\r\n\t\t\t// Channel enable\r\n\t\t\tthis.updateChannelEnable(value);\r\n\r\n\t\t\tif (value !== 0 && this.initCounter > 0) {\r\n\t\t\t\t// Start hardware initialization\r\n\t\t\t\tthis.initingHardware = true;\r\n\t\t\t}\r\n\r\n\t\t\t// DMC/IRQ Status\r\n\t\t\tthis.dmc.writeReg(address, value);\r\n\t\t} else if (address === 0x4017) {\r\n\t\t\t// Frame counter control\r\n\t\t\tthis.countSequence = (value >> 7) & 1;\r\n\t\t\tthis.masterFrameCounter = 0;\r\n\t\t\tthis.frameIrqActive = false;\r\n\r\n\t\t\tif (((value >> 6) & 0x1) === 0) {\r\n\t\t\t\tthis.frameIrqEnabled = true;\r\n\t\t\t} else {\r\n\t\t\t\tthis.frameIrqEnabled = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.countSequence === 0) {\r\n\t\t\t\t// NTSC:\r\n\t\t\t\tthis.frameIrqCounterMax = 4;\r\n\t\t\t\tthis.derivedFrameCounter = 4;\r\n\t\t\t} else {\r\n\t\t\t\t// PAL:\r\n\t\t\t\tthis.frameIrqCounterMax = 5;\r\n\t\t\t\tthis.derivedFrameCounter = 0;\r\n\t\t\t\tthis.frameCounterTick();\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tresetCounter: function() {\r\n\t\tif (this.countSequence === 0) {\r\n\t\t\tthis.derivedFrameCounter = 4;\r\n\t\t} else {\r\n\t\t\tthis.derivedFrameCounter = 0;\r\n\t\t}\r\n\t},\r\n\r\n\t// Updates channel enable status.\r\n\t// This is done on writes to the\r\n\t// channel enable register (0x4015),\r\n\t// and when the user enables/disables channels\r\n\t// in the GUI.\r\n\tupdateChannelEnable: function(value) {\r\n\t\tthis.channelEnableValue = value & 0xffff;\r\n\t\tthis.square1.setEnabled((value & 1) !== 0);\r\n\t\tthis.square2.setEnabled((value & 2) !== 0);\r\n\t\tthis.triangle.setEnabled((value & 4) !== 0);\r\n\t\tthis.noise.setEnabled((value & 8) !== 0);\r\n\t\tthis.dmc.setEnabled((value & 16) !== 0);\r\n\t},\r\n\r\n\t// Clocks the frame counter. It should be clocked at\r\n\t// twice the cpu speed, so the cycles will be\r\n\t// divided by 2 for those counters that are\r\n\t// clocked at cpu speed.\r\n\tclockFrameCounter: function(nCycles) {\r\n\t\tif (this.initCounter > 0) {\r\n\t\t\tif (this.initingHardware) {\r\n\t\t\t\tthis.initCounter -= nCycles;\r\n\t\t\t\tif (this.initCounter <= 0) {\r\n\t\t\t\t\tthis.initingHardware = false;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Don't process ticks beyond next sampling:\r\n\t\tnCycles += this.extraCycles;\r\n\t\tlet maxCycles = this.sampleTimerMax - this.sampleTimer;\r\n\t\tif (nCycles << 10 > maxCycles) {\r\n\t\t\tthis.extraCycles = ((nCycles << 10) - maxCycles) >> 10;\r\n\t\t\tnCycles -= this.extraCycles;\r\n\t\t} else {\r\n\t\t\tthis.extraCycles = 0;\r\n\t\t}\r\n\r\n\t\tlet dmc = this.dmc;\r\n\t\tlet triangle = this.triangle;\r\n\t\tlet square1 = this.square1;\r\n\t\tlet square2 = this.square2;\r\n\t\tlet noise = this.noise;\r\n\r\n\t\t// Clock DMC:\r\n\t\tif (dmc.isEnabled) {\r\n\t\t\tdmc.shiftCounter -= nCycles << 3;\r\n\t\t\twhile (dmc.shiftCounter <= 0 && dmc.dmaFrequency > 0) {\r\n\t\t\t\tdmc.shiftCounter += dmc.dmaFrequency;\r\n\t\t\t\tdmc.clockDmc();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Clock Triangle channel Prog timer:\r\n\t\tif (triangle.progTimerMax > 0) {\r\n\t\t\ttriangle.progTimerCount -= nCycles;\r\n\t\t\twhile (triangle.progTimerCount <= 0) {\r\n\t\t\t\ttriangle.progTimerCount += triangle.progTimerMax + 1;\r\n\t\t\t\tif (triangle.linearCounter > 0 && triangle.lengthCounter > 0) {\r\n\t\t\t\t\ttriangle.triangleCounter++;\r\n\t\t\t\t\ttriangle.triangleCounter &= 0x1f;\r\n\r\n\t\t\t\t\tif (triangle.isEnabled) {\r\n\t\t\t\t\t\tif (triangle.triangleCounter >= 0x10) {\r\n\t\t\t\t\t\t\t// Normal value.\r\n\t\t\t\t\t\t\ttriangle.sampleValue = triangle.triangleCounter & 0xf;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Inverted value.\r\n\t\t\t\t\t\t\ttriangle.sampleValue = 0xf - (triangle.triangleCounter & 0xf);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttriangle.sampleValue <<= 4;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Clock Square channel 1 Prog timer:\r\n\t\tsquare1.progTimerCount -= nCycles;\r\n\t\tif (square1.progTimerCount <= 0) {\r\n\t\t\tsquare1.progTimerCount += (square1.progTimerMax + 1) << 1;\r\n\r\n\t\t\tsquare1.squareCounter++;\r\n\t\t\tsquare1.squareCounter &= 0x7;\r\n\t\t\tsquare1.updateSampleValue();\r\n\t\t}\r\n\r\n\t\t// Clock Square channel 2 Prog timer:\r\n\t\tsquare2.progTimerCount -= nCycles;\r\n\t\tif (square2.progTimerCount <= 0) {\r\n\t\t\tsquare2.progTimerCount += (square2.progTimerMax + 1) << 1;\r\n\r\n\t\t\tsquare2.squareCounter++;\r\n\t\t\tsquare2.squareCounter &= 0x7;\r\n\t\t\tsquare2.updateSampleValue();\r\n\t\t}\r\n\r\n\t\t// Clock noise channel Prog timer:\r\n\t\tlet acc_c = nCycles;\r\n\t\tif (noise.progTimerCount - acc_c > 0) {\r\n\t\t\t// Do all cycles at once:\r\n\t\t\tnoise.progTimerCount -= acc_c;\r\n\t\t\tnoise.accCount += acc_c;\r\n\t\t\tnoise.accValue += acc_c * noise.sampleValue;\r\n\t\t} else {\r\n\t\t\t// Slow-step:\r\n\t\t\twhile (acc_c-- > 0) {\r\n\t\t\t\tif (--noise.progTimerCount <= 0 && noise.progTimerMax > 0) {\r\n\t\t\t\t\t// Update noise shift register:\r\n\t\t\t\t\tnoise.shiftReg <<= 1;\r\n\t\t\t\t\tnoise.tmp =\r\n\t\t\t\t\t\t((noise.shiftReg << (noise.randomMode === 0 ? 1 : 6)) ^\r\n\t\t\t\t\t\t\tnoise.shiftReg) &\r\n\t\t\t\t\t\t0x8000;\r\n\t\t\t\t\tif (noise.tmp !== 0) {\r\n\t\t\t\t\t\t// Sample value must be 0.\r\n\t\t\t\t\t\tnoise.shiftReg |= 0x01;\r\n\t\t\t\t\t\tnoise.randomBit = 0;\r\n\t\t\t\t\t\tnoise.sampleValue = 0;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Find sample value:\r\n\t\t\t\t\t\tnoise.randomBit = 1;\r\n\t\t\t\t\t\tif (noise.isEnabled && noise.lengthCounter > 0) {\r\n\t\t\t\t\t\t\tnoise.sampleValue = noise.masterVolume;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tnoise.sampleValue = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnoise.progTimerCount += noise.progTimerMax;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnoise.accValue += noise.sampleValue;\r\n\t\t\t\tnoise.accCount++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Frame IRQ handling:\r\n\t\tif (this.frameIrqEnabled && this.frameIrqActive) {\r\n\t\t\tthis.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\r\n\t\t}\r\n\r\n\t\t// Clock frame counter at double CPU speed:\r\n\t\tthis.masterFrameCounter += nCycles << 1;\r\n\t\tif (this.masterFrameCounter >= this.frameTime) {\r\n\t\t\t// 240Hz tick:\r\n\t\t\tthis.masterFrameCounter -= this.frameTime;\r\n\t\t\tthis.frameCounterTick();\r\n\t\t}\r\n\r\n\t\t// Accumulate sample value:\r\n\t\tthis.accSample(nCycles);\r\n\r\n\t\t// Clock sample timer:\r\n\t\tthis.sampleTimer += nCycles << 10;\r\n\t\tif (this.sampleTimer >= this.sampleTimerMax) {\r\n\t\t\t// Sample channels:\r\n\t\t\tthis.sample();\r\n\t\t\tthis.sampleTimer -= this.sampleTimerMax;\r\n\t\t}\r\n\t},\r\n\r\n\taccSample: function(cycles) {\r\n\t\t// Special treatment for triangle channel - need to interpolate.\r\n\t\tif (this.triangle.sampleCondition) {\r\n\t\t\t// Remove triangle interpolation:\r\n\t\t\tthis.triValue = 0;\r\n\r\n\t\t\t// Add non-interpolated sample value:\r\n\t\t\tthis.triValue += this.triangle.sampleValue;\r\n\t\t}\r\n\r\n\t\t// Now sample normally:\r\n\t\tif (cycles === 2) {\r\n\t\t\tthis.smpTriangle += this.triValue << 1;\r\n\t\t\tthis.smpDmc += this.dmc.sample << 1;\r\n\t\t\tthis.smpSquare1 += this.square1.sampleValue << 1;\r\n\t\t\tthis.smpSquare2 += this.square2.sampleValue << 1;\r\n\t\t\tthis.accCount += 2;\r\n\t\t} else if (cycles === 4) {\r\n\t\t\tthis.smpTriangle += this.triValue << 2;\r\n\t\t\tthis.smpDmc += this.dmc.sample << 2;\r\n\t\t\tthis.smpSquare1 += this.square1.sampleValue << 2;\r\n\t\t\tthis.smpSquare2 += this.square2.sampleValue << 2;\r\n\t\t\tthis.accCount += 4;\r\n\t\t} else {\r\n\t\t\tthis.smpTriangle += cycles * this.triValue;\r\n\t\t\tthis.smpDmc += cycles * this.dmc.sample;\r\n\t\t\tthis.smpSquare1 += cycles * this.square1.sampleValue;\r\n\t\t\tthis.smpSquare2 += cycles * this.square2.sampleValue;\r\n\t\t\tthis.accCount += cycles;\r\n\t\t}\r\n\t},\r\n\r\n\tframeCounterTick: function() {\r\n\t\tthis.derivedFrameCounter++;\r\n\t\tif (this.derivedFrameCounter >= this.frameIrqCounterMax) {\r\n\t\t\tthis.derivedFrameCounter = 0;\r\n\t\t}\r\n\r\n\t\tif (this.derivedFrameCounter === 1 || this.derivedFrameCounter === 3) {\r\n\t\t\t// Clock length & sweep:\r\n\t\t\tthis.triangle.clockLengthCounter();\r\n\t\t\tthis.square1.clockLengthCounter();\r\n\t\t\tthis.square2.clockLengthCounter();\r\n\t\t\tthis.noise.clockLengthCounter();\r\n\t\t\tthis.square1.clockSweep();\r\n\t\t\tthis.square2.clockSweep();\r\n\t\t}\r\n\r\n\t\tif (this.derivedFrameCounter >= 0 && this.derivedFrameCounter < 4) {\r\n\t\t\t// Clock linear & decay:\r\n\t\t\tthis.square1.clockEnvDecay();\r\n\t\t\tthis.square2.clockEnvDecay();\r\n\t\t\tthis.noise.clockEnvDecay();\r\n\t\t\tthis.triangle.clockLinearCounter();\r\n\t\t}\r\n\r\n\t\tif (this.derivedFrameCounter === 3 && this.countSequence === 0) {\r\n\t\t\t// Enable IRQ:\r\n\t\t\tthis.frameIrqActive = true;\r\n\t\t}\r\n\r\n\t\t// End of 240Hz tick\r\n\t},\r\n\r\n\t// Samples the channels, mixes the output together, then writes to buffer.\r\n\tsample: function() {\r\n\t\tlet sq_index, tnd_index;\r\n\r\n\t\tif (this.accCount > 0) {\r\n\t\t\tthis.smpSquare1 <<= 4;\r\n\t\t\tthis.smpSquare1 = Math.floor(this.smpSquare1 / this.accCount);\r\n\r\n\t\t\tthis.smpSquare2 <<= 4;\r\n\t\t\tthis.smpSquare2 = Math.floor(this.smpSquare2 / this.accCount);\r\n\r\n\t\t\tthis.smpTriangle = Math.floor(this.smpTriangle / this.accCount);\r\n\r\n\t\t\tthis.smpDmc <<= 4;\r\n\t\t\tthis.smpDmc = Math.floor(this.smpDmc / this.accCount);\r\n\r\n\t\t\tthis.accCount = 0;\r\n\t\t} else {\r\n\t\t\tthis.smpSquare1 = this.square1.sampleValue << 4;\r\n\t\t\tthis.smpSquare2 = this.square2.sampleValue << 4;\r\n\t\t\tthis.smpTriangle = this.triangle.sampleValue;\r\n\t\t\tthis.smpDmc = this.dmc.sample << 4;\r\n\t\t}\r\n\r\n\t\tlet smpNoise = Math.floor((this.noise.accValue << 4) / this.noise.accCount);\r\n\t\tthis.noise.accValue = smpNoise >> 4;\r\n\t\tthis.noise.accCount = 1;\r\n\r\n\t\t// Stereo sound.\r\n\r\n\t\t// Left channel:\r\n\t\tsq_index =\r\n\t\t\t(this.smpSquare1 * this.stereoPosLSquare1 +\r\n\t\t\t\tthis.smpSquare2 * this.stereoPosLSquare2) >>\r\n\t\t\t8;\r\n\t\ttnd_index =\r\n\t\t\t(3 * this.smpTriangle * this.stereoPosLTriangle +\r\n\t\t\t\t(smpNoise << 1) * this.stereoPosLNoise +\r\n\t\t\t\tthis.smpDmc * this.stereoPosLDMC) >>\r\n\t\t\t8;\r\n\t\tif (sq_index >= this.square_table.length) {\r\n\t\t\tsq_index = this.square_table.length - 1;\r\n\t\t}\r\n\t\tif (tnd_index >= this.tnd_table.length) {\r\n\t\t\ttnd_index = this.tnd_table.length - 1;\r\n\t\t}\r\n\t\tlet sampleValueL =\r\n\t\t\tthis.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\r\n\r\n\t\t// Right channel:\r\n\t\tsq_index =\r\n\t\t\t(this.smpSquare1 * this.stereoPosRSquare1 +\r\n\t\t\t\tthis.smpSquare2 * this.stereoPosRSquare2) >>\r\n\t\t\t8;\r\n\t\ttnd_index =\r\n\t\t\t(3 * this.smpTriangle * this.stereoPosRTriangle +\r\n\t\t\t\t(smpNoise << 1) * this.stereoPosRNoise +\r\n\t\t\t\tthis.smpDmc * this.stereoPosRDMC) >>\r\n\t\t\t8;\r\n\t\tif (sq_index >= this.square_table.length) {\r\n\t\t\tsq_index = this.square_table.length - 1;\r\n\t\t}\r\n\t\tif (tnd_index >= this.tnd_table.length) {\r\n\t\t\ttnd_index = this.tnd_table.length - 1;\r\n\t\t}\r\n\t\tlet sampleValueR =\r\n\t\t\tthis.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\r\n\r\n\t\t// Remove DC from left channel:\r\n\t\tlet smpDiffL = sampleValueL - this.prevSampleL;\r\n\t\tthis.prevSampleL += smpDiffL;\r\n\t\tthis.smpAccumL += smpDiffL - (this.smpAccumL >> 10);\r\n\t\tsampleValueL = this.smpAccumL;\r\n\r\n\t\t// Remove DC from right channel:\r\n\t\tlet smpDiffR = sampleValueR - this.prevSampleR;\r\n\t\tthis.prevSampleR += smpDiffR;\r\n\t\tthis.smpAccumR += smpDiffR - (this.smpAccumR >> 10);\r\n\t\tsampleValueR = this.smpAccumR;\r\n\r\n\t\t// Write:\r\n\t\tif (sampleValueL > this.maxSample) {\r\n\t\t\tthis.maxSample = sampleValueL;\r\n\t\t}\r\n\t\tif (sampleValueL < this.minSample) {\r\n\t\t\tthis.minSample = sampleValueL;\r\n\t\t}\r\n\r\n\t\tif (this.nes.opts.onAudioSample) {\r\n\t\t\tthis.nes.opts.onAudioSample(sampleValueL / 32768, sampleValueR / 32768);\r\n\t\t}\r\n\r\n\t\t// Reset sampled values:\r\n\t\tthis.smpSquare1 = 0;\r\n\t\tthis.smpSquare2 = 0;\r\n\t\tthis.smpTriangle = 0;\r\n\t\tthis.smpDmc = 0;\r\n\t},\r\n\r\n\tgetLengthMax: function(value) {\r\n\t\treturn this.lengthLookup[value >> 3];\r\n\t},\r\n\r\n\tgetDmcFrequency: function(value) {\r\n\t\tif (value >= 0 && value < 0x10) {\r\n\t\t\treturn this.dmcFreqLookup[value];\r\n\t\t}\r\n\t\treturn 0;\r\n\t},\r\n\r\n\tgetNoiseWaveLength: function(value) {\r\n\t\tif (value >= 0 && value < 0x10) {\r\n\t\t\treturn this.noiseWavelengthLookup[value];\r\n\t\t}\r\n\t\treturn 0;\r\n\t},\r\n\r\n\tsetPanning: function(pos) {\r\n\t\tfor (let i = 0; i < 5; i++) {\r\n\t\t\tthis.panning[i] = pos[i];\r\n\t\t}\r\n\t\tthis.updateStereoPos();\r\n\t},\r\n\r\n\tsetMasterVolume: function(value) {\r\n\t\tif (value < 0) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tif (value > 256) {\r\n\t\t\tvalue = 256;\r\n\t\t}\r\n\t\tthis.masterVolume = value;\r\n\t\tthis.updateStereoPos();\r\n\t},\r\n\r\n\tupdateStereoPos: function() {\r\n\t\tthis.stereoPosLSquare1 = (this.panning[0] * this.volume[0] * +this.enabled[0] * this.masterVolume) >> 8;\r\n\t\tthis.stereoPosLSquare2 = (this.panning[1] * this.volume[1] * +this.enabled[1] * this.masterVolume) >> 8;\r\n\t\tthis.stereoPosLTriangle = (this.panning[2] * this.volume[2] * +this.enabled[2] * this.masterVolume) >>\r\n\t\t8;\r\n\t\tthis.stereoPosLNoise = (this.panning[3] * this.volume[3] * +this.enabled[3] * this.masterVolume) >> 8;\r\n\t\tthis.stereoPosLDMC = (this.panning[4] * this.volume[4] * +this.enabled[4] * this.masterVolume) >> 8;\r\n\r\n\t\tthis.stereoPosRSquare1 = (256 - this.panning[0]) * this.volume[0] * +this.enabled[0] * this\r\n\t\t\t.masterVolume >> 8;\r\n\t\tthis.stereoPosRSquare2 = (256 - this.panning[1]) * this.volume[1] * +this.enabled[1] * this\r\n\t\t\t.masterVolume >> 8;\r\n\t\tthis.stereoPosRTriangle = (256 - this.panning[2]) * this.volume[2] * +this.enabled[2] * this\r\n\t\t\t.masterVolume >> 8;\r\n\t\tthis.stereoPosRNoise = (256 - this.panning[3]) * this.volume[3] * +this.enabled[3] * this\r\n\t\t\t.masterVolume >> 8;\r\n\t\tthis.stereoPosRDMC = (256 - this.panning[4]) * this.volume[4] * +this.enabled[4] * this.masterVolume >>\r\n\t\t\t8;\r\n\t},\r\n\r\n\tinitLengthLookup: function() {\r\n\t\t// prettier-ignore\r\n\t\tthis.lengthLookup = [\r\n\t\t\t0x0A, 0xFE,\r\n\t\t\t0x14, 0x02,\r\n\t\t\t0x28, 0x04,\r\n\t\t\t0x50, 0x06,\r\n\t\t\t0xA0, 0x08,\r\n\t\t\t0x3C, 0x0A,\r\n\t\t\t0x0E, 0x0C,\r\n\t\t\t0x1A, 0x0E,\r\n\t\t\t0x0C, 0x10,\r\n\t\t\t0x18, 0x12,\r\n\t\t\t0x30, 0x14,\r\n\t\t\t0x60, 0x16,\r\n\t\t\t0xC0, 0x18,\r\n\t\t\t0x48, 0x1A,\r\n\t\t\t0x10, 0x1C,\r\n\t\t\t0x20, 0x1E\r\n\t\t];\r\n\t},\r\n\r\n\tinitDmcFrequencyLookup: function() {\r\n\t\tthis.dmcFreqLookup = new Array(16);\r\n\r\n\t\tthis.dmcFreqLookup[0x0] = 0xd60;\r\n\t\tthis.dmcFreqLookup[0x1] = 0xbe0;\r\n\t\tthis.dmcFreqLookup[0x2] = 0xaa0;\r\n\t\tthis.dmcFreqLookup[0x3] = 0xa00;\r\n\t\tthis.dmcFreqLookup[0x4] = 0x8f0;\r\n\t\tthis.dmcFreqLookup[0x5] = 0x7f0;\r\n\t\tthis.dmcFreqLookup[0x6] = 0x710;\r\n\t\tthis.dmcFreqLookup[0x7] = 0x6b0;\r\n\t\tthis.dmcFreqLookup[0x8] = 0x5f0;\r\n\t\tthis.dmcFreqLookup[0x9] = 0x500;\r\n\t\tthis.dmcFreqLookup[0xa] = 0x470;\r\n\t\tthis.dmcFreqLookup[0xb] = 0x400;\r\n\t\tthis.dmcFreqLookup[0xc] = 0x350;\r\n\t\tthis.dmcFreqLookup[0xd] = 0x2a0;\r\n\t\tthis.dmcFreqLookup[0xe] = 0x240;\r\n\t\tthis.dmcFreqLookup[0xf] = 0x1b0;\r\n\t\t//for(int i=0;i<16;i++)dmcFreqLookup[i]/=8;\r\n\t},\r\n\r\n\tinitNoiseWavelengthLookup: function() {\r\n\t\tthis.noiseWavelengthLookup = new Array(16);\r\n\r\n\t\tthis.noiseWavelengthLookup[0x0] = 0x004;\r\n\t\tthis.noiseWavelengthLookup[0x1] = 0x008;\r\n\t\tthis.noiseWavelengthLookup[0x2] = 0x010;\r\n\t\tthis.noiseWavelengthLookup[0x3] = 0x020;\r\n\t\tthis.noiseWavelengthLookup[0x4] = 0x040;\r\n\t\tthis.noiseWavelengthLookup[0x5] = 0x060;\r\n\t\tthis.noiseWavelengthLookup[0x6] = 0x080;\r\n\t\tthis.noiseWavelengthLookup[0x7] = 0x0a0;\r\n\t\tthis.noiseWavelengthLookup[0x8] = 0x0ca;\r\n\t\tthis.noiseWavelengthLookup[0x9] = 0x0fe;\r\n\t\tthis.noiseWavelengthLookup[0xa] = 0x17c;\r\n\t\tthis.noiseWavelengthLookup[0xb] = 0x1fc;\r\n\t\tthis.noiseWavelengthLookup[0xc] = 0x2fa;\r\n\t\tthis.noiseWavelengthLookup[0xd] = 0x3f8;\r\n\t\tthis.noiseWavelengthLookup[0xe] = 0x7f2;\r\n\t\tthis.noiseWavelengthLookup[0xf] = 0xfe4;\r\n\t},\r\n\r\n\tinitDACtables: function() {\r\n\t\tlet value, ival, i;\r\n\t\tlet max_sqr = 0;\r\n\t\tlet max_tnd = 0;\r\n\r\n\t\tthis.square_table = new Array(32 * 16);\r\n\t\tthis.tnd_table = new Array(204 * 16);\r\n\r\n\t\tfor (i = 0; i < 32 * 16; i++) {\r\n\t\t\tvalue = 95.52 / (8128.0 / (i / 16.0) + 100.0);\r\n\t\t\tvalue *= 0.98411;\r\n\t\t\tvalue *= 50000.0;\r\n\t\t\tival = Math.floor(value);\r\n\r\n\t\t\tthis.square_table[i] = ival;\r\n\t\t\tif (ival > max_sqr) {\r\n\t\t\t\tmax_sqr = ival;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < 204 * 16; i++) {\r\n\t\t\tvalue = 163.67 / (24329.0 / (i / 16.0) + 100.0);\r\n\t\t\tvalue *= 0.98411;\r\n\t\t\tvalue *= 50000.0;\r\n\t\t\tival = Math.floor(value);\r\n\r\n\t\t\tthis.tnd_table[i] = ival;\r\n\t\t\tif (ival > max_tnd) {\r\n\t\t\t\tmax_tnd = ival;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.dacRange = max_sqr + max_tnd;\r\n\t\tthis.dcValue = this.dacRange / 2;\r\n\t},\r\n\r\n\tJSON_PROPERTIES: [\r\n\t\t\"frameIrqCounter\",\r\n\t\t\"frameIrqCounterMax\",\r\n\t\t\"initCounter\",\r\n\t\t\"channelEnableValue\",\r\n\t\t\"sampleRate\",\r\n\t\t\"frameIrqEnabled\",\r\n\t\t\"frameIrqActive\",\r\n\t\t\"frameClockNow\",\r\n\t\t\"startedPlaying\",\r\n\t\t\"recordOutput\",\r\n\t\t\"initingHardware\",\r\n\t\t\"masterFrameCounter\",\r\n\t\t\"derivedFrameCounter\",\r\n\t\t\"countSequence\",\r\n\t\t\"sampleTimer\",\r\n\t\t\"frameTime\",\r\n\t\t\"sampleTimerMax\",\r\n\t\t\"sampleCount\",\r\n\t\t\"triValue\",\r\n\t\t\"smpSquare1\",\r\n\t\t\"smpSquare2\",\r\n\t\t\"smpTriangle\",\r\n\t\t\"smpDmc\",\r\n\t\t\"accCount\",\r\n\t\t\"prevSampleL\",\r\n\t\t\"prevSampleR\",\r\n\t\t\"smpAccumL\",\r\n\t\t\"smpAccumR\",\r\n\t\t\"masterVolume\",\r\n\t\t\"stereoPosLSquare1\",\r\n\t\t\"stereoPosLSquare2\",\r\n\t\t\"stereoPosLTriangle\",\r\n\t\t\"stereoPosLNoise\",\r\n\t\t\"stereoPosLDMC\",\r\n\t\t\"stereoPosRSquare1\",\r\n\t\t\"stereoPosRSquare2\",\r\n\t\t\"stereoPosRTriangle\",\r\n\t\t\"stereoPosRNoise\",\r\n\t\t\"stereoPosRDMC\",\r\n\t\t\"extraCycles\",\r\n\t\t\"maxSample\",\r\n\t\t\"minSample\",\r\n\t\t\"panning\",\r\n\t],\r\n\r\n\ttoJSON: function() {\r\n\t\tlet obj = utils.toJSON(this);\r\n\t\tobj.dmc = this.dmc.toJSON();\r\n\t\tobj.noise = this.noise.toJSON();\r\n\t\tobj.square1 = this.square1.toJSON();\r\n\t\tobj.square2 = this.square2.toJSON();\r\n\t\tobj.triangle = this.triangle.toJSON();\r\n\t\treturn obj;\r\n\t},\r\n\r\n\tfromJSON: function(s) {\r\n\t\tutils.fromJSON(this, s);\r\n\t\tthis.dmc.fromJSON(s.dmc);\r\n\t\tthis.noise.fromJSON(s.noise);\r\n\t\tthis.square1.fromJSON(s.square1);\r\n\t\tthis.square2.fromJSON(s.square2);\r\n\t\tthis.triangle.fromJSON(s.triangle);\r\n\t},\r\n};\r\n\r\nlet ChannelDM = function(papu) {\r\n\tthis.papu = papu;\r\n\r\n\tthis.MODE_NORMAL = 0;\r\n\tthis.MODE_LOOP = 1;\r\n\tthis.MODE_IRQ = 2;\r\n\r\n\tthis.isEnabled = null;\r\n\tthis.hasSample = null;\r\n\tthis.irqGenerated = false;\r\n\r\n\tthis.playMode = null;\r\n\tthis.dmaFrequency = null;\r\n\tthis.dmaCounter = null;\r\n\tthis.deltaCounter = null;\r\n\tthis.playStartAddress = null;\r\n\tthis.playAddress = null;\r\n\tthis.playLength = null;\r\n\tthis.playLengthCounter = null;\r\n\tthis.shiftCounter = null;\r\n\tthis.reg4012 = null;\r\n\tthis.reg4013 = null;\r\n\tthis.sample = null;\r\n\tthis.dacLsb = null;\r\n\tthis.data = null;\r\n\r\n\tthis.reset();\r\n};\r\n\r\nChannelDM.prototype = {\r\n\tclockDmc: function() {\r\n\t\t// Only alter DAC value if the sample buffer has data:\r\n\t\tif (this.hasSample) {\r\n\t\t\tif ((this.data & 1) === 0) {\r\n\t\t\t\t// Decrement delta:\r\n\t\t\t\tif (this.deltaCounter > 0) {\r\n\t\t\t\t\tthis.deltaCounter--;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Increment delta:\r\n\t\t\t\tif (this.deltaCounter < 63) {\r\n\t\t\t\t\tthis.deltaCounter++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Update sample value:\r\n\t\t\tthis.sample = this.isEnabled ? (this.deltaCounter << 1) + this.dacLsb : 0;\r\n\r\n\t\t\t// Update shift register:\r\n\t\t\tthis.data >>= 1;\r\n\t\t}\r\n\r\n\t\tthis.dmaCounter--;\r\n\t\tif (this.dmaCounter <= 0) {\r\n\t\t\t// No more sample bits.\r\n\t\t\tthis.hasSample = false;\r\n\t\t\tthis.endOfSample();\r\n\t\t\tthis.dmaCounter = 8;\r\n\t\t}\r\n\r\n\t\tif (this.irqGenerated) {\r\n\t\t\tthis.papu.nes.cpu.requestIrq(this.papu.nes.cpu.IRQ_NORMAL);\r\n\t\t}\r\n\t},\r\n\r\n\tendOfSample: function() {\r\n\t\tif (this.playLengthCounter === 0 && this.playMode === this.MODE_LOOP) {\r\n\t\t\t// Start from beginning of sample:\r\n\t\t\tthis.playAddress = this.playStartAddress;\r\n\t\t\tthis.playLengthCounter = this.playLength;\r\n\t\t}\r\n\r\n\t\tif (this.playLengthCounter > 0) {\r\n\t\t\t// Fetch next sample:\r\n\t\t\tthis.nextSample();\r\n\r\n\t\t\tif (this.playLengthCounter === 0) {\r\n\t\t\t\t// Last byte of sample fetched, generate IRQ:\r\n\t\t\t\tif (this.playMode === this.MODE_IRQ) {\r\n\t\t\t\t\t// Generate IRQ:\r\n\t\t\t\t\tthis.irqGenerated = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tnextSample: function() {\r\n\t\t// Fetch byte:\r\n\t\tthis.data = this.papu.nes.mmap.load(this.playAddress);\r\n\t\tthis.papu.nes.cpu.haltCycles(4);\r\n\r\n\t\tthis.playLengthCounter--;\r\n\t\tthis.playAddress++;\r\n\t\tif (this.playAddress > 0xffff) {\r\n\t\t\tthis.playAddress = 0x8000;\r\n\t\t}\r\n\r\n\t\tthis.hasSample = true;\r\n\t},\r\n\r\n\twriteReg: function(address, value) {\r\n\t\tif (address === 0x4010) {\r\n\t\t\t// Play mode, DMA Frequency\r\n\t\t\tif (value >> 6 === 0) {\r\n\t\t\t\tthis.playMode = this.MODE_NORMAL;\r\n\t\t\t} else if (((value >> 6) & 1) === 1) {\r\n\t\t\t\tthis.playMode = this.MODE_LOOP;\r\n\t\t\t} else if (value >> 6 === 2) {\r\n\t\t\t\tthis.playMode = this.MODE_IRQ;\r\n\t\t\t}\r\n\r\n\t\t\tif ((value & 0x80) === 0) {\r\n\t\t\t\tthis.irqGenerated = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dmaFrequency = this.papu.getDmcFrequency(value & 0xf);\r\n\t\t} else if (address === 0x4011) {\r\n\t\t\t// Delta counter load register:\r\n\t\t\tthis.deltaCounter = (value >> 1) & 63;\r\n\t\t\tthis.dacLsb = value & 1;\r\n\t\t\tthis.sample = (this.deltaCounter << 1) + this.dacLsb; // update sample value\r\n\t\t} else if (address === 0x4012) {\r\n\t\t\t// DMA address load register\r\n\t\t\tthis.playStartAddress = (value << 6) | 0x0c000;\r\n\t\t\tthis.playAddress = this.playStartAddress;\r\n\t\t\tthis.reg4012 = value;\r\n\t\t} else if (address === 0x4013) {\r\n\t\t\t// Length of play code\r\n\t\t\tthis.playLength = (value << 4) + 1;\r\n\t\t\tthis.playLengthCounter = this.playLength;\r\n\t\t\tthis.reg4013 = value;\r\n\t\t} else if (address === 0x4015) {\r\n\t\t\t// DMC/IRQ Status\r\n\t\t\tif (((value >> 4) & 1) === 0) {\r\n\t\t\t\t// Disable:\r\n\t\t\t\tthis.playLengthCounter = 0;\r\n\t\t\t} else {\r\n\t\t\t\t// Restart:\r\n\t\t\t\tthis.playAddress = this.playStartAddress;\r\n\t\t\t\tthis.playLengthCounter = this.playLength;\r\n\t\t\t}\r\n\t\t\tthis.irqGenerated = false;\r\n\t\t}\r\n\t},\r\n\r\n\tsetEnabled: function(value) {\r\n\t\tif (!this.isEnabled && value) {\r\n\t\t\tthis.playLengthCounter = this.playLength;\r\n\t\t}\r\n\t\tthis.isEnabled = value;\r\n\t},\r\n\r\n\tgetLengthStatus: function() {\r\n\t\treturn this.playLengthCounter === 0 || !this.isEnabled ? 0 : 1;\r\n\t},\r\n\r\n\tgetIrqStatus: function() {\r\n\t\treturn this.irqGenerated ? 1 : 0;\r\n\t},\r\n\r\n\treset: function() {\r\n\t\tthis.isEnabled = false;\r\n\t\tthis.irqGenerated = false;\r\n\t\tthis.playMode = this.MODE_NORMAL;\r\n\t\tthis.dmaFrequency = 0;\r\n\t\tthis.dmaCounter = 0;\r\n\t\tthis.deltaCounter = 0;\r\n\t\tthis.playStartAddress = 0;\r\n\t\tthis.playAddress = 0;\r\n\t\tthis.playLength = 0;\r\n\t\tthis.playLengthCounter = 0;\r\n\t\tthis.sample = 0;\r\n\t\tthis.dacLsb = 0;\r\n\t\tthis.shiftCounter = 0;\r\n\t\tthis.reg4012 = 0;\r\n\t\tthis.reg4013 = 0;\r\n\t\tthis.data = 0;\r\n\t},\r\n\r\n\tJSON_PROPERTIES: [\r\n\t\t\"MODE_NORMAL\",\r\n\t\t\"MODE_LOOP\",\r\n\t\t\"MODE_IRQ\",\r\n\t\t\"isEnabled\",\r\n\t\t\"hasSample\",\r\n\t\t\"irqGenerated\",\r\n\t\t\"playMode\",\r\n\t\t\"dmaFrequency\",\r\n\t\t\"dmaCounter\",\r\n\t\t\"deltaCounter\",\r\n\t\t\"playStartAddress\",\r\n\t\t\"playAddress\",\r\n\t\t\"playLength\",\r\n\t\t\"playLengthCounter\",\r\n\t\t\"shiftCounter\",\r\n\t\t\"reg4012\",\r\n\t\t\"reg4013\",\r\n\t\t\"sample\",\r\n\t\t\"dacLsb\",\r\n\t\t\"data\",\r\n\t],\r\n\r\n\ttoJSON: function() {\r\n\t\treturn utils.toJSON(this);\r\n\t},\r\n\r\n\tfromJSON: function(s) {\r\n\t\tutils.fromJSON(this, s);\r\n\t},\r\n};\r\n\r\nlet ChannelNoise = function(papu) {\r\n\tthis.papu = papu;\r\n\r\n\tthis.isEnabled = null;\r\n\tthis.envDecayDisable = null;\r\n\tthis.envDecayLoopEnable = null;\r\n\tthis.lengthCounterEnable = null;\r\n\tthis.envReset = null;\r\n\tthis.shiftNow = null;\r\n\r\n\tthis.lengthCounter = null;\r\n\tthis.progTimerCount = null;\r\n\tthis.progTimerMax = null;\r\n\tthis.rawNoisePeriod = null;\r\n\tthis.envDecayRate = null;\r\n\tthis.envDecayCounter = null;\r\n\tthis.envVolume = null;\r\n\tthis.masterVolume = null;\r\n\tthis.shiftReg = 1 << 14;\r\n\tthis.randomBit = null;\r\n\tthis.randomMode = null;\r\n\tthis.sampleValue = null;\r\n\tthis.accValue = 0;\r\n\tthis.accCount = 1;\r\n\tthis.tmp = null;\r\n\r\n\tthis.reset();\r\n};\r\n\r\nChannelNoise.prototype = {\r\n\treset: function() {\r\n\t\tthis.progTimerCount = 0;\r\n\t\tthis.progTimerMax = 0;\r\n\t\tthis.rawNoisePeriod = 0;\r\n\t\tthis.isEnabled = false;\r\n\t\tthis.lengthCounter = 0;\r\n\t\tthis.lengthCounterEnable = false;\r\n\t\tthis.envDecayDisable = false;\r\n\t\tthis.envDecayLoopEnable = false;\r\n\t\tthis.shiftNow = false;\r\n\t\tthis.envDecayRate = 0;\r\n\t\tthis.envDecayCounter = 0;\r\n\t\tthis.envVolume = 0;\r\n\t\tthis.masterVolume = 0;\r\n\t\tthis.shiftReg = 1;\r\n\t\tthis.randomBit = 0;\r\n\t\tthis.randomMode = 0;\r\n\t\tthis.sampleValue = 0;\r\n\t\tthis.tmp = 0;\r\n\t},\r\n\r\n\tclockLengthCounter: function() {\r\n\t\tif (this.lengthCounterEnable && this.lengthCounter > 0) {\r\n\t\t\tthis.lengthCounter--;\r\n\t\t\tif (this.lengthCounter === 0) {\r\n\t\t\t\tthis.updateSampleValue();\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tclockEnvDecay: function() {\r\n\t\tif (this.envReset) {\r\n\t\t\t// Reset envelope:\r\n\t\t\tthis.envReset = false;\r\n\t\t\tthis.envDecayCounter = this.envDecayRate + 1;\r\n\t\t\tthis.envVolume = 0xf;\r\n\t\t} else if (--this.envDecayCounter <= 0) {\r\n\t\t\t// Normal handling:\r\n\t\t\tthis.envDecayCounter = this.envDecayRate + 1;\r\n\t\t\tif (this.envVolume > 0) {\r\n\t\t\t\tthis.envVolume--;\r\n\t\t\t} else {\r\n\t\t\t\tthis.envVolume = this.envDecayLoopEnable ? 0xf : 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.envDecayDisable) {\r\n\t\t\tthis.masterVolume = this.envDecayRate;\r\n\t\t} else {\r\n\t\t\tthis.masterVolume = this.envVolume;\r\n\t\t}\r\n\t\tthis.updateSampleValue();\r\n\t},\r\n\r\n\tupdateSampleValue: function() {\r\n\t\tif (this.isEnabled && this.lengthCounter > 0) {\r\n\t\t\tthis.sampleValue = this.randomBit * this.masterVolume;\r\n\t\t}\r\n\t},\r\n\r\n\twriteReg: function(address, value) {\r\n\t\tif (address === 0x400c) {\r\n\t\t\t// Volume/Envelope decay:\r\n\t\t\tthis.envDecayDisable = (value & 0x10) !== 0;\r\n\t\t\tthis.envDecayRate = value & 0xf;\r\n\t\t\tthis.envDecayLoopEnable = (value & 0x20) !== 0;\r\n\t\t\tthis.lengthCounterEnable = (value & 0x20) === 0;\r\n\t\t\tif (this.envDecayDisable) {\r\n\t\t\t\tthis.masterVolume = this.envDecayRate;\r\n\t\t\t} else {\r\n\t\t\t\tthis.masterVolume = this.envVolume;\r\n\t\t\t}\r\n\t\t} else if (address === 0x400e) {\r\n\t\t\t// Programmable timer:\r\n\t\t\tthis.rawNoisePeriod = value & 0xf;\r\n\t\t\tthis.progTimerMax = this.papu.getNoiseWaveLength(value & 0xf);\r\n\t\t\tthis.randomMode = value >> 7;\r\n\t\t} else if (address === 0x400f) {\r\n\t\t\t// Length counter\r\n\t\t\tthis.lengthCounter = this.papu.getLengthMax(value & 248);\r\n\t\t\tthis.envReset = true;\r\n\t\t}\r\n\t\t// Update:\r\n\t\t//updateSampleValue();\r\n\t},\r\n\r\n\tsetEnabled: function(value) {\r\n\t\tthis.isEnabled = value;\r\n\t\tif (!value) {\r\n\t\t\tthis.lengthCounter = 0;\r\n\t\t}\r\n\t\tthis.updateSampleValue();\r\n\t},\r\n\r\n\tgetLengthStatus: function() {\r\n\t\treturn this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\r\n\t},\r\n\r\n\tJSON_PROPERTIES: [\r\n\t\t\"isEnabled\",\r\n\t\t\"envDecayDisable\",\r\n\t\t\"envDecayLoopEnable\",\r\n\t\t\"lengthCounterEnable\",\r\n\t\t\"envReset\",\r\n\t\t\"shiftNow\",\r\n\t\t\"lengthCounter\",\r\n\t\t\"progTimerCount\",\r\n\t\t\"progTimerMax\",\r\n\t\t\"envDecayRate\",\r\n\t\t\"envDecayCounter\",\r\n\t\t\"envVolume\",\r\n\t\t\"masterVolume\",\r\n\t\t\"shiftReg\",\r\n\t\t\"randomBit\",\r\n\t\t\"randomMode\",\r\n\t\t\"sampleValue\",\r\n\t\t\"accValue\",\r\n\t\t\"accCount\",\r\n\t\t\"tmp\",\r\n\t],\r\n\r\n\ttoJSON: function() {\r\n\t\treturn utils.toJSON(this);\r\n\t},\r\n\r\n\tfromJSON: function(s) {\r\n\t\tutils.fromJSON(this, s);\r\n\t},\r\n};\r\n\r\nlet ChannelSquare = function(papu, square1) {\r\n\tthis.papu = papu;\r\n\r\n\t// prettier-ignore\r\n\tthis.dutyLookup = [\r\n\t\t0, 1, 0, 0, 0, 0, 0, 0,\r\n\t\t0, 1, 1, 0, 0, 0, 0, 0,\r\n\t\t0, 1, 1, 1, 1, 0, 0, 0,\r\n\t\t1, 0, 0, 1, 1, 1, 1, 1\r\n\t];\r\n\t// prettier-ignore\r\n\tthis.impLookup = [\r\n\t\t1, -1, 0, 0, 0, 0, 0, 0,\r\n\t\t1, 0, -1, 0, 0, 0, 0, 0,\r\n\t\t1, 0, 0, 0, -1, 0, 0, 0,\r\n\t\t-1, 0, 1, 0, 0, 0, 0, 0\r\n\t];\r\n\r\n\tthis.sqr1 = square1;\r\n\tthis.isEnabled = null;\r\n\tthis.lengthCounterEnable = null;\r\n\tthis.sweepActive = null;\r\n\tthis.envDecayDisable = null;\r\n\tthis.envDecayLoopEnable = null;\r\n\tthis.envReset = null;\r\n\tthis.sweepCarry = null;\r\n\tthis.updateSweepPeriod = null;\r\n\r\n\tthis.progTimerCount = null;\r\n\tthis.progTimerMax = null;\r\n\tthis.lengthCounter = null;\r\n\tthis.squareCounter = null;\r\n\tthis.sweepCounter = null;\r\n\tthis.sweepCounterMax = null;\r\n\tthis.sweepMode = null;\r\n\tthis.sweepShiftAmount = null;\r\n\tthis.envDecayRate = null;\r\n\tthis.envDecayCounter = null;\r\n\tthis.envVolume = null;\r\n\tthis.masterVolume = null;\r\n\tthis.dutyMode = null;\r\n\tthis.sweepResult = null;\r\n\tthis.sampleValue = null;\r\n\tthis.vol = null;\r\n\r\n\tthis.reset();\r\n};\r\n\r\nChannelSquare.prototype = {\r\n\treset: function() {\r\n\t\tthis.progTimerCount = 0;\r\n\t\tthis.progTimerMax = 0;\r\n\t\tthis.lengthCounter = 0;\r\n\t\tthis.squareCounter = 0;\r\n\t\tthis.sweepCounter = 0;\r\n\t\tthis.sweepCounterMax = 0;\r\n\t\tthis.sweepMode = 0;\r\n\t\tthis.sweepShiftAmount = 0;\r\n\t\tthis.envDecayRate = 0;\r\n\t\tthis.envDecayCounter = 0;\r\n\t\tthis.envVolume = 0;\r\n\t\tthis.masterVolume = 0;\r\n\t\tthis.dutyMode = 0;\r\n\t\tthis.vol = 0;\r\n\r\n\t\tthis.isEnabled = false;\r\n\t\tthis.lengthCounterEnable = false;\r\n\t\tthis.sweepActive = false;\r\n\t\tthis.sweepCarry = false;\r\n\t\tthis.envDecayDisable = false;\r\n\t\tthis.envDecayLoopEnable = false;\r\n\t},\r\n\r\n\tclockLengthCounter: function() {\r\n\t\tif (this.lengthCounterEnable && this.lengthCounter > 0) {\r\n\t\t\tthis.lengthCounter--;\r\n\t\t\tif (this.lengthCounter === 0) {\r\n\t\t\t\tthis.updateSampleValue();\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tclockEnvDecay: function() {\r\n\t\tif (this.envReset) {\r\n\t\t\t// Reset envelope:\r\n\t\t\tthis.envReset = false;\r\n\t\t\tthis.envDecayCounter = this.envDecayRate + 1;\r\n\t\t\tthis.envVolume = 0xf;\r\n\t\t} else if (--this.envDecayCounter <= 0) {\r\n\t\t\t// Normal handling:\r\n\t\t\tthis.envDecayCounter = this.envDecayRate + 1;\r\n\t\t\tif (this.envVolume > 0) {\r\n\t\t\t\tthis.envVolume--;\r\n\t\t\t} else {\r\n\t\t\t\tthis.envVolume = this.envDecayLoopEnable ? 0xf : 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.envDecayDisable) {\r\n\t\t\tthis.masterVolume = this.envDecayRate;\r\n\t\t} else {\r\n\t\t\tthis.masterVolume = this.envVolume;\r\n\t\t}\r\n\t\tthis.updateSampleValue();\r\n\t},\r\n\r\n\tclockSweep: function() {\r\n\t\tif (--this.sweepCounter <= 0) {\r\n\t\t\tthis.sweepCounter = this.sweepCounterMax + 1;\r\n\t\t\tif (\r\n\t\t\t\tthis.sweepActive &&\r\n\t\t\t\tthis.sweepShiftAmount > 0 &&\r\n\t\t\t\tthis.progTimerMax > 7\r\n\t\t\t) {\r\n\t\t\t\t// Calculate result from shifter:\r\n\t\t\t\tthis.sweepCarry = false;\r\n\t\t\t\tif (this.sweepMode === 0) {\r\n\t\t\t\t\tthis.progTimerMax += this.progTimerMax >> this.sweepShiftAmount;\r\n\t\t\t\t\tif (this.progTimerMax > 4095) {\r\n\t\t\t\t\t\tthis.progTimerMax = 4095;\r\n\t\t\t\t\t\tthis.sweepCarry = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.progTimerMax =\r\n\t\t\t\t\t\tthis.progTimerMax -\r\n\t\t\t\t\t\t((this.progTimerMax >> this.sweepShiftAmount) -\r\n\t\t\t\t\t\t\t(this.sqr1 ? 1 : 0));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.updateSweepPeriod) {\r\n\t\t\tthis.updateSweepPeriod = false;\r\n\t\t\tthis.sweepCounter = this.sweepCounterMax + 1;\r\n\t\t}\r\n\t},\r\n\r\n\tupdateSampleValue: function() {\r\n\t\tif (this.isEnabled && this.lengthCounter > 0 && this.progTimerMax > 7) {\r\n\t\t\tif (\r\n\t\t\t\tthis.sweepMode === 0 &&\r\n\t\t\t\tthis.progTimerMax + (this.progTimerMax >> this.sweepShiftAmount) > 4095\r\n\t\t\t) {\r\n\t\t\t\t//if (this.sweepCarry) {\r\n\t\t\t\tthis.sampleValue = 0;\r\n\t\t\t} else {\r\n\t\t\t\tthis.sampleValue =\r\n\t\t\t\t\tthis.masterVolume *\r\n\t\t\t\t\tthis.dutyLookup[(this.dutyMode << 3) + this.squareCounter];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.sampleValue = 0;\r\n\t\t}\r\n\t},\r\n\r\n\twriteReg: function(address, value) {\r\n\t\tlet addrAdd = this.sqr1 ? 0 : 4;\r\n\t\tif (address === 0x4000 + addrAdd) {\r\n\t\t\t// Volume/Envelope decay:\r\n\t\t\tthis.envDecayDisable = (value & 0x10) !== 0;\r\n\t\t\tthis.envDecayRate = value & 0xf;\r\n\t\t\tthis.envDecayLoopEnable = (value & 0x20) !== 0;\r\n\t\t\tthis.dutyMode = (value >> 6) & 0x3;\r\n\t\t\tthis.lengthCounterEnable = (value & 0x20) === 0;\r\n\t\t\tif (this.envDecayDisable) {\r\n\t\t\t\tthis.masterVolume = this.envDecayRate;\r\n\t\t\t} else {\r\n\t\t\t\tthis.masterVolume = this.envVolume;\r\n\t\t\t}\r\n\t\t\tthis.updateSampleValue();\r\n\t\t} else if (address === 0x4001 + addrAdd) {\r\n\t\t\t// Sweep:\r\n\t\t\tthis.sweepActive = (value & 0x80) !== 0;\r\n\t\t\tthis.sweepCounterMax = (value >> 4) & 7;\r\n\t\t\tthis.sweepMode = (value >> 3) & 1;\r\n\t\t\tthis.sweepShiftAmount = value & 7;\r\n\t\t\tthis.updateSweepPeriod = true;\r\n\t\t} else if (address === 0x4002 + addrAdd) {\r\n\t\t\t// Programmable timer:\r\n\t\t\tthis.progTimerMax &= 0x700;\r\n\t\t\tthis.progTimerMax |= value;\r\n\t\t} else if (address === 0x4003 + addrAdd) {\r\n\t\t\t// Programmable timer, length counter\r\n\t\t\tthis.progTimerMax &= 0xff;\r\n\t\t\tthis.progTimerMax |= (value & 0x7) << 8;\r\n\r\n\t\t\tif (this.isEnabled) {\r\n\t\t\t\tthis.lengthCounter = this.papu.getLengthMax(value & 0xf8);\r\n\t\t\t}\r\n\r\n\t\t\tthis.envReset = true;\r\n\t\t}\r\n\t},\r\n\r\n\tsetEnabled: function(value) {\r\n\t\tthis.isEnabled = value;\r\n\t\tif (!value) {\r\n\t\t\tthis.lengthCounter = 0;\r\n\t\t}\r\n\t\tthis.updateSampleValue();\r\n\t},\r\n\r\n\tgetLengthStatus: function() {\r\n\t\treturn this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\r\n\t},\r\n\r\n\tJSON_PROPERTIES: [\r\n\t\t\"isEnabled\",\r\n\t\t\"lengthCounterEnable\",\r\n\t\t\"sweepActive\",\r\n\t\t\"envDecayDisable\",\r\n\t\t\"envDecayLoopEnable\",\r\n\t\t\"envReset\",\r\n\t\t\"sweepCarry\",\r\n\t\t\"updateSweepPeriod\",\r\n\t\t\"progTimerCount\",\r\n\t\t\"progTimerMax\",\r\n\t\t\"lengthCounter\",\r\n\t\t\"squareCounter\",\r\n\t\t\"sweepCounter\",\r\n\t\t\"sweepCounterMax\",\r\n\t\t\"sweepMode\",\r\n\t\t\"sweepShiftAmount\",\r\n\t\t\"envDecayRate\",\r\n\t\t\"envDecayCounter\",\r\n\t\t\"envVolume\",\r\n\t\t\"masterVolume\",\r\n\t\t\"dutyMode\",\r\n\t\t\"sweepResult\",\r\n\t\t\"sampleValue\",\r\n\t\t\"vol\",\r\n\t],\r\n\r\n\ttoJSON: function() {\r\n\t\treturn utils.toJSON(this);\r\n\t},\r\n\r\n\tfromJSON: function(s) {\r\n\t\tutils.fromJSON(this, s);\r\n\t},\r\n};\r\n\r\nlet ChannelTriangle = function(papu) {\r\n\tthis.papu = papu;\r\n\r\n\tthis.isEnabled = null;\r\n\tthis.sampleCondition = null;\r\n\tthis.lengthCounterEnable = null;\r\n\tthis.lcHalt = null;\r\n\tthis.lcControl = null;\r\n\r\n\tthis.progTimerCount = null;\r\n\tthis.progTimerMax = null;\r\n\tthis.triangleCounter = null;\r\n\tthis.lengthCounter = null;\r\n\tthis.linearCounter = null;\r\n\tthis.lcLoadValue = null;\r\n\tthis.sampleValue = null;\r\n\tthis.tmp = null;\r\n\r\n\tthis.reset();\r\n};\r\n\r\nChannelTriangle.prototype = {\r\n\treset: function() {\r\n\t\tthis.progTimerCount = 0;\r\n\t\tthis.progTimerMax = 0;\r\n\t\tthis.triangleCounter = 0;\r\n\t\tthis.isEnabled = false;\r\n\t\tthis.sampleCondition = false;\r\n\t\tthis.lengthCounter = 0;\r\n\t\tthis.lengthCounterEnable = false;\r\n\t\tthis.linearCounter = 0;\r\n\t\tthis.lcLoadValue = 0;\r\n\t\tthis.lcHalt = true;\r\n\t\tthis.lcControl = false;\r\n\t\tthis.tmp = 0;\r\n\t\tthis.sampleValue = 0xf;\r\n\t},\r\n\r\n\tclockLengthCounter: function() {\r\n\t\tif (this.lengthCounterEnable && this.lengthCounter > 0) {\r\n\t\t\tthis.lengthCounter--;\r\n\t\t\tif (this.lengthCounter === 0) {\r\n\t\t\t\tthis.updateSampleCondition();\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tclockLinearCounter: function() {\r\n\t\tif (this.lcHalt) {\r\n\t\t\t// Load:\r\n\t\t\tthis.linearCounter = this.lcLoadValue;\r\n\t\t\tthis.updateSampleCondition();\r\n\t\t} else if (this.linearCounter > 0) {\r\n\t\t\t// Decrement:\r\n\t\t\tthis.linearCounter--;\r\n\t\t\tthis.updateSampleCondition();\r\n\t\t}\r\n\t\tif (!this.lcControl) {\r\n\t\t\t// Clear halt flag:\r\n\t\t\tthis.lcHalt = false;\r\n\t\t}\r\n\t},\r\n\r\n\tgetLengthStatus: function() {\r\n\t\treturn this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\r\n\t},\r\n\r\n\t// eslint-disable-next-line no-unused-vars\r\n\treadReg: function(address) {\r\n\t\treturn 0;\r\n\t},\r\n\r\n\twriteReg: function(address, value) {\r\n\t\tif (address === 0x4008) {\r\n\t\t\t// New values for linear counter:\r\n\t\t\tthis.lcControl = (value & 0x80) !== 0;\r\n\t\t\tthis.lcLoadValue = value & 0x7f;\r\n\r\n\t\t\t// Length counter enable:\r\n\t\t\tthis.lengthCounterEnable = !this.lcControl;\r\n\t\t} else if (address === 0x400a) {\r\n\t\t\t// Programmable timer:\r\n\t\t\tthis.progTimerMax &= 0x700;\r\n\t\t\tthis.progTimerMax |= value;\r\n\t\t} else if (address === 0x400b) {\r\n\t\t\t// Programmable timer, length counter\r\n\t\t\tthis.progTimerMax &= 0xff;\r\n\t\t\tthis.progTimerMax |= (value & 0x07) << 8;\r\n\t\t\tthis.lengthCounter = this.papu.getLengthMax(value & 0xf8);\r\n\t\t\tthis.lcHalt = true;\r\n\t\t}\r\n\r\n\t\tthis.updateSampleCondition();\r\n\t},\r\n\r\n\tclockProgrammableTimer: function(nCycles) {\r\n\t\tif (this.progTimerMax > 0) {\r\n\t\t\tthis.progTimerCount += nCycles;\r\n\t\t\twhile (\r\n\t\t\t\tthis.progTimerMax > 0 &&\r\n\t\t\t\tthis.progTimerCount >= this.progTimerMax\r\n\t\t\t) {\r\n\t\t\t\tthis.progTimerCount -= this.progTimerMax;\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.isEnabled &&\r\n\t\t\t\t\tthis.lengthCounter > 0 &&\r\n\t\t\t\t\tthis.linearCounter > 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.clockTriangleGenerator();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tclockTriangleGenerator: function() {\r\n\t\tthis.triangleCounter++;\r\n\t\tthis.triangleCounter &= 0x1f;\r\n\t},\r\n\r\n\tsetEnabled: function(value) {\r\n\t\tthis.isEnabled = value;\r\n\t\tif (!value) {\r\n\t\t\tthis.lengthCounter = 0;\r\n\t\t}\r\n\t\tthis.updateSampleCondition();\r\n\t},\r\n\r\n\tupdateSampleCondition: function() {\r\n\t\tthis.sampleCondition =\r\n\t\t\tthis.isEnabled &&\r\n\t\t\tthis.progTimerMax > 7 &&\r\n\t\t\tthis.linearCounter > 0 &&\r\n\t\t\tthis.lengthCounter > 0;\r\n\t},\r\n\r\n\tJSON_PROPERTIES: [\r\n\t\t\"isEnabled\",\r\n\t\t\"sampleCondition\",\r\n\t\t\"lengthCounterEnable\",\r\n\t\t\"lcHalt\",\r\n\t\t\"lcControl\",\r\n\t\t\"progTimerCount\",\r\n\t\t\"progTimerMax\",\r\n\t\t\"triangleCounter\",\r\n\t\t\"lengthCounter\",\r\n\t\t\"linearCounter\",\r\n\t\t\"lcLoadValue\",\r\n\t\t\"sampleValue\",\r\n\t\t\"tmp\",\r\n\t],\r\n\r\n\ttoJSON: function() {\r\n\t\treturn utils.toJSON(this);\r\n\t},\r\n\r\n\tfromJSON: function(s) {\r\n\t\tutils.fromJSON(this, s);\r\n\t},\r\n};\r\n\r\nmodule.exports = PAPU;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/papu.js\n// module id = 7\n// module chunks = 0 1","let Mappers = require(\"./mappers\");\r\nlet Tile = require(\"./tile\");\r\n\r\nlet ROM = function(nes) {\r\n\tthis.nes = nes;\r\n\r\n\tthis.mapperName = new Array(92);\r\n\r\n\tfor (let i = 0; i < 92; i++) {\r\n\t\tthis.mapperName[i] = \"Unknown Mapper\";\r\n\t}\r\n\tthis.mapperName[0] = \"Direct Access\";\r\n\tthis.mapperName[1] = \"Nintendo MMC1\";\r\n\tthis.mapperName[2] = \"UNROM\";\r\n\tthis.mapperName[3] = \"CNROM\";\r\n\tthis.mapperName[4] = \"Nintendo MMC3\";\r\n\tthis.mapperName[5] = \"Nintendo MMC5\";\r\n\tthis.mapperName[6] = \"FFE F4xxx\";\r\n\tthis.mapperName[7] = \"AOROM\";\r\n\tthis.mapperName[8] = \"FFE F3xxx\";\r\n\tthis.mapperName[9] = \"Nintendo MMC2\";\r\n\tthis.mapperName[10] = \"Nintendo MMC4\";\r\n\tthis.mapperName[11] = \"Color Dreams Chip\";\r\n\tthis.mapperName[12] = \"FFE F6xxx\";\r\n\tthis.mapperName[15] = \"100-in-1 switch\";\r\n\tthis.mapperName[16] = \"Bandai chip\";\r\n\tthis.mapperName[17] = \"FFE F8xxx\";\r\n\tthis.mapperName[18] = \"Jaleco SS8806 chip\";\r\n\tthis.mapperName[19] = \"Namcot 106 chip\";\r\n\tthis.mapperName[20] = \"Famicom Disk System\";\r\n\tthis.mapperName[21] = \"Konami VRC4a\";\r\n\tthis.mapperName[22] = \"Konami VRC2a\";\r\n\tthis.mapperName[23] = \"Konami VRC2a\";\r\n\tthis.mapperName[24] = \"Konami VRC6\";\r\n\tthis.mapperName[25] = \"Konami VRC4b\";\r\n\tthis.mapperName[32] = \"Irem G-101 chip\";\r\n\tthis.mapperName[33] = \"Taito TC0190/TC0350\";\r\n\tthis.mapperName[34] = \"32kB ROM switch\";\r\n\r\n\tthis.mapperName[64] = \"Tengen RAMBO-1 chip\";\r\n\tthis.mapperName[65] = \"Irem H-3001 chip\";\r\n\tthis.mapperName[66] = \"GNROM switch\";\r\n\tthis.mapperName[67] = \"SunSoft3 chip\";\r\n\tthis.mapperName[68] = \"SunSoft4 chip\";\r\n\tthis.mapperName[69] = \"SunSoft5 FME-7 chip\";\r\n\tthis.mapperName[71] = \"Camerica chip\";\r\n\tthis.mapperName[78] = \"Irem 74HC161/32-based\";\r\n\tthis.mapperName[91] = \"Pirate HK-SF3 chip\";\r\n};\r\n\r\nROM.prototype = {\r\n\t// Mirroring types:\r\n\tVERTICAL_MIRRORING: 0,\r\n\tHORIZONTAL_MIRRORING: 1,\r\n\tFOURSCREEN_MIRRORING: 2,\r\n\tSINGLESCREEN_MIRRORING: 3,\r\n\tSINGLESCREEN_MIRRORING2: 4,\r\n\tSINGLESCREEN_MIRRORING3: 5,\r\n\tSINGLESCREEN_MIRRORING4: 6,\r\n\tCHRROM_MIRRORING: 7,\r\n\r\n\theader: null,\r\n\trom: null,\r\n\tvrom: null,\r\n\tvromTile: null,\r\n\r\n\tromCount: null,\r\n\tvromCount: null,\r\n\tmirroring: null,\r\n\tbatteryRam: null,\r\n\ttrainer: null,\r\n\tfourScreen: null,\r\n\tmapperType: null,\r\n\tvalid: false,\r\n\r\n\tload: function(data) {\r\n\t\tlet i, j, v;\r\n\r\n\t\tif (data.indexOf(\"NES\\x1a\") === -1) {\r\n\t\t\tthrow new Error(\"Not a valid NES ROM.\");\r\n\t\t}\r\n\t\tthis.header = new Array(16);\r\n\t\tfor (i = 0; i < 16; i++) {\r\n\t\t\tthis.header[i] = data.charCodeAt(i) & 0xff;\r\n\t\t}\r\n\t\tthis.romCount = this.header[4];\r\n\t\tthis.vromCount = this.header[5] * 2; // Get the number of 4kB banks, not 8kB\r\n\t\tthis.mirroring = (this.header[6] & 1) !== 0 ? 1 : 0;\r\n\t\tthis.batteryRam = (this.header[6] & 2) !== 0;\r\n\t\tthis.trainer = (this.header[6] & 4) !== 0;\r\n\t\tthis.fourScreen = (this.header[6] & 8) !== 0;\r\n\t\tthis.mapperType = (this.header[6] >> 4) | (this.header[7] & 0xf0);\r\n\t\t/* TODO\r\n\t\t    if (this.batteryRam)\r\n\t\t        this.loadBatteryRam();*/\r\n\t\t// Check whether byte 8-15 are zero's:\r\n\t\tlet foundError = false;\r\n\t\tfor (i = 8; i < 16; i++) {\r\n\t\t\tif (this.header[i] !== 0) {\r\n\t\t\t\tfoundError = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (foundError) {\r\n\t\t\tthis.mapperType &= 0xf; // Ignore byte 7\r\n\t\t}\r\n\t\t// Load PRG-ROM banks:\r\n\t\tthis.rom = new Array(this.romCount);\r\n\t\tlet offset = 16;\r\n\t\tfor (i = 0; i < this.romCount; i++) {\r\n\t\t\tthis.rom[i] = new Array(16384);\r\n\t\t\tfor (j = 0; j < 16384; j++) {\r\n\t\t\t\tif (offset + j >= data.length) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tthis.rom[i][j] = data.charCodeAt(offset + j) & 0xff;\r\n\t\t\t}\r\n\t\t\toffset += 16384;\r\n\t\t}\r\n\t\t// Load CHR-ROM banks:\r\n\t\tthis.vrom = new Array(this.vromCount);\r\n\t\tfor (i = 0; i < this.vromCount; i++) {\r\n\t\t\tthis.vrom[i] = new Array(4096);\r\n\t\t\tfor (j = 0; j < 4096; j++) {\r\n\t\t\t\tif (offset + j >= data.length) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tthis.vrom[i][j] = data.charCodeAt(offset + j) & 0xff;\r\n\t\t\t}\r\n\t\t\toffset += 4096;\r\n\t\t}\r\n\r\n\t\t// Create VROM tiles:\r\n\t\tthis.vromTile = new Array(this.vromCount);\r\n\t\tfor (i = 0; i < this.vromCount; i++) {\r\n\t\t\tthis.vromTile[i] = new Array(256);\r\n\t\t\tfor (j = 0; j < 256; j++) {\r\n\t\t\t\tthis.vromTile[i][j] = new Tile();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Convert CHR-ROM banks to tiles:\r\n\t\tlet tileIndex;\r\n\t\tlet leftOver;\r\n\t\tfor (v = 0; v < this.vromCount; v++) {\r\n\t\t\tfor (i = 0; i < 4096; i++) {\r\n\t\t\t\ttileIndex = i >> 4;\r\n\t\t\t\tleftOver = i % 16;\r\n\t\t\t\tif (leftOver < 8) {\r\n\t\t\t\t\tthis.vromTile[v][tileIndex].setScanline(\r\n\t\t\t\t\t\tleftOver,\r\n\t\t\t\t\t\tthis.vrom[v][i],\r\n\t\t\t\t\t\tthis.vrom[v][i + 8]\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.vromTile[v][tileIndex].setScanline(\r\n\t\t\t\t\t\tleftOver - 8,\r\n\t\t\t\t\t\tthis.vrom[v][i - 8],\r\n\t\t\t\t\t\tthis.vrom[v][i]\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.valid = true;\r\n\t},\r\n\r\n\tgetMirroringType: function() {\r\n\t\tif (this.fourScreen) {\r\n\t\t\treturn this.FOURSCREEN_MIRRORING;\r\n\t\t}\r\n\t\tif (this.mirroring === 0) {\r\n\t\t\treturn this.HORIZONTAL_MIRRORING;\r\n\t\t}\r\n\t\treturn this.VERTICAL_MIRRORING;\r\n\t},\r\n\r\n\tgetMapperName: function() {\r\n\t\tif (this.mapperType >= 0 && this.mapperType < this.mapperName.length) {\r\n\t\t\treturn this.mapperName[this.mapperType];\r\n\t\t}\r\n\t\treturn \"Unknown Mapper, \" + this.mapperType;\r\n\t},\r\n\r\n\tmapperSupported: function() {\r\n\t\treturn typeof Mappers[this.mapperType] !== \"undefined\";\r\n\t},\r\n\r\n\tcreateMapper: function() {\r\n\t\tif (this.mapperSupported()) {\r\n\t\t\treturn new Mappers[this.mapperType](this.nes);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"This ROM uses a mapper not supported by JSNES: \" +\r\n\t\t\t\tthis.getMapperName() +\r\n\t\t\t\t\"(\" +\r\n\t\t\t\tthis.mapperType +\r\n\t\t\t\t\")\"\r\n\t\t\t);\r\n\t\t}\r\n\t},\r\n};\r\n\r\nmodule.exports = ROM;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/rom.js\n// module id = 8\n// module chunks = 0 1","let utils = require(\"./utils\");\r\n\r\nlet Mappers = {};\r\n\r\nMappers[0] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[0].prototype = {\r\n\treset: function() {\r\n\t\tthis.joy1StrobeState = 0;\r\n\t\tthis.joy2StrobeState = 0;\r\n\t\tthis.joypadLastWrite = 0;\r\n\r\n\t\tthis.zapperFired = false;\r\n\t\tthis.zapperX = null;\r\n\t\tthis.zapperY = null;\r\n\t},\r\n\r\n\twrite: function(address, value) {\r\n\t\tif (address < 0x2000) {\r\n\t\t\t// Mirroring of RAM:\r\n\t\t\tthis.nes.cpu.mem[address & 0x7ff] = value;\r\n\t\t} else if (address > 0x4017) {\r\n\t\t\tthis.nes.cpu.mem[address] = value;\r\n\t\t\tif (address >= 0x6000 && address < 0x8000) {\r\n\t\t\t\t// Write to persistent RAM\r\n\t\t\t\tthis.nes.opts.onBatteryRamWrite(address, value);\r\n\t\t\t}\r\n\t\t} else if (address > 0x2007 && address < 0x4000) {\r\n\t\t\tthis.regWrite(0x2000 + (address & 0x7), value);\r\n\t\t} else {\r\n\t\t\tthis.regWrite(address, value);\r\n\t\t}\r\n\t},\r\n\r\n\twritelow: function(address, value) {\r\n\t\tif (address < 0x2000) {\r\n\t\t\t// Mirroring of RAM:\r\n\t\t\tthis.nes.cpu.mem[address & 0x7ff] = value;\r\n\t\t} else if (address > 0x4017) {\r\n\t\t\tthis.nes.cpu.mem[address] = value;\r\n\t\t} else if (address > 0x2007 && address < 0x4000) {\r\n\t\t\tthis.regWrite(0x2000 + (address & 0x7), value);\r\n\t\t} else {\r\n\t\t\tthis.regWrite(address, value);\r\n\t\t}\r\n\t},\r\n\r\n\tload: function(address) {\r\n\t\t// Wrap around:\r\n\t\taddress &= 0xffff;\r\n\r\n\t\t// Check address range:\r\n\t\tif (address > 0x4017) {\r\n\t\t\t// ROM:\r\n\t\t\treturn this.nes.cpu.mem[address];\r\n\t\t} else if (address >= 0x2000) {\r\n\t\t\t// I/O Ports.\r\n\t\t\treturn this.regLoad(address);\r\n\t\t} else {\r\n\t\t\t// RAM (mirrored)\r\n\t\t\treturn this.nes.cpu.mem[address & 0x7ff];\r\n\t\t}\r\n\t},\r\n\r\n\tregLoad: function(address) {\r\n\t\tswitch (\r\n\t\t\taddress >> 12 // use fourth nibble (0xF000)\r\n\t\t) {\r\n\t\t\tcase 0:\r\n\t\t\tcase 1: {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 2:\r\n\t\t\tcase 3: {\r\n\t\t\t\t// PPU Registers\r\n\t\t\t\tswitch (address & 0x7) {\r\n\t\t\t\t\tcase 0x0: {\r\n\t\t\t\t\t\t// 0x2000:\r\n\t\t\t\t\t\t// PPU Control Register 1.\r\n\t\t\t\t\t\t// (the value is stored both\r\n\t\t\t\t\t\t// in main memory and in the\r\n\t\t\t\t\t\t// PPU as flags):\r\n\t\t\t\t\t\t// (not in the real NES)\r\n\t\t\t\t\t\treturn this.nes.cpu.mem[0x2000];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase 0x1: {\r\n\t\t\t\t\t\t// 0x2001:\r\n\t\t\t\t\t\t// PPU Control Register 2.\r\n\t\t\t\t\t\t// (the value is stored both\r\n\t\t\t\t\t\t// in main memory and in the\r\n\t\t\t\t\t\t// PPU as flags):\r\n\t\t\t\t\t\t// (not in the real NES)\r\n\t\t\t\t\t\treturn this.nes.cpu.mem[0x2001];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase 0x2: {\r\n\t\t\t\t\t\t// 0x2002:\r\n\t\t\t\t\t\t// PPU Status Register.\r\n\t\t\t\t\t\t// The value is stored in\r\n\t\t\t\t\t\t// main memory in addition\r\n\t\t\t\t\t\t// to as flags in the PPU.\r\n\t\t\t\t\t\t// (not in the real NES)\r\n\t\t\t\t\t\treturn this.nes.ppu.readStatusRegister();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase 0x3:\r\n\t\t\t\t\tcase 0x5:\r\n\t\t\t\t\tcase 0x6: {\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase 0x4: {\r\n\t\t\t\t\t\t// 0x2004:\r\n\t\t\t\t\t\t// Sprite Memory read.\r\n\t\t\t\t\t\treturn this.nes.ppu.sramLoad();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase 0x7: {\r\n\t\t\t\t\t\t// 0x2007:\r\n\t\t\t\t\t\t// VRAM read:\r\n\t\t\t\t\t\treturn this.nes.ppu.vramLoad();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 4: {\r\n\t\t\t\t// Sound+Joypad registers\r\n\t\t\t\tswitch (address - 0x4015) {\r\n\t\t\t\t\tcase 0: {\r\n\t\t\t\t\t\t// 0x4015:\r\n\t\t\t\t\t\t// Sound channel enable, DMC Status\r\n\t\t\t\t\t\treturn this.nes.papu.readReg(address);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase 1: {\r\n\t\t\t\t\t\t// 0x4016:\r\n\t\t\t\t\t\t// Joystick 1 + Strobe\r\n\t\t\t\t\t\treturn this.joy1Read();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase 2: {\r\n\t\t\t\t\t\t// 0x4017:\r\n\t\t\t\t\t\t// Joystick 2 + Strobe\r\n\t\t\t\t\t\t// https://wiki.nesdev.com/w/index.php/Zapper\r\n\t\t\t\t\t\tlet w;\r\n\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tthis.zapperX !== null &&\r\n\t\t\t\t\t\t\tthis.zapperY !== null &&\r\n\t\t\t\t\t\t\tthis.nes.ppu.isPixelWhite(this.zapperX, this.zapperY)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tw = 0;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tw = 0x1 << 3;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.zapperFired) {\r\n\t\t\t\t\t\t\tw |= 0x1 << 4;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn (this.joy2Read() | w) & 0xffff;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t},\r\n\r\n\tregWrite: function(address, value) {\r\n\t\tswitch (address) {\r\n\t\t\tcase 0x2000: {\r\n\t\t\t\t// PPU Control register 1\r\n\t\t\t\tthis.nes.cpu.mem[address] = value;\r\n\t\t\t\tthis.nes.ppu.updateControlReg1(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 0x2001: {\r\n\t\t\t\t// PPU Control register 2\r\n\t\t\t\tthis.nes.cpu.mem[address] = value;\r\n\t\t\t\tthis.nes.ppu.updateControlReg2(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 0x2003: {\r\n\t\t\t\t// Set Sprite RAM address:\r\n\t\t\t\tthis.nes.ppu.writeSRAMAddress(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 0x2004: {\r\n\t\t\t\t// Write to Sprite RAM:\r\n\t\t\t\tthis.nes.ppu.sramWrite(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 0x2005: {\r\n\t\t\t\t// Screen Scroll offsets:\r\n\t\t\t\tthis.nes.ppu.scrollWrite(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 0x2006: {\r\n\t\t\t\t// Set VRAM address:\r\n\t\t\t\tthis.nes.ppu.writeVRAMAddress(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 0x2007: {\r\n\t\t\t\t// Write to VRAM:\r\n\t\t\t\tthis.nes.ppu.vramWrite(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 0x4014: {\r\n\t\t\t\t// Sprite Memory DMA Access\r\n\t\t\t\tthis.nes.ppu.sramDMA(value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 0x4015: {\r\n\t\t\t\t// Sound Channel Switch, DMC Status\r\n\t\t\t\tthis.nes.papu.writeReg(address, value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 0x4016: {\r\n\t\t\t\t// Joystick 1 + Strobe\r\n\t\t\t\tif ((value & 1) === 0 && (this.joypadLastWrite & 1) === 1) {\r\n\t\t\t\t\tthis.joy1StrobeState = 0;\r\n\t\t\t\t\tthis.joy2StrobeState = 0;\r\n\t\t\t\t}\r\n\t\t\t\tthis.joypadLastWrite = value;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 0x4017: {\r\n\t\t\t\t// Sound channel frame sequencer:\r\n\t\t\t\tthis.nes.papu.writeReg(address, value);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault: {\r\n\t\t\t\t// Sound registers\r\n\t\t\t\t// console.log(\"write to sound reg\");\r\n\t\t\t\tif (address >= 0x4000 && address <= 0x4017) {\r\n\t\t\t\t\tthis.nes.papu.writeReg(address, value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tjoy1Read: function() {\r\n\t\tlet ret;\r\n\r\n\t\tswitch (this.joy1StrobeState) {\r\n\t\t\tcase 0:\r\n\t\t\tcase 1:\r\n\t\t\tcase 2:\r\n\t\t\tcase 3:\r\n\t\t\tcase 4:\r\n\t\t\tcase 5:\r\n\t\t\tcase 6:\r\n\t\t\tcase 7: {\r\n\t\t\t\tret = this.nes.controllers[1].state[this.joy1StrobeState];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 8:\r\n\t\t\tcase 9:\r\n\t\t\tcase 10:\r\n\t\t\tcase 11:\r\n\t\t\tcase 12:\r\n\t\t\tcase 13:\r\n\t\t\tcase 14:\r\n\t\t\tcase 15:\r\n\t\t\tcase 16:\r\n\t\t\tcase 17:\r\n\t\t\tcase 18: {\r\n\t\t\t\tret = 0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 19: {\r\n\t\t\t\tret = 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault: {\r\n\t\t\t\tret = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.joy1StrobeState++;\r\n\t\tif (this.joy1StrobeState === 24) {\r\n\t\t\tthis.joy1StrobeState = 0;\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t},\r\n\r\n\tjoy2Read: function() {\r\n\t\tlet ret;\r\n\r\n\t\tswitch (this.joy2StrobeState) {\r\n\t\t\tcase 0:\r\n\t\t\tcase 1:\r\n\t\t\tcase 2:\r\n\t\t\tcase 3:\r\n\t\t\tcase 4:\r\n\t\t\tcase 5:\r\n\t\t\tcase 6:\r\n\t\t\tcase 7: {\r\n\t\t\t\tret = this.nes.controllers[2].state[this.joy2StrobeState];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 8:\r\n\t\t\tcase 9:\r\n\t\t\tcase 10:\r\n\t\t\tcase 11:\r\n\t\t\tcase 12:\r\n\t\t\tcase 13:\r\n\t\t\tcase 14:\r\n\t\t\tcase 15:\r\n\t\t\tcase 16:\r\n\t\t\tcase 17:\r\n\t\t\tcase 18: {\r\n\t\t\t\tret = 0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 19: {\r\n\t\t\t\tret = 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault: {\r\n\t\t\t\tret = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.joy2StrobeState++;\r\n\t\tif (this.joy2StrobeState === 24) {\r\n\t\t\tthis.joy2StrobeState = 0;\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t},\r\n\r\n\tloadROM: function() {\r\n\t\tif (!this.nes.rom.valid || this.nes.rom.romCount < 1) {\r\n\t\t\tthrow new Error(\"NoMapper: Invalid ROM! Unable to load.\");\r\n\t\t}\r\n\r\n\t\t// Load ROM into memory:\r\n\t\tthis.loadPRGROM();\r\n\r\n\t\t// Load CHR-ROM:\r\n\t\tthis.loadCHRROM();\r\n\r\n\t\t// Load Battery RAM (if present):\r\n\t\tthis.loadBatteryRam();\r\n\r\n\t\t// Reset IRQ:\r\n\t\t//nes.getCpu().doResetInterrupt();\r\n\t\tthis.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n\t},\r\n\r\n\tloadPRGROM: function() {\r\n\t\tif (this.nes.rom.romCount > 1) {\r\n\t\t\t// Load the two first banks into memory.\r\n\t\t\tthis.loadRomBank(0, 0x8000);\r\n\t\t\tthis.loadRomBank(1, 0xc000);\r\n\t\t} else {\r\n\t\t\t// Load the one bank into both memory locations:\r\n\t\t\tthis.loadRomBank(0, 0x8000);\r\n\t\t\tthis.loadRomBank(0, 0xc000);\r\n\t\t}\r\n\t},\r\n\r\n\tloadCHRROM: function() {\r\n\t\t// console.log(\"Loading CHR ROM..\");\r\n\t\tif (this.nes.rom.vromCount > 0) {\r\n\t\t\tif (this.nes.rom.vromCount === 1) {\r\n\t\t\t\tthis.loadVromBank(0, 0x0000);\r\n\t\t\t\tthis.loadVromBank(0, 0x1000);\r\n\t\t\t} else {\r\n\t\t\t\tthis.loadVromBank(0, 0x0000);\r\n\t\t\t\tthis.loadVromBank(1, 0x1000);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t//System.out.println(\"There aren't any CHR-ROM banks..\");\r\n\t\t}\r\n\t},\r\n\r\n\tloadBatteryRam: function() {\r\n\t\tif (this.nes.rom.batteryRam) {\r\n\t\t\tlet ram = this.nes.rom.batteryRam;\r\n\t\t\tif (ram !== null && ram.length === 0x2000) {\r\n\t\t\t\t// Load Battery RAM into memory:\r\n\t\t\t\tutils.copyArrayElements(ram, 0, this.nes.cpu.mem, 0x6000, 0x2000);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tloadRomBank: function(bank, address) {\r\n\t\t// Loads a ROM bank into the specified address.\r\n\t\tbank %= this.nes.rom.romCount;\r\n\t\t//let data = this.nes.rom.rom[bank];\r\n\t\t//cpuMem.write(address,data,data.length);\r\n\t\tutils.copyArrayElements(\r\n\t\t\tthis.nes.rom.rom[bank],\r\n\t\t\t0,\r\n\t\t\tthis.nes.cpu.mem,\r\n\t\t\taddress,\r\n\t\t\t16384\r\n\t\t);\r\n\t},\r\n\r\n\tloadVromBank: function(bank, address) {\r\n\t\tif (this.nes.rom.vromCount === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.nes.ppu.triggerRendering();\r\n\r\n\t\tutils.copyArrayElements(\r\n\t\t\tthis.nes.rom.vrom[bank % this.nes.rom.vromCount],\r\n\t\t\t0,\r\n\t\t\tthis.nes.ppu.vramMem,\r\n\t\t\taddress,\r\n\t\t\t4096\r\n\t\t);\r\n\r\n\t\tlet vromTile = this.nes.rom.vromTile[bank % this.nes.rom.vromCount];\r\n\t\tutils.copyArrayElements(\r\n\t\t\tvromTile,\r\n\t\t\t0,\r\n\t\t\tthis.nes.ppu.ptTile,\r\n\t\t\taddress >> 4,\r\n\t\t\t256\r\n\t\t);\r\n\t},\r\n\r\n\tload32kRomBank: function(bank, address) {\r\n\t\tthis.loadRomBank((bank * 2) % this.nes.rom.romCount, address);\r\n\t\tthis.loadRomBank((bank * 2 + 1) % this.nes.rom.romCount, address + 16384);\r\n\t},\r\n\r\n\tload8kVromBank: function(bank4kStart, address) {\r\n\t\tif (this.nes.rom.vromCount === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.nes.ppu.triggerRendering();\r\n\r\n\t\tthis.loadVromBank(bank4kStart % this.nes.rom.vromCount, address);\r\n\t\tthis.loadVromBank(\r\n\t\t\t(bank4kStart + 1) % this.nes.rom.vromCount,\r\n\t\t\taddress + 4096\r\n\t\t);\r\n\t},\r\n\r\n\tload1kVromBank: function(bank1k, address) {\r\n\t\tif (this.nes.rom.vromCount === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.nes.ppu.triggerRendering();\r\n\r\n\t\tlet bank4k = Math.floor(bank1k / 4) % this.nes.rom.vromCount;\r\n\t\tlet bankoffset = (bank1k % 4) * 1024;\r\n\t\tutils.copyArrayElements(\r\n\t\t\tthis.nes.rom.vrom[bank4k],\r\n\t\t\tbankoffset,\r\n\t\t\tthis.nes.ppu.vramMem,\r\n\t\t\taddress,\r\n\t\t\t1024\r\n\t\t);\r\n\r\n\t\t// Update tiles:\r\n\t\tlet vromTile = this.nes.rom.vromTile[bank4k];\r\n\t\tlet baseIndex = address >> 4;\r\n\t\tfor (let i = 0; i < 64; i++) {\r\n\t\t\tthis.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank1k % 4 << 6) + i];\r\n\t\t}\r\n\t},\r\n\r\n\tload2kVromBank: function(bank2k, address) {\r\n\t\tif (this.nes.rom.vromCount === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.nes.ppu.triggerRendering();\r\n\r\n\t\tlet bank4k = Math.floor(bank2k / 2) % this.nes.rom.vromCount;\r\n\t\tlet bankoffset = (bank2k % 2) * 2048;\r\n\t\tutils.copyArrayElements(\r\n\t\t\tthis.nes.rom.vrom[bank4k],\r\n\t\t\tbankoffset,\r\n\t\t\tthis.nes.ppu.vramMem,\r\n\t\t\taddress,\r\n\t\t\t2048\r\n\t\t);\r\n\r\n\t\t// Update tiles:\r\n\t\tlet vromTile = this.nes.rom.vromTile[bank4k];\r\n\t\tlet baseIndex = address >> 4;\r\n\t\tfor (let i = 0; i < 128; i++) {\r\n\t\t\tthis.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank2k % 2 << 7) + i];\r\n\t\t}\r\n\t},\r\n\r\n\tload8kRomBank: function(bank8k, address) {\r\n\t\tlet bank16k = Math.floor(bank8k / 2) % this.nes.rom.romCount;\r\n\t\tlet offset = (bank8k % 2) * 8192;\r\n\r\n\t\t//this.nes.cpu.mem.write(address,this.nes.rom.rom[bank16k],offset,8192);\r\n\t\tutils.copyArrayElements(\r\n\t\t\tthis.nes.rom.rom[bank16k],\r\n\t\t\toffset,\r\n\t\t\tthis.nes.cpu.mem,\r\n\t\t\taddress,\r\n\t\t\t8192\r\n\t\t);\r\n\t},\r\n\r\n\tclockIrqCounter: function() {\r\n\t\t// Does nothing. This is used by the MMC3 mapper.\r\n\t},\r\n\r\n\t// eslint-disable-next-line no-unused-vars\r\n\tlatchAccess: function(address) {\r\n\t\t// Does nothing. This is used by MMC2.\r\n\t},\r\n\r\n\ttoJSON: function() {\r\n\t\treturn {\r\n\t\t\tjoy1StrobeState: this.joy1StrobeState,\r\n\t\t\tjoy2StrobeState: this.joy2StrobeState,\r\n\t\t\tjoypadLastWrite: this.joypadLastWrite,\r\n\t\t};\r\n\t},\r\n\r\n\tfromJSON: function(s) {\r\n\t\tthis.joy1StrobeState = s.joy1StrobeState;\r\n\t\tthis.joy2StrobeState = s.joy2StrobeState;\r\n\t\tthis.joypadLastWrite = s.joypadLastWrite;\r\n\t},\r\n};\r\n\r\nMappers[1] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[1].prototype = new Mappers[0]();\r\n\r\nMappers[1].prototype.reset = function() {\r\n\tMappers[0].prototype.reset.apply(this);\r\n\r\n\t// 5-bit buffer:\r\n\tthis.regBuffer = 0;\r\n\tthis.regBufferCounter = 0;\r\n\r\n\t// Register 0:\r\n\tthis.mirroring = 0;\r\n\tthis.oneScreenMirroring = 0;\r\n\tthis.prgSwitchingArea = 1;\r\n\tthis.prgSwitchingSize = 1;\r\n\tthis.vromSwitchingSize = 0;\r\n\r\n\t// Register 1:\r\n\tthis.romSelectionReg0 = 0;\r\n\r\n\t// Register 2:\r\n\tthis.romSelectionReg1 = 0;\r\n\r\n\t// Register 3:\r\n\tthis.romBankSelect = 0;\r\n};\r\n\r\nMappers[1].prototype.write = function(address, value) {\r\n\t// Writes to addresses other than MMC registers are handled by NoMapper.\r\n\tif (address < 0x8000) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t}\r\n\r\n\t// See what should be done with the written value:\r\n\tif ((value & 128) !== 0) {\r\n\t\t// Reset buffering:\r\n\t\tthis.regBufferCounter = 0;\r\n\t\tthis.regBuffer = 0;\r\n\r\n\t\t// Reset register:\r\n\t\tif (this.getRegNumber(address) === 0) {\r\n\t\t\tthis.prgSwitchingArea = 1;\r\n\t\t\tthis.prgSwitchingSize = 1;\r\n\t\t}\r\n\t} else {\r\n\t\t// Continue buffering:\r\n\t\t//regBuffer = (regBuffer & (0xFF-(1<<regBufferCounter))) | ((value & (1<<regBufferCounter))<<regBufferCounter);\r\n\t\tthis.regBuffer =\r\n\t\t\t(this.regBuffer & (0xff - (1 << this.regBufferCounter))) |\r\n\t\t\t((value & 1) << this.regBufferCounter);\r\n\t\tthis.regBufferCounter++;\r\n\r\n\t\tif (this.regBufferCounter === 5) {\r\n\t\t\t// Use the buffered value:\r\n\t\t\tthis.setReg(this.getRegNumber(address), this.regBuffer);\r\n\r\n\t\t\t// Reset buffer:\r\n\t\t\tthis.regBuffer = 0;\r\n\t\t\tthis.regBufferCounter = 0;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nMappers[1].prototype.setReg = function(reg, value) {\r\n\tlet tmp;\r\n\r\n\tswitch (reg) {\r\n\t\tcase 0: {\r\n\t\t\t// Mirroring:\r\n\t\t\ttmp = value & 3;\r\n\t\t\tif (tmp !== this.mirroring) {\r\n\t\t\t\t// Set mirroring:\r\n\t\t\t\tthis.mirroring = tmp;\r\n\t\t\t\tif ((this.mirroring & 2) === 0) {\r\n\t\t\t\t\t// SingleScreen mirroring overrides the other setting:\r\n\t\t\t\t\tthis.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\r\n\t\t\t\t} else if ((this.mirroring & 1) !== 0) {\r\n\t\t\t\t\t// Not overridden by SingleScreen mirroring.\r\n\t\t\t\t\tthis.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// PRG Switching Area;\r\n\t\t\tthis.prgSwitchingArea = (value >> 2) & 1;\r\n\r\n\t\t\t// PRG Switching Size:\r\n\t\t\tthis.prgSwitchingSize = (value >> 3) & 1;\r\n\r\n\t\t\t// VROM Switching Size:\r\n\t\t\tthis.vromSwitchingSize = (value >> 4) & 1;\r\n\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tcase 1: {\r\n\t\t\t// ROM selection:\r\n\t\t\tthis.romSelectionReg0 = (value >> 4) & 1;\r\n\r\n\t\t\t// Check whether the cart has VROM:\r\n\t\t\tif (this.nes.rom.vromCount > 0) {\r\n\t\t\t\t// Select VROM bank at 0x0000:\r\n\t\t\t\tif (this.vromSwitchingSize === 0) {\r\n\t\t\t\t\t// Swap 8kB VROM:\r\n\t\t\t\t\tif (this.romSelectionReg0 === 0) {\r\n\t\t\t\t\t\tthis.load8kVromBank(value & 0xf, 0x0000);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.load8kVromBank(\r\n\t\t\t\t\t\t\tMath.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\r\n\t\t\t\t\t\t\t0x0000\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Swap 4kB VROM:\r\n\t\t\t\t\tif (this.romSelectionReg0 === 0) {\r\n\t\t\t\t\t\tthis.loadVromBank(value & 0xf, 0x0000);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.loadVromBank(\r\n\t\t\t\t\t\t\tMath.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\r\n\t\t\t\t\t\t\t0x0000\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 2: {\r\n\t\t\t// ROM selection:\r\n\t\t\tthis.romSelectionReg1 = (value >> 4) & 1;\r\n\t\t\t// Check whether the cart has VROM:\r\n\t\t\tif (this.nes.rom.vromCount > 0) {\r\n\t\t\t\t// Select VROM bank at 0x1000:\r\n\t\t\t\tif (this.vromSwitchingSize === 1) {\r\n\t\t\t\t\t// Swap 4kB of VROM:\r\n\t\t\t\t\tif (this.romSelectionReg1 === 0) {\r\n\t\t\t\t\t\tthis.loadVromBank(value & 0xf, 0x1000);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.loadVromBank(\r\n\t\t\t\t\t\t\tMath.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\r\n\t\t\t\t\t\t\t0x1000\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\t// Select ROM bank:\r\n\t\t\t// -------------------------\r\n\t\t\ttmp = value & 0xf;\r\n\t\t\tlet bank;\r\n\t\t\tlet baseBank = 0;\r\n\r\n\t\t\tif (this.nes.rom.romCount >= 32) {\r\n\t\t\t\t// 1024 kB cart\r\n\t\t\t\tif (this.vromSwitchingSize === 0) {\r\n\t\t\t\t\tif (this.romSelectionReg0 === 1) {\r\n\t\t\t\t\t\tbaseBank = 16;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbaseBank =\r\n\t\t\t\t\t\t(this.romSelectionReg0 | (this.romSelectionReg1 << 1)) << 3;\r\n\t\t\t\t}\r\n\t\t\t} else if (this.nes.rom.romCount >= 16) {\r\n\t\t\t\t// 512 kB cart\r\n\t\t\t\tif (this.romSelectionReg0 === 1) {\r\n\t\t\t\t\tbaseBank = 8;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.prgSwitchingSize === 0) {\r\n\t\t\t\t// 32kB\r\n\t\t\t\tbank = baseBank + (value & 0xf);\r\n\t\t\t\tthis.load32kRomBank(bank, 0x8000);\r\n\t\t\t} else {\r\n\t\t\t\t// 16kB\r\n\t\t\t\tbank = baseBank * 2 + (value & 0xf);\r\n\t\t\t\tif (this.prgSwitchingArea === 0) {\r\n\t\t\t\t\tthis.loadRomBank(bank, 0xc000);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.loadRomBank(bank, 0x8000);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// Returns the register number from the address written to:\r\nMappers[1].prototype.getRegNumber = function(address) {\r\n\tif (address >= 0x8000 && address <= 0x9fff) {\r\n\t\treturn 0;\r\n\t} else if (address >= 0xa000 && address <= 0xbfff) {\r\n\t\treturn 1;\r\n\t} else if (address >= 0xc000 && address <= 0xdfff) {\r\n\t\treturn 2;\r\n\t} else {\r\n\t\treturn 3;\r\n\t}\r\n};\r\n\r\nMappers[1].prototype.loadROM = function() {\r\n\tif (!this.nes.rom.valid) {\r\n\t\tthrow new Error(\"MMC1: Invalid ROM! Unable to load.\");\r\n\t}\r\n\r\n\t// Load PRG-ROM:\r\n\tthis.loadRomBank(0, 0x8000); //   First ROM bank..\r\n\tthis.loadRomBank(this.nes.rom.romCount - 1, 0xc000); // ..and last ROM bank.\r\n\r\n\t// Load CHR-ROM:\r\n\tthis.loadCHRROM();\r\n\r\n\t// Load Battery RAM (if present):\r\n\tthis.loadBatteryRam();\r\n\r\n\t// Do Reset-Interrupt:\r\n\tthis.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nMappers[1].prototype.switchLowHighPrgRom = function(oldSetting) {\r\n\t// not yet.\r\n};\r\n\r\nMappers[1].prototype.switch16to32 = function() {\r\n\t// not yet.\r\n};\r\n\r\nMappers[1].prototype.switch32to16 = function() {\r\n\t// not yet.\r\n};\r\n\r\nMappers[1].prototype.toJSON = function() {\r\n\tlet s = Mappers[0].prototype.toJSON.apply(this);\r\n\ts.mirroring = this.mirroring;\r\n\ts.oneScreenMirroring = this.oneScreenMirroring;\r\n\ts.prgSwitchingArea = this.prgSwitchingArea;\r\n\ts.prgSwitchingSize = this.prgSwitchingSize;\r\n\ts.vromSwitchingSize = this.vromSwitchingSize;\r\n\ts.romSelectionReg0 = this.romSelectionReg0;\r\n\ts.romSelectionReg1 = this.romSelectionReg1;\r\n\ts.romBankSelect = this.romBankSelect;\r\n\ts.regBuffer = this.regBuffer;\r\n\ts.regBufferCounter = this.regBufferCounter;\r\n\treturn s;\r\n};\r\n\r\nMappers[1].prototype.fromJSON = function(s) {\r\n\tMappers[0].prototype.fromJSON.apply(this, arguments);\r\n\tthis.mirroring = s.mirroring;\r\n\tthis.oneScreenMirroring = s.oneScreenMirroring;\r\n\tthis.prgSwitchingArea = s.prgSwitchingArea;\r\n\tthis.prgSwitchingSize = s.prgSwitchingSize;\r\n\tthis.vromSwitchingSize = s.vromSwitchingSize;\r\n\tthis.romSelectionReg0 = s.romSelectionReg0;\r\n\tthis.romSelectionReg1 = s.romSelectionReg1;\r\n\tthis.romBankSelect = s.romBankSelect;\r\n\tthis.regBuffer = s.regBuffer;\r\n\tthis.regBufferCounter = s.regBufferCounter;\r\n};\r\n\r\nMappers[2] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[2].prototype = new Mappers[0]();\r\n\r\nMappers[2].prototype.write = function(address, value) {\r\n\t// Writes to addresses other than MMC registers are handled by NoMapper.\r\n\tif (address < 0x8000) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t} else {\r\n\t\t// This is a ROM bank select command.\r\n\t\t// Swap in the given ROM bank at 0x8000:\r\n\t\tthis.loadRomBank(value, 0x8000);\r\n\t}\r\n};\r\n\r\nMappers[2].prototype.loadROM = function() {\r\n\tif (!this.nes.rom.valid) {\r\n\t\tthrow new Error(\"UNROM: Invalid ROM! Unable to load.\");\r\n\t}\r\n\r\n\t// Load PRG-ROM:\r\n\tthis.loadRomBank(0, 0x8000);\r\n\tthis.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\r\n\r\n\t// Load CHR-ROM:\r\n\tthis.loadCHRROM();\r\n\r\n\t// Do Reset-Interrupt:\r\n\tthis.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n/**\r\n * Mapper 003 (CNROM)\r\n *\r\n * @constructor\r\n * @example Solomon's Key, Arkanoid, Arkista's Ring, Bump 'n' Jump, Cybernoid\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_003\r\n */\r\nMappers[3] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[3].prototype = new Mappers[0]();\r\n\r\nMappers[3].prototype.write = function(address, value) {\r\n\t// Writes to addresses other than MMC registers are handled by NoMapper.\r\n\tif (address < 0x8000) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t} else {\r\n\t\t// This is a ROM bank select command.\r\n\t\t// Swap in the given ROM bank at 0x8000:\r\n\t\t// This is a VROM bank select command.\r\n\t\t// Swap in the given VROM bank at 0x0000:\r\n\t\tlet bank = (value % (this.nes.rom.vromCount / 2)) * 2;\r\n\t\tthis.loadVromBank(bank, 0x0000);\r\n\t\tthis.loadVromBank(bank + 1, 0x1000);\r\n\t\tthis.load8kVromBank(value * 2, 0x0000);\r\n\t}\r\n};\r\n\r\nMappers[4] = function(nes) {\r\n\tthis.nes = nes;\r\n\r\n\tthis.CMD_SEL_2_1K_VROM_0000 = 0;\r\n\tthis.CMD_SEL_2_1K_VROM_0800 = 1;\r\n\tthis.CMD_SEL_1K_VROM_1000 = 2;\r\n\tthis.CMD_SEL_1K_VROM_1400 = 3;\r\n\tthis.CMD_SEL_1K_VROM_1800 = 4;\r\n\tthis.CMD_SEL_1K_VROM_1C00 = 5;\r\n\tthis.CMD_SEL_ROM_PAGE1 = 6;\r\n\tthis.CMD_SEL_ROM_PAGE2 = 7;\r\n\r\n\tthis.command = null;\r\n\tthis.prgAddressSelect = null;\r\n\tthis.chrAddressSelect = null;\r\n\tthis.pageNumber = null;\r\n\tthis.irqCounter = null;\r\n\tthis.irqLatchValue = null;\r\n\tthis.irqEnable = null;\r\n\tthis.prgAddressChanged = false;\r\n};\r\n\r\nMappers[4].prototype = new Mappers[0]();\r\n\r\nMappers[4].prototype.write = function(address, value) {\r\n\t// Writes to addresses other than MMC registers are handled by NoMapper.\r\n\tif (address < 0x8000) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t}\r\n\r\n\tswitch (address) {\r\n\t\tcase 0x8000: {\r\n\t\t\t// Command/Address Select register\r\n\t\t\tthis.command = value & 7;\r\n\t\t\tlet tmp = (value >> 6) & 1;\r\n\t\t\tif (tmp !== this.prgAddressSelect) {\r\n\t\t\t\tthis.prgAddressChanged = true;\r\n\t\t\t}\r\n\t\t\tthis.prgAddressSelect = tmp;\r\n\t\t\tthis.chrAddressSelect = (value >> 7) & 1;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 0x8001: {\r\n\t\t\t// Page number for command\r\n\t\t\tthis.executeCommand(this.command, value);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 0xa000: {\r\n\t\t\t// Mirroring select\r\n\t\t\tif ((value & 1) !== 0) {\r\n\t\t\t\tthis.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\r\n\t\t\t} else {\r\n\t\t\t\tthis.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 0xa001: {\r\n\t\t\t// SaveRAM Toggle\r\n\t\t\t// TODO\r\n\t\t\t//nes.getRom().setSaveState((value&1)!=0);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 0xc000: {\r\n\t\t\t// IRQ Counter register\r\n\t\t\tthis.irqCounter = value;\r\n\t\t\t//nes.ppu.mapperIrqCounter = 0;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 0xc001: {\r\n\t\t\t// IRQ Latch register\r\n\t\t\tthis.irqLatchValue = value;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 0xe000: {\r\n\t\t\t// IRQ Control Reg 0 (disable)\r\n\t\t\t//irqCounter = irqLatchValue;\r\n\t\t\tthis.irqEnable = 0;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 0xe001: {\r\n\t\t\t// IRQ Control Reg 1 (enable)\r\n\t\t\tthis.irqEnable = 1;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\t// Not a MMC3 register.\r\n\t\t\t// The game has probably crashed,\r\n\t\t\t// since it tries to write to ROM..\r\n\t\t\t// IGNORE.\r\n\t\t}\r\n\t}\r\n};\r\n\r\nMappers[4].prototype.executeCommand = function(cmd, arg) {\r\n\tswitch (cmd) {\r\n\t\tcase this.CMD_SEL_2_1K_VROM_0000:\r\n\t\t\t// Select 2 1KB VROM pages at 0x0000:\r\n\t\t\tif (this.chrAddressSelect === 0) {\r\n\t\t\t\tthis.load1kVromBank(arg, 0x0000);\r\n\t\t\t\tthis.load1kVromBank(arg + 1, 0x0400);\r\n\t\t\t} else {\r\n\t\t\t\tthis.load1kVromBank(arg, 0x1000);\r\n\t\t\t\tthis.load1kVromBank(arg + 1, 0x1400);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase this.CMD_SEL_2_1K_VROM_0800:\r\n\t\t\t// Select 2 1KB VROM pages at 0x0800:\r\n\t\t\tif (this.chrAddressSelect === 0) {\r\n\t\t\t\tthis.load1kVromBank(arg, 0x0800);\r\n\t\t\t\tthis.load1kVromBank(arg + 1, 0x0c00);\r\n\t\t\t} else {\r\n\t\t\t\tthis.load1kVromBank(arg, 0x1800);\r\n\t\t\t\tthis.load1kVromBank(arg + 1, 0x1c00);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase this.CMD_SEL_1K_VROM_1000:\r\n\t\t\t// Select 1K VROM Page at 0x1000:\r\n\t\t\tif (this.chrAddressSelect === 0) {\r\n\t\t\t\tthis.load1kVromBank(arg, 0x1000);\r\n\t\t\t} else {\r\n\t\t\t\tthis.load1kVromBank(arg, 0x0000);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase this.CMD_SEL_1K_VROM_1400:\r\n\t\t\t// Select 1K VROM Page at 0x1400:\r\n\t\t\tif (this.chrAddressSelect === 0) {\r\n\t\t\t\tthis.load1kVromBank(arg, 0x1400);\r\n\t\t\t} else {\r\n\t\t\t\tthis.load1kVromBank(arg, 0x0400);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase this.CMD_SEL_1K_VROM_1800:\r\n\t\t\t// Select 1K VROM Page at 0x1800:\r\n\t\t\tif (this.chrAddressSelect === 0) {\r\n\t\t\t\tthis.load1kVromBank(arg, 0x1800);\r\n\t\t\t} else {\r\n\t\t\t\tthis.load1kVromBank(arg, 0x0800);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase this.CMD_SEL_1K_VROM_1C00:\r\n\t\t\t// Select 1K VROM Page at 0x1C00:\r\n\t\t\tif (this.chrAddressSelect === 0) {\r\n\t\t\t\tthis.load1kVromBank(arg, 0x1c00);\r\n\t\t\t} else {\r\n\t\t\t\tthis.load1kVromBank(arg, 0x0c00);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase this.CMD_SEL_ROM_PAGE1:\r\n\t\t\tif (this.prgAddressChanged) {\r\n\t\t\t\t// Load the two hardwired banks:\r\n\t\t\t\tif (this.prgAddressSelect === 0) {\r\n\t\t\t\t\tthis.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\r\n\t\t\t\t}\r\n\t\t\t\tthis.prgAddressChanged = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Select first switchable ROM page:\r\n\t\t\tif (this.prgAddressSelect === 0) {\r\n\t\t\t\tthis.load8kRomBank(arg, 0x8000);\r\n\t\t\t} else {\r\n\t\t\t\tthis.load8kRomBank(arg, 0xc000);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase this.CMD_SEL_ROM_PAGE2:\r\n\t\t\t// Select second switchable ROM page:\r\n\t\t\tthis.load8kRomBank(arg, 0xa000);\r\n\r\n\t\t\t// hardwire appropriate bank:\r\n\t\t\tif (this.prgAddressChanged) {\r\n\t\t\t\t// Load the two hardwired banks:\r\n\t\t\t\tif (this.prgAddressSelect === 0) {\r\n\t\t\t\t\tthis.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\r\n\t\t\t\t}\r\n\t\t\t\tthis.prgAddressChanged = false;\r\n\t\t\t}\r\n\t}\r\n};\r\n\r\nMappers[4].prototype.loadROM = function() {\r\n\tif (!this.nes.rom.valid) {\r\n\t\tthrow new Error(\"MMC3: Invalid ROM! Unable to load.\");\r\n\t}\r\n\r\n\t// Load hardwired PRG banks (0xC000 and 0xE000):\r\n\tthis.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\r\n\tthis.load8kRomBank((this.nes.rom.romCount - 1) * 2 + 1, 0xe000);\r\n\r\n\t// Load swappable PRG banks (0x8000 and 0xA000):\r\n\tthis.load8kRomBank(0, 0x8000);\r\n\tthis.load8kRomBank(1, 0xa000);\r\n\r\n\t// Load CHR-ROM:\r\n\tthis.loadCHRROM();\r\n\r\n\t// Load Battery RAM (if present):\r\n\tthis.loadBatteryRam();\r\n\r\n\t// Do Reset-Interrupt:\r\n\tthis.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\nMappers[4].prototype.clockIrqCounter = function() {\r\n\tif (this.irqEnable === 1) {\r\n\t\tthis.irqCounter--;\r\n\t\tif (this.irqCounter < 0) {\r\n\t\t\t// Trigger IRQ:\r\n\t\t\t//nes.getCpu().doIrq();\r\n\t\t\tthis.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\r\n\t\t\tthis.irqCounter = this.irqLatchValue;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nMappers[4].prototype.toJSON = function() {\r\n\tlet s = Mappers[0].prototype.toJSON.apply(this);\r\n\ts.command = this.command;\r\n\ts.prgAddressSelect = this.prgAddressSelect;\r\n\ts.chrAddressSelect = this.chrAddressSelect;\r\n\ts.pageNumber = this.pageNumber;\r\n\ts.irqCounter = this.irqCounter;\r\n\ts.irqLatchValue = this.irqLatchValue;\r\n\ts.irqEnable = this.irqEnable;\r\n\ts.prgAddressChanged = this.prgAddressChanged;\r\n\treturn s;\r\n};\r\n\r\nMappers[4].prototype.fromJSON = function(s) {\r\n\tMappers[0].prototype.fromJSON.apply(this, arguments);\r\n\tthis.command = s.command;\r\n\tthis.prgAddressSelect = s.prgAddressSelect;\r\n\tthis.chrAddressSelect = s.chrAddressSelect;\r\n\tthis.pageNumber = s.pageNumber;\r\n\tthis.irqCounter = s.irqCounter;\r\n\tthis.irqLatchValue = s.irqLatchValue;\r\n\tthis.irqEnable = s.irqEnable;\r\n\tthis.prgAddressChanged = s.prgAddressChanged;\r\n};\r\n\r\n/**\r\n * Mapper005 (MMC5,ExROM)\r\n *\r\n * @example Castlevania 3, Just Breed, Uncharted Waters, Romance of the 3 Kingdoms 2, Laser Invasion, Metal Slader Glory, Uchuu Keibitai SDF, Shin 4 Nin Uchi Mahjong - Yakuman Tengoku\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_005\r\n * @constructor\r\n */\r\nMappers[5] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[5].prototype = new Mappers[0]();\r\n\r\nMappers[5].prototype.write = function(address, value) {\r\n\t// Writes to addresses other than MMC registers are handled by NoMapper.\r\n\tif (address < 0x8000) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t} else {\r\n\t\tthis.load8kVromBank(value, 0x0000);\r\n\t}\r\n};\r\n\r\nMappers[5].prototype.write = function(address, value) {\r\n\t// Writes to addresses other than MMC registers are handled by NoMapper.\r\n\tif (address < 0x5000) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t}\r\n\r\n\tswitch (address) {\r\n\t\tcase 0x5100:\r\n\t\t\tthis.prg_size = value & 3;\r\n\t\t\tbreak;\r\n\t\tcase 0x5101:\r\n\t\t\tthis.chr_size = value & 3;\r\n\t\t\tbreak;\r\n\t\tcase 0x5102:\r\n\t\t\tthis.sram_we_a = value & 3;\r\n\t\t\tbreak;\r\n\t\tcase 0x5103:\r\n\t\t\tthis.sram_we_b = value & 3;\r\n\t\t\tbreak;\r\n\t\tcase 0x5104:\r\n\t\t\tthis.graphic_mode = value & 3;\r\n\t\t\tbreak;\r\n\t\tcase 0x5105:\r\n\t\t\tthis.nametable_mode = value;\r\n\t\t\tthis.nametable_type[0] = value & 3;\r\n\t\t\tthis.load1kVromBank(value & 3, 0x2000);\r\n\t\t\tvalue >>= 2;\r\n\t\t\tthis.nametable_type[1] = value & 3;\r\n\t\t\tthis.load1kVromBank(value & 3, 0x2400);\r\n\t\t\tvalue >>= 2;\r\n\t\t\tthis.nametable_type[2] = value & 3;\r\n\t\t\tthis.load1kVromBank(value & 3, 0x2800);\r\n\t\t\tvalue >>= 2;\r\n\t\t\tthis.nametable_type[3] = value & 3;\r\n\t\t\tthis.load1kVromBank(value & 3, 0x2c00);\r\n\t\t\tbreak;\r\n\t\tcase 0x5106:\r\n\t\t\tthis.fill_chr = value;\r\n\t\t\tbreak;\r\n\t\tcase 0x5107:\r\n\t\t\tthis.fill_pal = value & 3;\r\n\t\t\tbreak;\r\n\t\tcase 0x5113:\r\n\t\t\tthis.SetBank_SRAM(3, value & 3);\r\n\t\t\tbreak;\r\n\t\tcase 0x5114:\r\n\t\tcase 0x5115:\r\n\t\tcase 0x5116:\r\n\t\tcase 0x5117:\r\n\t\t\tthis.SetBank_CPU(address, value);\r\n\t\t\tbreak;\r\n\t\tcase 0x5120:\r\n\t\tcase 0x5121:\r\n\t\tcase 0x5122:\r\n\t\tcase 0x5123:\r\n\t\tcase 0x5124:\r\n\t\tcase 0x5125:\r\n\t\tcase 0x5126:\r\n\t\tcase 0x5127:\r\n\t\t\tthis.chr_mode = 0;\r\n\t\t\tthis.chr_page[0][address & 7] = value;\r\n\t\t\tthis.SetBank_PPU();\r\n\t\t\tbreak;\r\n\t\tcase 0x5128:\r\n\t\tcase 0x5129:\r\n\t\tcase 0x512a:\r\n\t\tcase 0x512b:\r\n\t\t\tthis.chr_mode = 1;\r\n\t\t\tthis.chr_page[1][(address & 3) + 0] = value;\r\n\t\t\tthis.chr_page[1][(address & 3) + 4] = value;\r\n\t\t\tthis.SetBank_PPU();\r\n\t\t\tbreak;\r\n\t\tcase 0x5200:\r\n\t\t\tthis.split_control = value;\r\n\t\t\tbreak;\r\n\t\tcase 0x5201:\r\n\t\t\tthis.split_scroll = value;\r\n\t\t\tbreak;\r\n\t\tcase 0x5202:\r\n\t\t\tthis.split_page = value & 0x3f;\r\n\t\t\tbreak;\r\n\t\tcase 0x5203:\r\n\t\t\tthis.irq_line = value;\r\n\t\t\tthis.nes.cpu.ClearIRQ();\r\n\t\t\tbreak;\r\n\t\tcase 0x5204:\r\n\t\t\tthis.irq_enable = value;\r\n\t\t\tthis.nes.cpu.ClearIRQ();\r\n\t\t\tbreak;\r\n\t\tcase 0x5205:\r\n\t\t\tthis.mult_a = value;\r\n\t\t\tbreak;\r\n\t\tcase 0x5206:\r\n\t\t\tthis.mult_b = value;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tif (address >= 0x5000 && address <= 0x5015) {\r\n\t\t\t\tthis.nes.papu.exWrite(address, value);\r\n\t\t\t} else if (address >= 0x5c00 && address <= 0x5fff) {\r\n\t\t\t\tif (this.graphic_mode === 2) {\r\n\t\t\t\t\t// ExRAM\r\n\t\t\t\t\t// vram write\r\n\t\t\t\t} else if (this.graphic_mode !== 3) {\r\n\t\t\t\t\t// Split,ExGraphic\r\n\t\t\t\t\tif (this.irq_status & 0x40) {\r\n\t\t\t\t\t\t// vram write\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// vram write\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (address >= 0x6000 && address <= 0x7fff) {\r\n\t\t\t\tif (this.sram_we_a === 2 && this.sram_we_b === 1) {\r\n\t\t\t\t\t// additional ram write\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\nMappers[5].prototype.loadROM = function() {\r\n\tif (!this.nes.rom.valid) {\r\n\t\tthrow new Error(\"UNROM: Invalid ROM! Unable to load.\");\r\n\t}\r\n\r\n\t// Load PRG-ROM:\r\n\tthis.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0x8000);\r\n\tthis.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xa000);\r\n\tthis.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xc000);\r\n\tthis.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xe000);\r\n\r\n\t// Load CHR-ROM:\r\n\tthis.loadCHRROM();\r\n\r\n\t// Do Reset-Interrupt:\r\n\tthis.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n/**\r\n * Mapper007 (AxROM)\r\n * @example Battletoads, Time Lord, Marble Madness\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_007\r\n * @constructor\r\n */\r\nMappers[7] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[7].prototype = new Mappers[0]();\r\n\r\nMappers[7].prototype.write = function(address, value) {\r\n\t// Writes to addresses other than MMC registers are handled by NoMapper.\r\n\tif (address < 0x8000) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t} else {\r\n\t\tthis.load32kRomBank(value & 0x7, 0x8000);\r\n\t\tif (value & 0x10) {\r\n\t\t\tthis.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING2);\r\n\t\t} else {\r\n\t\t\tthis.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nMappers[7].prototype.loadROM = function() {\r\n\tif (!this.nes.rom.valid) {\r\n\t\tthrow new Error(\"AOROM: Invalid ROM! Unable to load.\");\r\n\t}\r\n\r\n\t// Load PRG-ROM:\r\n\tthis.loadPRGROM();\r\n\r\n\t// Load CHR-ROM:\r\n\tthis.loadCHRROM();\r\n\r\n\t// Do Reset-Interrupt:\r\n\tthis.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n/**\r\n * Mapper 011 (Color Dreams)\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/Color_Dreams\r\n * @example Crystal Mines, Metal Fighter\r\n * @constructor\r\n */\r\nMappers[11] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[11].prototype = new Mappers[0]();\r\n\r\nMappers[11].prototype.write = function(address, value) {\r\n\tif (address < 0x8000) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t} else {\r\n\t\t// Swap in the given PRG-ROM bank:\r\n\t\tlet prgbank1 = ((value & 0xf) * 2) % this.nes.rom.romCount;\r\n\t\tlet prgbank2 = ((value & 0xf) * 2 + 1) % this.nes.rom.romCount;\r\n\r\n\t\tthis.loadRomBank(prgbank1, 0x8000);\r\n\t\tthis.loadRomBank(prgbank2, 0xc000);\r\n\r\n\t\tif (this.nes.rom.vromCount > 0) {\r\n\t\t\t// Swap in the given VROM bank at 0x0000:\r\n\t\t\tlet bank = ((value >> 4) * 2) % this.nes.rom.vromCount;\r\n\t\t\tthis.loadVromBank(bank, 0x0000);\r\n\t\t\tthis.loadVromBank(bank + 1, 0x1000);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Mapper 034 (BNROM, NINA-01)\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_034\r\n * @example Darkseed, Mashou, Mission Impossible 2\r\n * @constructor\r\n */\r\nMappers[34] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[34].prototype = new Mappers[0]();\r\n\r\nMappers[34].prototype.write = function(address, value) {\r\n\tif (address < 0x8000) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t} else {\r\n\t\tthis.load32kRomBank(value, 0x8000);\r\n\t}\r\n};\r\n\r\n/**\r\n * Mapper 038\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_038\r\n * @example Crime Busters\r\n * @constructor\r\n */\r\nMappers[38] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[38].prototype = new Mappers[0]();\r\n\r\nMappers[38].prototype.write = function(address, value) {\r\n\tif (address < 0x7000 || address > 0x7fff) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t} else {\r\n\t\t// Swap in the given PRG-ROM bank at 0x8000:\r\n\t\tthis.load32kRomBank(value & 3, 0x8000);\r\n\r\n\t\t// Swap in the given VROM bank at 0x0000:\r\n\t\tthis.load8kVromBank(((value >> 2) & 3) * 2, 0x0000);\r\n\t}\r\n};\r\n\r\n/**\r\n * Mapper 066 (GxROM)\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_066\r\n * @example Doraemon, Dragon Power, Gumshoe, Thunder & Lightning,\r\n * Super Mario Bros. + Duck Hunt\r\n * @constructor\r\n */\r\nMappers[66] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[66].prototype = new Mappers[0]();\r\n\r\nMappers[66].prototype.write = function(address, value) {\r\n\tif (address < 0x8000) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t} else {\r\n\t\t// Swap in the given PRG-ROM bank at 0x8000:\r\n\t\tthis.load32kRomBank((value >> 4) & 3, 0x8000);\r\n\r\n\t\t// Swap in the given VROM bank at 0x0000:\r\n\t\tthis.load8kVromBank((value & 3) * 2, 0x0000);\r\n\t}\r\n};\r\n\r\n/**\r\n * Mapper 094 (UN1ROM)\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_094\r\n * @example Senjou no Ookami\r\n * @constructor\r\n */\r\nMappers[94] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[94].prototype = new Mappers[0]();\r\n\r\nMappers[94].prototype.write = function(address, value) {\r\n\t// Writes to addresses other than MMC registers are handled by NoMapper.\r\n\tif (address < 0x8000) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t} else {\r\n\t\t// This is a ROM bank select command.\r\n\t\t// Swap in the given ROM bank at 0x8000:\r\n\t\tthis.loadRomBank(value >> 2, 0x8000);\r\n\t}\r\n};\r\n\r\nMappers[94].prototype.loadROM = function() {\r\n\tif (!this.nes.rom.valid) {\r\n\t\tthrow new Error(\"UN1ROM: Invalid ROM! Unable to load.\");\r\n\t}\r\n\r\n\t// Load PRG-ROM:\r\n\tthis.loadRomBank(0, 0x8000);\r\n\tthis.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\r\n\r\n\t// Load CHR-ROM:\r\n\tthis.loadCHRROM();\r\n\r\n\t// Do Reset-Interrupt:\r\n\tthis.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n/**\r\n * Mapper 140\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_140\r\n * @example Bio Senshi Dan - Increaser Tono Tatakai\r\n * @constructor\r\n */\r\nMappers[140] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[140].prototype = new Mappers[0]();\r\n\r\nMappers[140].prototype.write = function(address, value) {\r\n\tif (address < 0x6000 || address > 0x7fff) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t} else {\r\n\t\t// Swap in the given PRG-ROM bank at 0x8000:\r\n\t\tthis.load32kRomBank((value >> 4) & 3, 0x8000);\r\n\r\n\t\t// Swap in the given VROM bank at 0x0000:\r\n\t\tthis.load8kVromBank((value & 0xf) * 2, 0x0000);\r\n\t}\r\n};\r\n\r\n/**\r\n * Mapper 180\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_180\r\n * @example Crazy Climber\r\n * @constructor\r\n */\r\nMappers[180] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[180].prototype = new Mappers[0]();\r\n\r\nMappers[180].prototype.write = function(address, value) {\r\n\t// Writes to addresses other than MMC registers are handled by NoMapper.\r\n\tif (address < 0x8000) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t} else {\r\n\t\t// This is a ROM bank select command.\r\n\t\t// Swap in the given ROM bank at 0xc000:\r\n\t\tthis.loadRomBank(value, 0xc000);\r\n\t}\r\n};\r\n\r\nMappers[180].prototype.loadROM = function() {\r\n\tif (!this.nes.rom.valid) {\r\n\t\tthrow new Error(\"Mapper 180: Invalid ROM! Unable to load.\");\r\n\t}\r\n\r\n\t// Load PRG-ROM:\r\n\tthis.loadRomBank(0, 0x8000);\r\n\tthis.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\r\n\r\n\t// Load CHR-ROM:\r\n\tthis.loadCHRROM();\r\n\r\n\t// Do Reset-Interrupt:\r\n\tthis.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n/**\r\n * Mapper 240\r\n *\r\n * @description https://www.nesdev.org/wiki/INES_Mapper_240\r\n * @example Jing Ke Xin Zhuan,Sheng Huo Lie Zhuan\r\n * @constructor https://blog.heheda.top\r\n */\r\nMappers[240] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[240].prototype = new Mappers[0]();\r\n\r\nMappers[240].prototype.write = function(address, value) {\r\n\tif (address < 0x4020 || address > 0x5FFF) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t} else {\r\n\t\t// Swap in the given PRG-ROM bank at 0x8000:\r\n\t\tthis.load32kRomBank((value >> 4) & 3, 0x8000);\r\n\r\n\t\t// Swap in the given VROM bank at 0x0000:\r\n\t\tthis.load8kVromBank((value & 0xf) * 2, 0x0000);\r\n\t}\r\n};\r\n\r\n/**\r\n * Mapper 241 (BNROM, NINA-01)\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_241\r\n * @example \r\n * @constructor https://blog.heheda.top\r\n */\r\nMappers[241] = function(nes) {\r\n\tthis.nes = nes;\r\n};\r\n\r\nMappers[241].prototype = new Mappers[0]();\r\n\r\nMappers[241].prototype.write = function(address, value) {\r\n\tif (address < 0x8000) {\r\n\t\tMappers[0].prototype.write.apply(this, arguments);\r\n\t\treturn;\r\n\t} else {\r\n\t\tthis.load32kRomBank(value, 0x8000);\r\n\t}\r\n};\r\n\r\nmodule.exports = Mappers;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mappers.js\n// module id = 9\n// module chunks = 0 1"],"sourceRoot":""}